<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今天你DEBUG了吗</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-26T09:29:25.379Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Patrick Yan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第10章）</title>
    <link href="http://yoursite.com/2020/07/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC10%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC10%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-26T09:29:18.000Z</published>
    <updated>2020-07-26T09:29:25.379Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200726172700318.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="10-预测响应（分类）模型的典型应用和技术小窍门"><a href="#10-预测响应（分类）模型的典型应用和技术小窍门" class="headerlink" title="10 预测响应（分类）模型的典型应用和技术小窍门"></a>10 预测响应（分类）模型的典型应用和技术小窍门</h2><p>预测响应模型是数据挖掘中最常见的应用模型，最直接的涉及的精细化运营的客户分层以及随后的个性化区别对待。</p><p>预测响应模型涉及的几种算法：神经网络、决策树、逻辑回归、多元线性回归。</p><h3 id="10-1-神经网络"><a href="#10-1-神经网络" class="headerlink" title="10.1 神经网络"></a>10.1 神经网络</h3><p>神经网络是一组互相连接的输入、输出单元，其中每个连接都会与一个权重相关联。在学习阶段，通过调整这些连接的权重就能够预测输入观察值的正确类标号。人工神经网络的结构大致分为两类：前向型网络、反馈型网络。</p><ul><li>前向型网络：是指传播方向是从输入和输出端，并且没有任何的反馈。</li><li>反馈型网络：是传播方向上除了从输入端到输出端之外，还有回环或反馈存在。<br><img src="https://img-blog.csdnimg.cn/20200726162554975.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><p>神经网络通过输入多个非线性模型，以及不同模型之间的加权互联，最终得到一个输出模型，具体来说，多元输入层是指一些自变量，这些自变量通过加权结合到中间的层次，称为隐蔽层（所谓的黑箱部分），隐蔽层主要包含的是非线性函数，也称转换函数或者挤压函数。</p><p>利用神经网络模型建模的过程中，有5个重大的影响因素：</p><ul><li>层数</li><li>每层中输入变量的数量</li><li>联系的种类</li><li>联系的程度</li><li>转换函数<br><img src="https://img-blog.csdnimg.cn/20200726163533419.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><p>大部分神经网络模型的学习过程，都是通过不断地改变权重来使误差达到总误差的最小绝对值。比如，以常见的前向型网络模型为例，其设计原理如下：</p><ul><li><strong>层数</strong>。对于一定的输入层和输出层，需要有多少个隐蔽层，从理论上，两层就足够了，在实践中，经常是一层隐蔽层就足够了。</li><li><strong>每层中输入变量的数量</strong>。输出层的变量由具体的分析背景来决定的，而隐蔽层的数量为输入数与输出数的乘积开平方，输入层的数量应该尽量精简。</li><li><strong>联系的程度</strong>。一般都选择所有层次间全部联系。</li><li><strong>转换函数</strong>。选用逻辑斯蒂回归作为主要的转换函数，因为逻辑斯蒂函数可以提供在最短时间内的最佳拟合。</li><li>样本开发样本要足够充分，避免过拟合现象发生。</li></ul><p><strong>神经网络的优势</strong></p><ul><li>有良好的自组织学习能力，神经网络可以根据外界数据的变化来不断修正自身的行为，对未经训练的数据模式的分类能力也比较强。</li><li>有比较优秀的在数据中挑选非线性关系的能力，能够有效发现非线性的内在规律，在复杂的业务逻辑中，数据间非线性关系出现的机会远比线性关系多得多，神经网络的这种能力能够提高应用价值和贡献潜力。</li><li>由于神经网络复杂的结构，在很多场合中应用的效果优于其他的建模方法，对异常值不敏感。</li><li>对噪声数据有比较高的承受能力。</li></ul><p><strong>神经网络的缺点和注意事项</strong></p><ul><li>神经网络需要比较长的模型训练时间。</li><li>对于神经网络模型，少而精的变量能够充分发挥神经网络的模型效率，但是神经网络本身不能挑选变量，因此变量的挑选对神经网络尤其重要。</li><li>模型搭建后直接投入使用，可能会得不到想要的效果，可以多尝试几种神经网络模型，多次验证后，挑选最稳定的模型进行使用。</li><li>神经网络本身对缺失值非常敏感，因此需要对缺失值进行替换、删除、赋值等操作。</li><li>具有过度拟合的倾向，可能导致模型应用于新数据时效率显著下降，因此需要仔细验证，在确定稳定的前提下进行使用。</li></ul><h3 id="10-2-决策树技术"><a href="#10-2-决策树技术" class="headerlink" title="10.2 决策树技术"></a>10.2 决策树技术</h3><p>决策树，其建模过程就是一棵树的成长，从树根、树干、树枝、树叶等。在决策树里，所分析的数据样本形成一个树根，经过层层分枝，最终形成若干个结点，每个结点代表一个结论。从决策树的根部到叶结点的一条路径就形成了对相应对象的类别预测。目前最常用的3种决策树算法分别是：CHAID、CART和ID3，包括后来的C4.5，乃至C5.0。</p><p><strong>决策树的原理和核心要素</strong><br>构造决策树采用的是自定向下的贪婪算法，它会在给个结点选择分类效果最好的属性进行分类，然后继续这个过程，直到这棵树能准确的分类训练样本，或者所有的属性被用完。决策树算法的核心是在对每一个结点进行测试后，选择最佳的属性，并且对决策树进行剪枝处理。</p><p>最常见的节点属性选择方法标准：有信息增益、信息增益率、Gini指数、卡方检验。</p><p>决策树的剪枝处理包括两种形式：先剪枝和后剪枝</p><ul><li><strong>先剪枝</strong>：就是决策树生长之前，就认为定好树的层数，以及每个节点所允许的最少的样本数量，而且在给定的节点不再分裂。</li><li><strong>后剪枝</strong>：让树先充分生长，然后剪去子树，删除节点的分支并用树叶替换，后剪枝的方法更常用，CART算法就包含了后剪枝的方法，他使用的是代价复杂度兼职算法，即将树的代价复杂度看作是树中树叶节点的个数和树的错误率的函数，C4.5使用的是悲观剪枝方法，类似于代价复杂度剪枝算法。</li></ul><p><strong>CHAID算法</strong>又称卡方自动相互关系检测，采用的是局部最优的原则，利用卡方检验来选择对因变量有影响的自变量，首先对所有自变量进行逐一检测，利用卡方检验确定每个自变量和因变量之间的关系，具体来说，就是在检验时，每次从自变量里抽取两个既定值，与因变量进行卡方检验，如果卡方检验显示两者关系不显著，则证明上述两个既定值可以合并，如果合并过程中将会不断减少自变量的取值数量，知道该自变量的所有取值都显现显著性为止，在对每个自变量进行类似处理后，通过比较找出最显著的自变量，并且按自变量最终取值对样本进行分割，形成若干个新的生长节点。</p><p><strong>CART算法</strong>采用的检验标准是基于Gini系数的，不是卡方检验的，CHAID采用的是局部最优的原则，而CART采用的是总体优化，而且CART所生产的二叉树。</p><p><strong>ID 3算法</strong>，迭代的二分器，最大的特点在于自变量的挑选标准是基于信息增益度量的，即选择具有最高信息增益的属性作为节点的分裂属性。</p><p><strong>决策树的应用优势</strong></p><ul><li>决策树非常直观，决策树的搭建和应用的速度比较快，并且可以处理区间型变量和类别型变量，但是要强调的是“可以处理区间型变量”不代表“快速处理区间型变量”，如果输入变量只是类别型变量或者次序型变量，搭建速度很快，但是对于区间型变量，视数据规模，决策树的搭建速度可能会有所不同。</li><li>决策树对于数据的分布没有特别严格的要求。</li><li>对缺失值很宽容，几乎不做任何处理就可以应用。</li><li>不容易受数据中极端值的影响。</li><li>可以同时对付数据中线性和非线性的关系</li></ul><p><strong>决策树的缺点和注意事项</strong></p><ul><li>决策树的最大缺点是其原理的贪心算法。</li><li>如果目标变量是连续性变量，不适用于决策树，最后改用线性回归算法去解决。</li><li>决策树没有像回归或者聚类那样的丰富多样的检测指标和评价方法。</li><li>当某些自变量的类别数量比较多，或者自变量是区间型时，决策树过拟合的危险性会增加。</li><li>决策树算法对区间型自变量进行分箱操作时，无论是否考虑了顺序因素，都有可能因为分箱导致丧失某些重要信息。</li></ul><h3 id="10-3-逻辑回归技术"><a href="#10-3-逻辑回归技术" class="headerlink" title="10.3 逻辑回归技术"></a>10.3 逻辑回归技术</h3><p>回归分析主要是包括逻辑回归技术和多元线性回归技术。</p><p>逻辑回归的原理：当目标变量是二元变量的时候，逻辑回归分析是一个非常成熟的主流模型算法。对于二元的目标变量来说，逻辑回归的目的就是要预测一组自变量数值相对应的因变量是“是”的概率，概率是介于【0,1】之间的，需要用到专门的Sigmoid函数。</p><p><strong>可能性比率（ODDS）</strong>是指一件事情发生的概率除以这件事情不发生的概率后得到的值。</p><ul><li>可能性比率为5，说明一件事件的可能性比不发生的可能性高5倍</li><li>可能性比率小于1， 说明一件事情的发生的概率低于50%</li><li>可能性比率大于1，说明一件事情的发生的概率高于50%，但最大值可以是无穷大</li></ul><p>逻辑回归使用的参数估计方法通常是最大似然法，利用最大似然法进行参数估计<br>对数似然函数。</p><p><strong>回归中变量中的筛选方法</strong></p><ul><li><strong>向前引入法</strong>。采用回归模型逐个引入自变量，刚开始模型中没有自变量，然后引入第一个自变量进入回归方程，并进行F检验和T检验，计算残差平方和，如果通过检验，则保留该变量，接着引入第二个变量，进行计算，从理论上来说，增加了一个变量，回归平方和应该增加，残差平方和应该减小，引入一个变量前后的残差平方和之差就是新引进的该自变量的偏回归平方和，如果改值明显偏大，则说明新引进的自变量对目标变量有显著影响繁殖则没有显著影响，向前迎入法最大的缺点是最先引入回归方程的变量在随后不会被剔除出去，会对后面的引入的变量的评估造成干扰。</li><li><strong>向后剔除法</strong>。向后剔除法正好与向前引入法相反，即首先把所有的变量一次性放进回归模型中进行F检验和T检验，然后逐个删除不显著的变量，删除的原则是根据偏回归平方和的大小决定的，如果偏回归平方和很大则保留，反之则删除，最大的缺点就是可能会引入一些不重要的变量，并且变量一旦被删除之后，就没有机会重新进入回归模型中。</li><li><strong>逐步回归法</strong>。该方法综合了上述两种方法的特点，自变量仍然是逐个进入回归模型，在引入变量时，需要利用偏回归平方和进行检验，只有显著时才可以加入，当新的变量加入模型后，又要重新对原来的老变量进行偏回归平方和的检验，一旦某变量变得不显著时就要立即删除该变量，如此循环往复，直到留下来的老变量均不可删除，并且新的变量无法加入为止。</li></ul><p><strong>逻辑回归的应用优势</strong><br>逻辑回归技术是最成熟、应用最广泛的。</p><p><strong>逻辑回归应用中的注意事项</strong></p><ul><li>建模数据量不能太少，目标变量中每个类别所对应的样本数量要足够充分才能支持建模。</li><li>要注意排除自变量中的共线性。</li><li>异常值会对模型造成干扰。</li><li>逻辑回归模型不能处理缺失值，所以要对缺失值进行适当的处理，或赋值、或替换、或删除。</li></ul><h3 id="10-4-多元线性回归技术"><a href="#10-4-多元线性回归技术" class="headerlink" title="10.4 多元线性回归技术"></a>10.4 多元线性回归技术</h3><p>线性回归是逻辑回归的基础，同时，线性回归也是数据挖掘中常用的处理预测问题的有效方法。线性回归与逻辑回归最大的不同在于目标变量的类型，线性回归所针对的目标变量是区间型的，逻辑回归针对的是类别性的变量。</p><p><strong>线性回归模型与逻辑回归模型的区别</strong></p><ul><li>线性回归模型的目标变量与自变量之间的关系假设是线性关系，而逻辑回归模型中的目标变量与自变量之间的关系是非线性的。</li><li>在线性分布通常假设，对应于自变量X的某个值，目标变量Y的观察值是服从正态分布的，而在逻辑回归中，目标变量Y是服从二项分布（0,1分布）或者多项分布的。</li><li>在逻辑回归中，不存在线性回归里常见的残差。</li><li>在参数的估值上，线性回归通常采用的是最小平方法，而逻辑回归通常采用的是最大似然法。</li></ul><p><strong>线性回归的优势</strong></p><ul><li>通俗易懂，多元线性回归非常容易被解读</li><li>速度快，效率高</li><li>可以作为查找异常值的有效工具</li></ul><p><strong>线性回归应用中的注意事项</strong></p><ul><li>算法对噪声和异常值比较敏感</li><li>该算法只适合处理线性关系，或者可以对自变量进行一定的转换</li><li>多元线性回归的应用还有一些前提假设：自变量是确定的变量，而不是随机变量，并且自变量之间是没有线性相关的，随机误差项均有均值为0和等方差性，随机误差呈正态分布</li></ul><h3 id="10-5-模型过拟合及对策"><a href="#10-5-模型过拟合及对策" class="headerlink" title="10.5 模型过拟合及对策"></a>10.5 模型过拟合及对策</h3><p>模型的过拟合是指模型在训练集离得表现非常令人满意，但是一旦应用到实际的业务场景中，效果会大打折扣。</p><p><strong>过拟合产生的原因</strong></p><ul><li>建模样本抽取错误，包括但不限于样本数量太少，抽样方法错误，抽样时没有足够这鞥缺的考虑业务场景和特点</li><li>样本里的噪声数据干扰过大</li><li>决策树模型的搭建过程中，没有合理的限制和修建</li><li>建模时的逻辑假设到了应用模型时已经不能成立的</li><li>使用了太多的输入变量</li></ul><p><strong>从技术层次上解决过拟合</strong></p><ul><li>最基本的技术手段就是合理、有效的抽样，包括分层抽样、过抽样等从而用不同的样本去检验模型</li><li>事先准备几个不同时间窗口、不同范围的测试数据集和验证数据集，在不同的数据集分别对模型进行交叉检验</li><li>建模时目标观测值的数量太少</li><li>如果数据太少，请谨慎使用神经网络模型，只有拥有足够多的数据，神经网络模型才能够有效的防止过拟合现象的发生</li></ul><h3 id="10-7-预测响应模型的应用步骤"><a href="#10-7-预测响应模型的应用步骤" class="headerlink" title="10.7 预测响应模型的应用步骤"></a>10.7 预测响应模型的应用步骤</h3><ol><li>基本的数据摸底</li><li>建模数据的抽取和清洗</li><li>初步的相关性检验和共线性排查</li><li>潜在自变量的分布转换</li><li>自变量的筛选</li><li>响应模型的搭建和优化</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200726172700318.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第9章）</title>
    <link href="http://yoursite.com/2020/07/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC9%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC9%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-26T07:42:12.000Z</published>
    <updated>2020-07-26T07:42:25.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020072615393543.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="9-聚类分析的典型应用和技术小窍门"><a href="#9-聚类分析的典型应用和技术小窍门" class="headerlink" title="9 聚类分析的典型应用和技术小窍门"></a>9 聚类分析的典型应用和技术小窍门</h2><h3 id="9-1-聚类分析的典型应用场景"><a href="#9-1-聚类分析的典型应用场景" class="headerlink" title="9.1 聚类分析的典型应用场景"></a>9.1 聚类分析的典型应用场景</h3><ul><li>目标用户群体分类</li><li>不同产品的价值组合</li><li>探测、发现孤立点、异常值。孤立点就是指相对于整体数据对象而言的少数数据对象，这些对象的行为特征与整体的数据行为特征很不一致，虽然在一般的数据处理过程中，会把孤立点作为噪声数据清理出去，但是在很多业务数据领域，孤立点的价值也很重要</li></ul><h3 id="9-2-主要聚类算法的分类"><a href="#9-2-主要聚类算法的分类" class="headerlink" title="9.2 主要聚类算法的分类"></a>9.2 主要聚类算法的分类</h3><h4 id="9-2-1-划分方法"><a href="#9-2-1-划分方法" class="headerlink" title="9.2.1 划分方法"></a>9.2.1 划分方法</h4><p>给定具有n个对象的数据集，采用划分方法对数据集进行k个划分，每个划分代表一个簇，k&lt;=n，并且每个划分至少包含一个对象，划分方法一般要做一个初始划分，然后采用迭代重新定位技术，通过让对象在不同组间的移动来改进划分的准确度和精度，一个好的划分原则是，同一个簇中对象之间的相似性很高，不同簇之间对象的相异性很高。</p><p>目前主流的划分方法如下：</p><ul><li><strong>K-Means算法</strong>，又叫K均值算法，在给定一个数据集合需要划分的数目k后，该算法可以根据数据划分到k个簇中，直到收敛为止，K-Means算法用的是簇中对象的平均值来划分，大致步骤就是，首先从随机抽取的k个数据点作为初始的聚类中心（种子中心），然后计算每个数据点到每个种子中心的距离，并把每个数据点分配到距离它最近的种子中心，一旦所有的数据点都被分配完成，每个聚类的聚类中心（种子中心）按照本聚类的现有数据点进行重新计算，不断重复，直到收敛，既满足某个终止条件，最常见的终止条件就是误差平方和（SSE）局部最小。</li><li><strong>K-Medoids算法</strong>，又叫K中心点算法，该算法用最接近簇中心的一个对象表示划分的每个簇，划分过程相似，与K-Means算法最大的不同在于，K-Medoids算法是用簇中最接近中心点的一个真实数据对象来代表簇，而K-Means算法是用计算出来的簇中对象的平均值来代表该簇的。</li></ul><h4 id="9-2-2-层次方法"><a href="#9-2-2-层次方法" class="headerlink" title="9.2.2 层次方法"></a>9.2.2 层次方法</h4><p>在给定n个对象的数据集后，可用层次方法对数据集进行层次分解，直到满足某种收敛条件为止。</p><p>层次方法有可分为：</p><ul><li><strong>凝聚层次聚类</strong>：又叫自底向上方法，一开始把每个对象作为单独的一类，然后相继合并与之相似的对象或者类，直到所有小的类别合并成一个类，达到收敛。</li><li><strong>分裂层次聚类</strong>：又叫自顶向下方法，一开始将所有的对象置于一个簇中，在迭代的每一步中，类会被分裂成更小的一类，直到最终每个对象在单独的一个类中，收敛达到终止条件。</li></ul><p>层次方法最大的缺陷是，合并或分裂点的选择比较困难，对于局部来说，好的合并或分裂点的选择往往并不能保证会得到高质量的全局的聚类结果，而且一旦一个步骤完成，它就不能撤销。</p><h4 id="9-2-3-基于密度的方法"><a href="#9-2-3-基于密度的方法" class="headerlink" title="9.2.3 基于密度的方法"></a>9.2.3 基于密度的方法</h4><p>传统的聚类方法都是基于对象之间的距离，但是这些基于距离的方法只能发现球状类型的数据，对于非球状类型的数据，只根据距离是不够的。</p><p>基于密度的方法原理是：只要邻近区域里的密度超过了某个阈值，就继续聚类，换言之，给定某个簇中的每个数据点，在一定范围内必须包含一定数量的其他对象。该算法从数据对象的分布密度触发，把密度足够大的区域连接在一起，因此可以发现任意形状的累，同时该算法还能够过滤噪声数据，典型算法是DBSCAN以及扩展算法OPTICS，但是最大的缺点是，该算法需要用户确定输入参数，而且对参数十分敏感。</p><h4 id="9-2-4-基于网格的方法"><a href="#9-2-4-基于网格的方法" class="headerlink" title="9.2.4 基于网格的方法"></a>9.2.4 基于网格的方法</h4><p>将对象空间量化为有限数目的单元，而这些单元则形成了网格结构，所有的聚类操作都是在这个网格结构中进行的，该算法的优点是处理速度快，其处理时间常常独立于数据对象的数目，只跟量化空间每一维的单元数目有关。</p><p>典型算法是STING，该算法是一种基于网格的多分辨率局累计数，将空间区域划分为不同分辨率级别的矩形单元，并形成一个层次结构，且高层的低分辨率单元会被划分为多个低一层次的较高分辨率单元，这种算法从最底层的网格开始逐渐向上计算网格内数据的统计信息并储存，网格建立完成后，则用类似于DBSCAN的方法对网格进行聚类。</p><h3 id="9-3-聚类分析在实践应用中的重点注意事项"><a href="#9-3-聚类分析在实践应用中的重点注意事项" class="headerlink" title="9.3 聚类分析在实践应用中的重点注意事项"></a>9.3 聚类分析在实践应用中的重点注意事项</h3><h4 id="9-3-1-处理数据噪声和异常值"><a href="#9-3-1-处理数据噪声和异常值" class="headerlink" title="9.3.1 处理数据噪声和异常值"></a>9.3.1 处理数据噪声和异常值</h4><p>数据化运营中聚类算法主要是K-Means算法，但其对噪声和异常值非常敏感（K-Means算法用的是平均值来聚类）</p><p>常见的处理方法：</p><ul><li>直接删除那些比其他任何数据点都要远离聚类中心点的异常值，为了防止误删除，需要在多次的聚类循环中监控异常值，根据业务逻辑与多次的循环结果进行比较，然后决定删除。</li><li>随机抽样的方法也能够较好的规避数据噪声的影响，因为随机抽样，所以，被抽中的几率很小，不仅可以避免数据噪声的误导和干扰，而且聚类后的结果作为聚类模型可以应用到剩余的数据集中————直接用该聚类模型对剩余的数据集进行判断、利用监督学习的分类器原理，每个聚类作为一个类别，用于判断剩余的那些数据点最适合放进哪个类别或者聚类群体中。</li></ul><h4 id="9-3-2-数据标准化"><a href="#9-3-2-数据标准化" class="headerlink" title="9.3.2 数据标准化"></a>9.3.2 数据标准化</h4><p>数据标准化是聚类分析中最重要的一个数据预处理步骤，它即可以为聚类计算中的各个属性赋予相同的权重，还可以有效化解不同属性因度量单位不统一所带来的潜在的数量等级的差异。</p><p>数据标准化有很多不同方式，标准差标准化最常用（Z-Score标准化），处理后数据符合标准正态分布，即均值为0，标准差为1，转化公式如下：<br><img src="https://img-blog.csdnimg.cn/20200726142033616.PNG#pic_center" alt="在这里插入图片描述"></p><h4 id="9-3-3-聚类变量少而精"><a href="#9-3-3-聚类变量少而精" class="headerlink" title="9.3.3 聚类变量少而精"></a>9.3.3 聚类变量少而精</h4><ul><li>紧紧围绕具体分析目的和业务需求挑选聚类变量</li><li>通过相关性检测，防止相关性高的变量同时进入聚类计算（如：登录次数、在线时长、PV浏览量等变量之间都是明显相关的，选取一个即可）</li><li>衍生变量</li><li>主成分分析</li></ul><h3 id="9-4-聚类分析的扩展应用"><a href="#9-4-聚类分析的扩展应用" class="headerlink" title="9.4 聚类分析的扩展应用"></a>9.4 聚类分析的扩展应用</h3><h4 id="9-4-1-聚类的核心指标与非聚类的业务指标相辅相成"><a href="#9-4-1-聚类的核心指标与非聚类的业务指标相辅相成" class="headerlink" title="9.4.1 聚类的核心指标与非聚类的业务指标相辅相成"></a>9.4.1 聚类的核心指标与非聚类的业务指标相辅相成</h4><p>一方面坚持参与聚类的变量少而精的原则，另一方面把非聚类的业务指标与聚类结果一起拿来分析、提炼、挖掘，这种相辅相成的做法在聚类分析的应用实践中已经得到了普遍的认可和采用。</p><p>具体来说，先通过用户行为属性里的核心字段进行聚类分群，在得到比较满意的聚类分析结果后，针对每个具体细分的对象群体，再分别考察用户的会员属性。</p><h4 id="9-4-2-数据的探索和清理工具"><a href="#9-4-2-数据的探索和清理工具" class="headerlink" title="9.4.2 数据的探索和清理工具"></a>9.4.2 数据的探索和清理工具</h4><ul><li>聚类技术的聚类类别可以作为一个新的字段加入到其他的模型搭建中，可能会提高建模的效率和增强效果。</li><li>在合适的场景中，可以作为细分群体的建模依据，细分建模的精度比整体建模的精度要高一些。</li><li>聚类技术的应用本身就是数据探索和熟悉的过程。</li><li>聚类技术对变量的聚类是精简变量的有效方法。</li><li>聚类技术可以用来检查数据的共线性问题。</li></ul><h4 id="9-4-3-个性推荐的应用"><a href="#9-4-3-个性推荐的应用" class="headerlink" title="9.4.3 个性推荐的应用"></a>9.4.3 个性推荐的应用</h4><h3 id="9-5-聚类分析的优势和缺点"><a href="#9-5-聚类分析的优势和缺点" class="headerlink" title="9.5 聚类分析的优势和缺点"></a>9.5 聚类分析的优势和缺点</h3><p><strong>优点</strong></p><ul><li>聚类技术已经比较成熟，算法比较可靠，是一个不错的数据群体细分的工具和方法</li><li>不仅是一种模型技术，而且也可以作为数据摸底和数据清洗的工具</li><li>如果聚类技术使用的好，聚类的结果比较容易用商业和业务的逻辑来解释</li><li>算法简洁、高效，时间复杂度O(tkn)，t是循环的次数，k是聚类的个数，n是数据点的个数，由于n远远大于k和t，因此K-Means的算法时间复杂度与数据记得大小是线性相关</li><li>K-Means算法是一个不依赖顺序的算法</li></ul><p><strong>缺点</strong></p><ul><li>需要实现指定K，在实践中，需要测试多个不同的k才能最终确定最合适的K</li><li>对数据噪声和异常值比较敏感</li></ul><h3 id="9-6-聚类分析结果的评价体系和评价指标"><a href="#9-6-聚类分析结果的评价体系和评价指标" class="headerlink" title="9.6 聚类分析结果的评价体系和评价指标"></a>9.6 聚类分析结果的评价体系和评价指标</h3><p>A：业务专家的评估</p><p>B：聚类技术上的评价指标</p><ul><li>RMSSTD：群体中所有变量的综合标准差，RMSSTD越小，群体内（簇内）个体的相似程度越高，聚类效果越好</li><li>R-Square：聚类后群体间差异的大小，R-Square越大，群体间相异性越高，聚类效果越好</li><li>SPR：适合于层次方法中的凝聚层次聚类算法，表示当原来两个群体合并成新群体后，所损失的群内相似性的比例，SPR越小，表明合并成新的群体时，损失的群内相似性比例越小，新群体内的相似性越高，聚类效果越好</li><li>Dinstance Between Clusters：适合凝聚层次聚类方法。表示再要合并两个细分群体的时候，分别计算两个群体的中心，以求得两个群体的距离，一般来说，距离越小说明两个群体越适合合并成一个新群体</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020072615393543.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第8章）</title>
    <link href="http://yoursite.com/2020/07/25/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC8%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/25/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC8%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-25T11:00:08.000Z</published>
    <updated>2020-07-25T11:00:12.848Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020072518565969.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="8-常见的数据处理技巧"><a href="#8-常见的数据处理技巧" class="headerlink" title="8 常见的数据处理技巧"></a>8 常见的数据处理技巧</h2><h3 id="8-1-数据的抽取要正确反映业务需求"><a href="#8-1-数据的抽取要正确反映业务需求" class="headerlink" title="8.1 数据的抽取要正确反映业务需求"></a>8.1 数据的抽取要正确反映业务需求</h3><p>如何尽量保证数据的抽取正确反映业务需求？</p><ul><li>真正熟悉业务背景</li><li>确保抽取的数据所对应的当时业务背景与现在的业务需求即将应用的业务背景没有明显的重大改变</li></ul><h3 id="8-2-数据抽样"><a href="#8-2-数据抽样" class="headerlink" title="8.2 数据抽样"></a>8.2 数据抽样</h3><p>“抽样”对于数据分析和挖掘来说是一种常见的前期数据处理技术和手段</p><ul><li>主要原因是如果<strong>数据全集的规模太大</strong>，针对数据全集进行分析计算不但会消耗更多的运算资源，还会显著增加运算分析的时间，甚至太大的数据量在数据分析挖掘软件运行时崩溃，采用采样措施可以有效显著的降低这些负面影响；</li><li>另一个常见使用场景就是，在有很多<strong>小概率事件、稀有事件</strong>的预测建模过程中，如果按照原始的数据全集，原始的稀有占比进行分析挖掘，0.2%的稀有事件很难通过数据挖掘得到有意义的预测和结论 ，因此需要通过采样措施，认为增加样本中的“稀有事件”的浓度和在样本中的占比。</li></ul><p>在抽样的操作中，需注意：</p><ul><li>样本中<strong>输入变量的值域</strong>要与数据全集中输入变量的值域一致</li><li>样本中<strong>输入变量的分布</strong>与数据全集中输入变量的分布保持一致，或高度相似</li><li>样本中<strong>因变量的值域或者种类分布</strong>也要与数据全集中的目标变量值域或者种类的分布保持一致</li><li><strong>缺失值的分布</strong>，样本中缺失值的分布要与数据全集中缺失集的分布保持一致或者高度相似</li><li>针对<strong>稀有事件</strong>建模师要采用抽样措施，由于抽样所造成的目标事件在样本中的浓度被认为放大了，样本中的事件与非事件的比例与数据全集中两者的比例不一致，因此，需要记得使用<strong>加权的方法</strong>恢复新样本对全体数据集的代表性，当然现在主流的数据挖掘软件，对这种加权恢复已经做了自动处理</li></ul><h3 id="8-3-分析数据的规模有哪些具体的要求"><a href="#8-3-分析数据的规模有哪些具体的要求" class="headerlink" title="8.3 分析数据的规模有哪些具体的要求"></a>8.3 分析数据的规模有哪些具体的要求</h3><p>分析数据的规模，主要指用于数据分析挖掘建模时最起码的数据规模大小。重点是考量目标变量所对应的目标事件的数量。</p><p>一般情况下，数据挖掘建模过程中会将样本划分为三个子样本集：训练集、验证集、测试集，或者划分成两个子样本集：训练集和验证集，训练记得数量大概占总样本数量级的40%-70%，在理想的情况下，训练记得目标事件的数量应该有1000个，因为太少的目标事件样本基础上开发的模型缺乏稳定性，如果少于1000个，根据业务分析判断可行的话，也可以进行数据挖掘，只是需要更加关注模型的稳定性。</p><p>预测模型的自变量应该控制在8-20个之间，因为太少的自变量会对模型的稳定性造成威胁，任何一个自变量的缺失都会引起模型结果的显著变动，太多的自变量会因为模型变得复杂而不稳定。</p><p>训练集目标事件最好要在1000个以上，在此基础上，训练集的样本的规模应该在自变量数量的10倍以上，并且被预测的目标事件至少是自变量数目的6-8倍。</p><h3 id="8-4-如何处理缺失值和异常值"><a href="#8-4-如何处理缺失值和异常值" class="headerlink" title="8.4 如何处理缺失值和异常值"></a>8.4 如何处理缺失值和异常值</h3><p>数据缺失主要是因为数据存储错误，或者原始数据的缺少。在大多数情况下，需要对缺失数据进行处理，在个别情况下，比如应用决策树算法，该算法本身允许数据缺失值直接进入分析挖掘，因为在这种情况下缺失值本身已经被看做是一个特定的属性类别。</p><h4 id="8-4-1-缺失值的常见处理方法"><a href="#8-4-1-缺失值的常见处理方法" class="headerlink" title="8.4.1 缺失值的常见处理方法"></a>8.4.1 缺失值的常见处理方法</h4><ol><li>首先需要分析找到数据缺失的原因，然后进行判断是否需要对缺失值进行处理</li><li>如果要进行处理，可以选择直接删除带有缺失值的数据元组。这样做的好处在于留下来的数据都是有完整记录的，数据很干净，删除的步骤很简单，但是，如果缺失的比例很大的话，留下来的数据量就很小，不足以进行有效的数据挖掘，这种方法仅适用于缺失值比例很小，并且后期打分应用中数据的缺失值比例也很少的情况</li><li><strong>直接删除</strong>有大量缺失值的变量。针对于那些确实只占比超过相当比例变量，比如缺失值超过20%或者更多</li><li>对缺失值进行<strong>替换</strong>。可以利用全集中的代表性属性，诸如众数或者均值等，或者人为定义一个数据去代替缺失值的情况，对于类别型变量，用众数或者一个崭新的类别进行代替，对于次序型变量和区间型变量，用中间值、众数、最大值、最小值、用户定义的任意其他值、平均值或仅针对区间型变量来代替缺失值</li><li>对缺失值进行<strong>赋值</strong>。通过诸如回归模型、决策树模型、贝叶斯定理等去预测最近替代值，就是把缺失数据所对应的变量作为目标变量，把其他的输入变量作为自变量，为每个需要进行缺失值复制的字段分别建立预测模型，从理论上看，这种方法最严谨，但是成本较高，包括时间成本和分析资源的投入成本</li></ol><h4 id="8-4-2-异常值的判断和处理"><a href="#8-4-2-异常值的判断和处理" class="headerlink" title="8.4.2 异常值的判断和处理"></a>8.4.2 异常值的判断和处理</h4><p>数据成本中的异常值（outlier）指的是一个类别型变量里某个类别值出现的次数太少、太稀有，或者一个区间型变量里某些取值太大。</p><p>异常值的判断：</p><ul><li>对于类别型的变量，某个类别值出现的频率太小，太稀有，可能是异常值</li><li>对于区间型变量，最简单有效的方法就是把所有的观察对象按照变量的取值从小到大进行排列，然后从最大的数值进行倒推0.1%甚至更多，这些最大的数值可能就是异常值，另外一个常用的判断方法就是标准差，根据不同的业务背景和变量的业务含义，把超过均值n个标准差以上的取值定义为异常值</li></ul><p>对于异常值，在多数情况下，异常值的删除可以有效的降低数据的波动，使模型更加稳定，但是在某些业务场景下，异常值的应用缺失另一个专门的业务方向。</p><h3 id="8-5-数据转换"><a href="#8-5-数据转换" class="headerlink" title="8.5 数据转换"></a>8.5 数据转换</h3><p>由于原始数据，主要是指区间型变量的分布不平滑（有噪声）、不对称分布，使得数据转换成为一种非常重要的技术手段，根据转化逻辑和转换目的，主要分为四类：</p><p>A.生成衍生变量<br>通过对原始数据进行简单、适当的数学公式推导，产生更加具有商业意义的新变量。如：用户月均、年均消费金额，特定商品类目消费金额占其全部消费金额的比例，家庭人均年收入等。</p><p>B.改善变量分布的转换<br>通过各种数学转换，使得自变量的分布呈现（或近似）正态分布，并形成倒钟型曲线，常见的改善分布的转换措施有:取对数、开平方根、取倒数、开平方、取指数。</p><p>C.区间型变量的分箱转换<br>分箱转换就是区间型变量就是把区间型变量转换成次序型变量，主要目的是降低变量的复杂性、简化数据，提升自变量的预测能力，如果分箱恰当，是可以有效提升自变量和因变量的相关性的，可以显著提升模型的预测效率和效果，尤其是当自变量和因变量之间有比较明显的非线性关系，分享操作跟是不错的手段，另外，当自变量的偏度很大时，也是一个值得积极尝试的方法。</p><p>D.针对区间型变量进行标准化操作<br>数据标准化转化的主要目的是将数据按照比例进行缩放，使之落入一个小的区间范围之内，使得不同的变量经过标准化后可以有平等的分析和比较的基础。</p><p>最简单的数据标准化转换是Min-Max标准化，也叫离差标准化，是对原始数据进行线性转换，使得结果在【0,1】区间<br>x*=（x-min）/（max-min）</p><h3 id="8-6-筛选有效的输入变量"><a href="#8-6-筛选有效的输入变量" class="headerlink" title="8.6 筛选有效的输入变量"></a>8.6 筛选有效的输入变量</h3><h4 id="8-6-1-为什么要筛选有效的输入变量？"><a href="#8-6-1-为什么要筛选有效的输入变量？" class="headerlink" title="8.6.1 为什么要筛选有效的输入变量？"></a>8.6.1 为什么要筛选有效的输入变量？</h4><p>筛选有效的输入变量既可以提高模型稳定性，也是提高模型预测能力的需要，过多的输入变量会产生共线性问题。</p><p>在筛选变量之前，可以直接删除明显的无明显的变量，比如：常数变量或者只有一个值的变量、缺失值比例很高的变量（例如缺失值高达95%），取值太泛的类别型变量。</p><h4 id="8-6-2-筛选的思路"><a href="#8-6-2-筛选的思路" class="headerlink" title="8.6.2 筛选的思路"></a>8.6.2 筛选的思路</h4><p><strong>A:结合业务经验进行先行筛选</strong></p><p><strong>B: 用线性相关性指标进行初步筛选</strong><br>最简单、最常用的方法就是通过自变量之间的线性相关性指标进行初步筛选。其中，皮尔逊相关系数（Pearson Correlation）最为常用，其主要用于比例型变量与比例型变量、区间型变量与区间型变量，以及二元变量与区间型变量之间的线性关系描述。其公式如下：<br><img src="https://img-blog.csdnimg.cn/20200725180918670.PNG#pic_center" alt="r=（x与y的协方差）/（x的标准差与y的标准差的乘积）"></p><ul><li>|r|&lt;0.3 表示低度线性相关</li><li>0.3&lt;=|r|&lt;0.5 表示中低度线性相关</li><li>0.5&lt;=|r|&lt;0.8 表示中度线性相关</li><li>0.8&lt;=|r|&lt;1.0 表示高度线性相关</li></ul><p>如果自变量属于中度以上线性相关（&gt;0.6以上），多个变量只需要保留一个就可以了。</p><p>来自样本的统计结果，需要通过显著性检验才能知道其是否适用于针对总体数据的相关性。</p><p>显著性检验：针对我们队总体所做的假设做检验，其原理就是“小概率事件实际不可能性原理”来接受或者否定。</p><p>尽管有时候上述公式计算出来的相关系数r等于0，但是也只能说明线性关系不存在，不能排除变量之间存在其他形式的相关关系，比如曲线关系。</p><p>某个自变量和因变量的线性相关性很小，但是可以通过跟其他自变量结合在一起让其成为预测力很强的自变量。</p><h4 id="8-6-3-R平方"><a href="#8-6-3-R平方" class="headerlink" title="8.6.3 R平方"></a>8.6.3 R平方</h4><p>R平方（R-Square）该方法将借鉴多元线性回归的分析算法来判断和选择对目标变量有重要预测意义及价值的自变量。通俗的说，就是R平方表示模型输入的各自变量在多大程度上可以解释目标变量的可变性，取值范围在【0,1】之间，R<sup>2</sup>越大，说明模型的拟合越好。<br><img src="https://img-blog.csdnimg.cn/20200725182156866.PNG#pic_center" alt="在这里插入图片描述"></p><ul><li>SSE称为残差平方和，由其他因素引起的</li><li>SSR称为回归平方和，由自变量引起的</li><li>SST称为总平方和，反映的是因变量Y的波动程度</li></ul><p>在回归方程中，回归平方和越大，回归效果越好，<br>统计量<img src="https://img-blog.csdnimg.cn/20200725182712930.PNG#pic_center" alt="F=（SSR/p） / (SSE/N-p-1)"></p><h4 id="8-6-4-卡方检验"><a href="#8-6-4-卡方检验" class="headerlink" title="8.6.4 卡方检验"></a>8.6.4 卡方检验</h4><p>卡方检验在统计学里属于非参数检验，主要用来度量类别性变量，包括次序型变量等定性变量之间的关联性以及比较两个或者两个以上的样本率，基本思想就是比较理论频数和实际频数的吻合程度或拟合度，主要用于二元变量。</p><h4 id="8-6-5-IV和WOE"><a href="#8-6-5-IV和WOE" class="headerlink" title="8.6.5 IV和WOE"></a>8.6.5 IV和WOE</h4><p>当目标变量是二元变量，自变量是区间型变量时，可以通过IV和WOE进行自变量的判断和取舍，在应用IV和WOE的时候，需要把区间型变量转换成类别性（次序型）自变量，同时要强调目标变量必须是二元变量，这两点是使用IV和WOE的前提条件。</p><p>一个变量的总的预测能力是通过IV来表现的，它是该变量的各个属性的WOE的加权总和，IV代表了该变量区分目标变量中的事件与非事件的能力。</p><p>与IV有相似左右的一个变量是Gini分数，其计算步骤如下：</p><ol><li>根据该字段的每个属性包含的预测事件和非事件的比率，按照各属性的比率的降序进行排列</li><li>针对排序后的每个组，分别计算该组内的事件数量和非事件数量</li><li>计算Gini分数</li></ol><p>应用IV、WOE、Gini Score 指标时，可以在数据挖掘实践中实现以下目标：</p><ul><li>通过WOE的变化来调整出最佳的分箱阈值</li><li>通过IV或者Gini分数，筛选出有较高预测价值的自变量，投入模型的训练中</li></ul><h4 id="8-6-6-部分建模算法自身的筛选功能"><a href="#8-6-6-部分建模算法自身的筛选功能" class="headerlink" title="8.6.6 部分建模算法自身的筛选功能"></a>8.6.6 部分建模算法自身的筛选功能</h4><p>可供“借力”的算法或者模型：包括决策树模型、回归模型等。</p><h4 id="8-6-7-降维的方法"><a href="#8-6-7-降维的方法" class="headerlink" title="8.6.7 降维的方法"></a>8.6.7 降维的方法</h4><p>主成分分析和变量聚类</p><h3 id="8-7-共线性问题"><a href="#8-7-共线性问题" class="headerlink" title="8.7 共线性问题"></a>8.7 共线性问题</h3><p>共线性问题是困扰模型预测能力的一个常见问题，所谓共线性，又叫多重共线性，是指当自变量之间存在较强的，甚至完全的线性相关关系，当自变量之间高度相关是，模型参数会变得不稳定，模型的预测能力会降低，理论上来讲，输入变量之间除了共线性关系，也有可能存在非线性关系，这些非线性关系很有可能如共线性关系一样影响模型的预测能力。</p><h4 id="8-7-1-如何发现共线性？"><a href="#8-7-1-如何发现共线性？" class="headerlink" title="8.7.1 如何发现共线性？"></a>8.7.1 如何发现共线性？</h4><p>A.相关系数的方法，最常见的就是皮尔逊系数<br>B. 通过模型结论的观察，比如回归模型中，如果回归系数的标准差过大，就有可能意味着变量之间存在着共线性问题<br>C. 主成分分析，在主成分分析方法中，主成分里的系数，也就是主成分在和大小能从一定程度上反映出各个变量的相关性，比如，第一成分中，某几个原始变量的主成分载荷系数较大，且数值相近，就有可能存在共线性关系<br>D.根据业务经验判断，原本应该没有预测作用的变量突然之间变得有很强的统计性，有可能隐藏着共线性问题<br>E. 对变量进行聚类，通过对区域型变量进行聚类，同一类中的变量之间具有较强的相似性，可能隐藏共线性关系</p><h4 id="8-7-2-如何处理共线性？"><a href="#8-7-2-如何处理共线性？" class="headerlink" title="8.7.2 如何处理共线性？"></a>8.7.2 如何处理共线性？</h4><p>模型拟合度高，样本量大的时候，轻微的共线性可以适当的采用视而不见的方法，但是，当样本量较少，很轻微的共线性问题都可能导致参数的不稳定。</p><p>如果发生严重的共线性问题，可以采取如下措施：<br>A.对相关变量进行取舍，高度共线性的变量，选择爆率对业务方最有价值最有意义的变量<br>B.对相关变量进行组合，生成一个新的综合型变量<br>C.当我们利用相关变量通过线性的方式衍生出新的变量时，记得两者之间的共线性问题，并且及时删除相关的原始变量<br>D.尝试对相关变量进行一些形式的转换，恰当的转换，可以在一定的程度上减少甚至去除共线性关系</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020072518565969.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第4-7章）</title>
    <link href="http://yoursite.com/2020/07/24/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC4-7%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/24/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC4-7%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-24T09:48:10.000Z</published>
    <updated>2020-07-24T09:48:18.559Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200724174615417.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="4-数据化运营是跨专业、跨团队的协调与合作"><a href="#4-数据化运营是跨专业、跨团队的协调与合作" class="headerlink" title="4 数据化运营是跨专业、跨团队的协调与合作"></a>4 数据化运营是跨专业、跨团队的协调与合作</h2><p>在线运营团队需具有的与数据相关的基本技能要求：</p><ul><li>提出业务分析需求并且能胜任基本的数据分析</li><li>提供业务经验和参考建议</li><li>策划和执行精细化运营方案</li><li>跟踪运营效果、反馈和总结</li></ul><h2 id="6-数据挖掘项目完整应用案例演示"><a href="#6-数据挖掘项目完整应用案例演示" class="headerlink" title="6 数据挖掘项目完整应用案例演示"></a>6 数据挖掘项目完整应用案例演示</h2><p><strong>项目流程：</strong></p><ol><li>项目背景和业务分析需求的提出</li><li>数据分析师参与需求讨论</li><li>制定需求分析框架和分析计划</li><li>抽取样本数据、熟悉数据、数据清洗和摸底</li><li>按计划初步搭建挖掘模型</li><li>与业务方讨论模型的初步结论，提出新的思路和模型优化方案</li><li>按优化方案重新抽取样本并建模，提炼结论并验证模型</li><li>完成分析报告和落地应用建议</li><li>制定具体的落地应用方案和评估方案<ol start="10"><li>业务方实施落地应用方案并跟踪、评估结果</li><li>落地应用方案在实际效果评估后，不断修正完善</li><li>不同运营方案的评估、总结和反馈</li><li>项目应用后的总结和反思</li></ol></li></ol><h2 id="7-数据挖掘建模的优化和限度"><a href="#7-数据挖掘建模的优化和限度" class="headerlink" title="7 数据挖掘建模的优化和限度"></a>7 数据挖掘建模的优化和限度</h2><h3 id="7-1-数据挖掘模型的优化要遵循有效、适度的原则"><a href="#7-1-数据挖掘模型的优化要遵循有效、适度的原则" class="headerlink" title="7.1 数据挖掘模型的优化要遵循有效、适度的原则"></a>7.1 数据挖掘模型的优化要遵循有效、适度的原则</h3><p>在模型优化和资源投入之间，在投入数据分析资源和满足特定业务需求之间，又有一个微妙的平衡点——性价比，这个平衡点决定了模型的优化和完善是有限度的。</p><p>任何一个数据挖掘模型都是针对一个特定业务需求的，围绕着一个具体的业务需求，数据挖掘模型总是可以有办法不断完善、不断提升，即提升精确度、提升转化率等。</p><ul><li>有效原则：模型的结论或者应用效果是否满足当初业务需求，还需要考虑时效性</li><li>适度原则：投入产出性价比</li></ul><h3 id="7-2-如何有效地优化模型"><a href="#7-2-如何有效地优化模型" class="headerlink" title="7.2 如何有效地优化模型"></a>7.2 如何有效地优化模型</h3><h4 id="7-2-1-从业务思路上优化"><a href="#7-2-1-从业务思路上优化" class="headerlink" title="7.2.1 从业务思路上优化"></a>7.2.1 从业务思路上优化</h4><p>从业务思路上优化模型是最重要的模型优化措施。可从以下几个层面进行考虑：</p><ul><li>有没有更加明显且直观的规则、指标可以代替复杂的建模</li><li>有没有一些明显的业务逻辑（业务假设）在前期的建模阶段被疏忽</li><li>通过前期的初步建模和数据熟悉，是否有新的发现，甚至能颠覆之前的业务推测或者业务直觉</li><li>目标变量的定义是否稳定（在不同的时间点抽样验证）</li></ul><h4 id="7-2-2-从建模的技术思路上优化"><a href="#7-2-2-从建模的技术思路上优化" class="headerlink" title="7.2.2 从建模的技术思路上优化"></a>7.2.2 从建模的技术思路上优化</h4><p>建模的总体技术思路包括不同的建模算法、不同的抽样方法、有没有必要通过细分群体来分别建模等。</p><ul><li><strong>建模算法</strong>：预测响应（或分类）模型思路里的不同算法——逻辑回归算法、决策树算法、神经网络算法、支持向量机算法等。基本统计分析方法。</li><li><strong>抽样方法</strong>：是否抽样、如何抽样、过抽样。</li><li><strong>细分群体</strong>：细分建模有时候会通过故意漏掉一小部分目标用户，从而可以针对剩下的绝大多数目标用户进行更有效的预测。</li></ul><h4 id="7-2-3-从建模的技术技巧上优化"><a href="#7-2-3-从建模的技术技巧上优化" class="headerlink" title="7.2.3 从建模的技术技巧上优化"></a>7.2.3 从建模的技术技巧上优化</h4><p>在建模过程中，业务思路上的优化比建模技术思路上的优化更重要，而建模技术思路上的优化又比单纯的建模技巧的优化更重要。</p><h3 id="7-3-模型效果评价的主要指标体系（二元目标变量）"><a href="#7-3-模型效果评价的主要指标体系（二元目标变量）" class="headerlink" title="7.3 模型效果评价的主要指标体系（二元目标变量）"></a>7.3 模型效果评价的主要指标体系（二元目标变量）</h3><h4 id="7-3-1-评价模型准确度和精度的系列指标"><a href="#7-3-1-评价模型准确度和精度的系列指标" class="headerlink" title="7.3.1 评价模型准确度和精度的系列指标"></a>7.3.1 评价模型准确度和精度的系列指标</h4><ul><li>True Positive(TP)：指模型预测为正（1）的，并且实际上也的确是正（1）的观察对象数量</li><li>True Negative(TN)：指模型预测为负（0）的，并且实际上也的确是正（0）的观察对象数量</li><li>False Positive(FP)：指模型预测为正（1）的，并且实际上是负（0）的观察对象数量</li><li>False Negative(FN)：指模型预测为负（0）的，并且实际上是正（1）的观察对象数量</li></ul><p><img src="https://img-blog.csdnimg.cn/20200724165722819.PNG#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200724170007879.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200724170017577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200724170054806.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="7-3-2-ROC曲线"><a href="#7-3-2-ROC曲线" class="headerlink" title="7.3.2 ROC曲线"></a>7.3.2 ROC曲线</h4><p>ROC曲线是一种有效比较两个二元分类模型的可视工具，它显示了给定模型的灵敏性真正率和假正率之间的比较评定。真正率的增加是以假正率的增加为代价的，ROC曲线下面的面积就是比较模型准确度的指标和依据，面积大的模型对应的模型准确度要高，也就是要择优应用的模型，面积越接近0.5，对应的模型的准确率就越低。</p><p>要绘制ROC曲线，首先要对模型所做的判断即对于的数据做排序，把经过模型判断后的观察值预测为正（1）的概率从高到低进行排序，ROC曲线的纵轴表示真正率，ROC曲线的横轴表示假正率。具体绘制时，从左下角开始，此时真正率和假正率都为0，按照刚才概率从高到低的顺序，依次针对每个观察值实际的“正”或“负”绘制，如果它是真正的“正”（预测正确），则ROC曲线向上移动并绘制一个点；如果它是真正的“负”，则ROC曲线向右移动一个点。<br><img src="https://img-blog.csdnimg.cn/20200724170831729.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="7-3-3-KS值"><a href="#7-3-3-KS值" class="headerlink" title="7.3.3 KS值"></a>7.3.3 KS值</h4><p>如果KS值越大，表示模型能够将正（1）、负（0）客户区分开来的程度越大，模型预测的准确率也越高。通常来讲，KS大于0.2就表示模型有较好的预测准确性了。</p><p>KS曲线绘制步骤如下：</p><ol><li>将测试集里所有观察对象经过模型打分预测为正（1）的对象按概率从高到低排序。</li><li>分别计算每个概率分数所对应的实际上为正（1）、负（0）的观察对象累计值，以及它们分别占全体总数，实际正（1）、负（0）的总数量的百分比。</li><li>将这两种累计的百分比与评分分数绘制在同一张图上，得到KS曲线，如下图：<br><img src="https://img-blog.csdnimg.cn/20200724171116142.PNG#pic_center" alt="在这里插入图片描述"></li><li>各分数对应下的累计的、真正的正（1）观察对象的百分比与累计的、真正的负（0）观察对象的百分比之差的最大值就是KS值。</li></ol><h4 id="7-3-4-lift值"><a href="#7-3-4-lift值" class="headerlink" title="7.3.4 lift值"></a>7.3.4 lift值</h4><p>在二元预测模型在具体的业务场景中，都有一个random rate，所谓random rate，是指在不使用模型的时候，基于已有业务效果的正比例，也就是不使用模型之前“正”的实际观察对象在总体观察对象中的占比。如果经过建模，有一个不错的模型，那么这个模型就可以比较有效地锁定群体了，所谓有效，是指在预测概率的数值从高到低的排序中，排名靠前的观察值中，真正的“正”观察值在累计的总观察值里的占比应该是高于random rate的。<br><img src="https://img-blog.csdnimg.cn/20200724173253994.PNG#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200724173344855.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>从上述lift公式中，引出了在模型评估中常用的两个评价指标，分别是响应率（%response）和捕获率（%captured response）。首先要把经过模型预测后为正（1）的观察对象按照预测概率从高到低排序，然后对这些观察对象按照均等的数量划分为10个区间，每个区间里观察对象的数量一致，这样各个区间可以被命名为排序最高的前10%的对象排序最高的前20%对象等。</p><ul><li>响应率是指按上述概率分数排序后的某区间段或累计区间观察对象中，实际属于正（1）的观察对象占该区间或该累计区间总体观察对象数量的百分比。很明显，响应率越高说明该区间预测准确率越高。</li><li>捕获率是指上述排序区间的观察对象中，实际属于正（1）的观察对象占全体观察对象中属于正（1）的总数的百分比，同样是越高越好。</li></ul><h4 id="7-3-5-模型稳定性的评估"><a href="#7-3-5-模型稳定性的评估" class="headerlink" title="7.3.5 模型稳定性的评估"></a>7.3.5 模型稳定性的评估</h4><p>考察稳定性最好的办法就是抽取另外一个时间段（时间窗口）的数据，最好是最新时间的数据，通过模型对这些新的数据、新对象进行预测（打分），然后与实际情况进行比较，并且跟模型在测试集和验证集里的表现相比较，看模型是否稳定，其效果衰减的幅度是否可以接受。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200724174615417.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第3章）</title>
    <link href="http://yoursite.com/2020/07/23/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC3%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/23/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC3%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-23T09:18:45.000Z</published>
    <updated>2020-07-23T09:19:02.365Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200723171623777.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="3-数据化运营中常见的数据分析项目类型"><a href="#3-数据化运营中常见的数据分析项目类型" class="headerlink" title="3 数据化运营中常见的数据分析项目类型"></a>3 数据化运营中常见的数据分析项目类型</h2><h3 id="3-1-用户特征分析及用户分层模型"><a href="#3-1-用户特征分析及用户分层模型" class="headerlink" title="3.1 用户特征分析及用户分层模型"></a>3.1 用户特征分析及用户分层模型</h3><p>不同于过去的粗放式运营，在精细化运营的要求下，可以通过数据分析挖掘不同用户细分群体的特点，针对不同群体提供精细化、个性化的运营或服务，提高用户满意度，最终提高产品变现能力。</p><p>这类以挖掘用户特征为目标的项目，可以统称为用户特征分析。项目的核心是用户分层，一般需要对用户分层，在分层时或分层后，分析细分群体的特征。</p><p>分层模型常用的技术既包括统计分析技术（比如相关性分析、主成分分析等），又可以含有预测（响应、分类）模型的技术（比如通过搭建预测模型发现最重要的输入变量及其排序情况，然后根据这些变量对分层进行大致的划分，并通过实际数据进行验证），这要视具体的分析目的、业务背景和数据结构而定，同时要强调的是，一个好的分层模型的搭建一定是需要业务方的参与和贡献的，而且其中的业务逻辑和业务思考远远胜过分析技术本身。</p><p>用户特征分析根据不同的侧重点，有几个典型的业务场景：</p><ul><li><strong>寻找目标用户</strong>，不同行为习惯的用户，定位高质量用户及其特征</li><li><strong>寻找运营的抓手</strong>，帮助寻找运营方式，以提高或改善用户满意度</li><li><strong>用户群体细分</strong></li><li><strong>新产品开发依据</strong>，即判断新产品要针对谁、满足什么需求，实现PMF（产品-市场匹配）</li></ul><p>用户特征分析项目中有以下几种常见分析思路和方法：</p><ul><li><strong>RFM模型</strong>（Recency、Frequency、Monetary），一种根据三个核心变量，对用户进行分组的方法</li><li><strong>聚类算法</strong>，用户分层是聚类算法的重要应用，可以根据核心变量进行聚类，根据聚类结果对用户分层，再针对细分群体分析其余特征</li><li><strong>监督模型的核心变量</strong>，一些算法模型可以帮助定位核心变量，如随机森林的特征重要性指标、决策树的划分规则等，根据模型定位到的核心变量，对核心变量进行大致划分得到分层结果</li></ul><h3 id="3-2-目标客户的预测（响应、分类）模型"><a href="#3-2-目标客户的预测（响应、分类）模型" class="headerlink" title="3.2 目标客户的预测（响应、分类）模型"></a>3.2 目标客户的预测（响应、分类）模型</h3><p>预测（响应、分类）模型包括流失预警模型、付费预测模型、续费预测模型、运营活动响应模型等。它是数据挖掘中最常用的一种模型类型，几乎成了数据挖掘技术应用的一个主要代名词。响应模型的核心就是响应概率，响应概率又是数据化运营六要素里的核心要素—概率（Probability）。</p><p>预测（响应、分类）模型基于真实业务场景产生的数据而进行的预测（响应、分类）模型搭建，其中涉及的主要数据挖掘技术包括逻辑回归、决策树、神经网络、支持向量机等。有没有一个算法总是优先于其他算法呢？答案是否定的，没有哪个算法在任何场景下都总能最优胜任响应模型的搭建，所以通常在建模过程中，会尝试多种不同的算法，然后根据随后的验证效果以及具体业务项目的资源和价值进行权衡，并做出最终的选择。</p><p>根据建模数据中实际响应比例的大小进行分类，响应模型还可以细分为普通响应模型和稀有事件响应模型，一般来讲，如果响应比例低于1%，则应当作为稀有事件响应模型来进行处理，其中的核心就是抽样，通过抽样技术人为放大分析数据样本里响应事件的比例，增加响应事件的浓度，从而在建模过程中更好地捕捉、拟合其中自变量与因变量的关系。</p><p>预测（响应、分类）模型除了可以有效预测个体响应的概率之外，模型本身显示出的重要输入变量与目标变量的关系也有重要的业务价值，比如说可以转化成伴随（甚至导致）发生响应（生成事件）的关联因素、重要因素的提炼。</p><h3 id="3-3-运营群体的活跃度定义"><a href="#3-3-运营群体的活跃度定义" class="headerlink" title="3.3 运营群体的活跃度定义"></a>3.3 运营群体的活跃度定义</h3><p>活跃度的定义没有统一的描述，一般都是根据特定的业务场景和运营需求来量身订做的。但是，其中最重要、最常见的两个基本点如下：</p><ul><li>活跃度的组成指标应该是该业务场景中最核心的行为因素。</li><li>衡量活跃度的定义合适与否的重要判断依据是其能否有效回答业务需求的终极目标。</li></ul><p>以活跃为例，举两个不同场景的例子——</p><blockquote><p>为了产品的日常监控，需要定义用户活跃的口径，即如何判定用户是否活跃，用于统计DAU等指标。</p></blockquote><p>除了核心行为的条件，该业务场景要求指标简单、容易理解，因此用户活跃应该只用到尽量少的指标，通常是1个，如是否登陆、观看视频数&gt;1等。</p><blockquote><p>为了提高产品付费率，需要定义用户的活跃度，使得满足一定活跃度分值的用户比较容易转化为付费用户。</p></blockquote><p>该场景下，要求将多个核心行为转化为分值，涉及的主要技术有两种：</p><ul><li><strong>数据标准化/归一化</strong>，通过数据标准化/归一化，将不同的指标缩放至相同区间，不同指标才能平等比较，加权转化为一个综合分数</li><li><strong>主成分分析</strong>，是一种降维算法，在这里将多个核心行为转化为一个或几个主成分，最终转化为一个综合分数</li></ul><h3 id="3-4-用户路径分析"><a href="#3-4-用户路径分析" class="headerlink" title="3.4 用户路径分析"></a>3.4 用户路径分析</h3><p>用户路径分析主要是分析用户在网页上流转的规律和特点，发现频繁访问的路径模式，这些路径的发现可以有很多业务用途，包括提炼特定用户群体的主流路径、网页设计的优化和改版、用户可能浏览的下一个页面的预测、特定群体的浏览特征等。另外，路径分析所用的数据主要是Web服务器中的日志数据。</p><p>路径分析常用的分析技术有两类，一类是有算法支持的，另一类是严格按照步骤顺序遍历主要路径的。</p><p>在运营团队看来，路径分析的主要用途：</p><ul><li>监控运营活动（或者目标客户）的典型路径，看是否与当初的运营设想一致。如果不一致，就继续深入分析原因，调整运营思路或页面布局，最终目的就是提升用户点击页面的效率；</li><li>提炼新的有价值的频繁路径模式，并且在以后的运营中对这些模式加以应用，提升运营的效率和特定效果。</li></ul><h3 id="3-5-交叉销售模型"><a href="#3-5-交叉销售模型" class="headerlink" title="3.5 交叉销售模型"></a>3.5 交叉销售模型</h3><p>交叉销售，其背后的理论依据是一旦客户购买了商品（或者成为付费用户），企业就会想方设法保留和延长这些客户在企业的生命周期和客户的利润贡献，一般有两种思路：</p><ul><li><strong>延缓用户流失</strong>，这种思路通常使用流失预警模型，对可能流失的用户指定关怀策略等<ul><li><strong>让用户消费更多商品或服务</strong>，找出用户感兴趣的商品或服务，挖掘用户的消费或使用需求，这种思路主要就涉及到<strong>交叉销售模型</strong></li></ul></li></ul><p>交叉销售模型通过对用户历史消费数据的分析挖掘，找出有明显关联性质的商品组合，然后用不同的建模方法，去构建消费者购买这些关联商品组合的可能性模型，再用其中优秀的模型去预测新客户中购买特定商品组合的可能性。如捆绑销售、精准营销推广等。“啤酒与尿布”的案例就是比较经典的交叉销售模型应用。</p><p>主要思路：</p><ul><li>一是按照关联技术（Association Analysis），也即通常所说的购物篮分析，发现那些有较大可能被一起采购的商品，将它们进行有针对性的促销和捆绑，这就是交叉销售；</li><li>二是借鉴响应模型的思路，为某几种重要商品分别建立预测模型，对潜在消费者通过这些特定预测模型进行过滤，然后针对最有可能的前5%的消费者进行精确的营销推广；</li><li>三是仍然借鉴预测响应模型的思路，让重要商品两两组合，找出那些最有可能消费的潜在客户；</li><li>四是通过决策树清晰的树状规则，发现基于具体数据资源的具体规则（有的多，有的少），很多营销方案的制订和执行实际上都是通过这种方式找到灵感和思路的。</li></ul><p>相应的建模技术主要包括关联分析（Association Analysis）、序列分析（Sequence Analysis），即在关联分析的基础上，增加了先后顺序的考虑，以及预测（响应、分类）模型技术，诸如逻辑回归、决策树等。</p><h3 id="3-6-信息质量模型"><a href="#3-6-信息质量模型" class="headerlink" title="3.6 信息质量模型"></a>3.6 信息质量模型</h3><p>无论是B2C（如当当网、凡客网），还是C2C（如淘宝网），或者是B2B（如阿里巴巴），只要是以商业为目的，以交易为目的的，都需要采用有效手段去提升海量商业信息（商品目录、商品Offer、商品展示等）的质量和结构，从而促进交易。</p><p>构建信息质量模型所涉及的主要还是常规的数据挖掘技术，比如回归算法、决策树等。但是对于信息质量模型的需求，由于其目标变量具有一定的特殊性，因此它与目标客户预测（响应）模型在思路和方法上会有一些不同之处，具体内容如下。</p><p>任何模型的搭建都是用于响应特定的业务场景和业务需求的，有时候搭建信息质量模型的目标变量是该信息（如商品Offer）是否在特定的时间段产生了交易，此时，目标变量就是二元的，即是与否；更多时候，信息质量模型的目标变量与是否交易没有直接关系（这其实很容易理解，因为影响成交的因素太多），甚至有些时候信息质量本身是主观的判断，在这种情况下，没有明确的来自实际数据的目标变量。那如何定义目标变量呢？<strong>专家打分，模型拟合</strong>是一个比较合适的变通策略。</p><h3 id="3-7-服务保障模型"><a href="#3-7-服务保障模型" class="headerlink" title="3.7 服务保障模型"></a>3.7 服务保障模型</h3><p>服务保障模型主要是站在为客户服务的角度来说的，出发点是为了让客户（平台的卖家）更好地做生意，达成更多的交易，我们（平台）应该为他们提供哪些有价值的服务去支持、保障卖家生意的发展，这里的服务方向就可以有很多的空间去想象了。无论是产品武装，还是宣传帮助，都属于服务保障的范畴，都是服务保障模型可以并且应该出力的方向。</p><h3 id="3-8-信用风险模型"><a href="#3-8-信用风险模型" class="headerlink" title="3.8 信用风险模型"></a>3.8 信用风险模型</h3><p>信用风险模型主要是应对在产品中可能遇到的风险，并作相应的预警。如欺诈预警、高危用户判断、违禁信息过滤等。</p><p>信用风险模型本质上也是一个预测模型，与常规数据挖掘项目的算法和思路都是通用的，但由于其特殊的场景，通常有如下的特点：</p><ul><li>分析结论或者欺诈识别模型的时效更短，需要优化（更新）的频率更高。网络上骗子的行骗手法经常会变化，导致分析预警行骗欺诈的模型也要因此持续更新。</li><li>行骗手段的变化很大程度上是随机性的，所以这对欺诈预警模型的及时性和准确性提出了严重的挑战。</li><li>对根据预测模型提炼出的核心因子进行简单的规则梳理和罗列，这样就可在风控管理的初期阶段有效锁定潜在的目标群体。</li></ul><h3 id="3-9-商品推荐模型"><a href="#3-9-商品推荐模型" class="headerlink" title="3.9 商品推荐模型"></a>3.9 商品推荐模型</h3><p>推荐系统在互联网产品有很多应用，如淘宝的商品推荐、知乎的问题推荐、微视的短视频推荐等等。</p><p>推荐系统的常用算法有：</p><ul><li><strong>基于关联分析进行推荐</strong>，如<strong>Apriori算法</strong>，从数据中找到商品（或其他推荐的对象）的关联规则，基于该关联规则进行推荐</li><li><strong>协同过滤算法</strong>，有<strong>基于用户</strong>（User-based）的协同过滤和<strong>基于项目</strong>（Item-based）的协同过滤，核心思想是相似的用户会喜欢相似的东西</li></ul><h4 id="3-9-1-Apriori算法"><a href="#3-9-1-Apriori算法" class="headerlink" title="3.9.1 Apriori算法"></a>3.9.1 Apriori算法</h4><p>Apriori算法主要包含两个步骤：首先找出数据集中所有的频繁项集，这些项集出现的频繁性要大于或等于最小支持度；然后根据频繁项集产生强关联规则，这些规则必须满足最小支持度和最小置信度。</p><p>事实上，在关联规则中用于度量规则质量的两个主要指标即为支持度和置信度。<br><img src="https://img-blog.csdnimg.cn/20200723170242444.PNG#pic_center" alt="在这里插入图片描述"></p><h4 id="3-9-2-协同过滤算法"><a href="#3-9-2-协同过滤算法" class="headerlink" title="3.9.2 协同过滤算法"></a>3.9.2 协同过滤算法</h4><p>协同过滤是迄今为止最成功的推荐系统技术，被应用在很多成功的推荐系统中。协同过滤算法主要分为基于启发式和基于模型式两种。其中，基于启发式的协同过滤算法，又可以分为基于用户的协同过滤算法和基于项目的协同过滤算法。启发式协同过滤算法主要包含3个步骤：1）收集用户偏好信息；2）寻找相似的商品或者用户；3）产生推荐。</p><p>协同过滤的输入数据集主要是用户评论数据集或者行为数据集。这些数据集主要又分为显性数据和隐性数据两种类型。其中，显性数据主要是用户打分数据，譬如用户对商品的打分；而隐性数据主要是指用户点击行为、购买行为和搜索行为等，这些数据隐性地揭示了用户对商品的喜好。</p><h3 id="3-10-数据产品"><a href="#3-10-数据产品" class="headerlink" title="3.10 数据产品"></a>3.10 数据产品</h3><p>数据产品是指数据分析师为了响应数据化运营的号召，提高企业全员数据化运营的效率，以及提升企业全员使用数据、分析数据的能力而设计和开发的一系列有关数据分析应用的工具。数据产品如：银行账户交易明细，购物收藏等。</p><h3 id="3-11-决策支持"><a href="#3-11-决策支持" class="headerlink" title="3.11 决策支持"></a>3.11 决策支持</h3><p>数据分析挖掘所承担的决策支持主要是指通过数据分析结论、数据模型对管理层的管理、决策提供响应和支持，从而帮助决策层提高决策水平和质量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200723171623777.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>《数据挖掘与数据化运营实战》（第1-2章）</title>
    <link href="http://yoursite.com/2020/07/23/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC1-2%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/23/%E3%80%8A%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC1-2%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-23T06:45:34.000Z</published>
    <updated>2020-07-23T07:05:33.236Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200723150511532.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="1-数据化运营概述"><a href="#1-数据化运营概述" class="headerlink" title="1 数据化运营概述"></a>1 数据化运营概述</h2><h3 id="1-1-从4P到4C再到3P3C"><a href="#1-1-从4P到4C再到3P3C" class="headerlink" title="1.1 从4P到4C再到3P3C"></a>1.1 从4P到4C再到3P3C</h3><p>4P指的是Product（产品）、Price（价格）、Place（渠道）和Promotion（促销）。<br><img src="https://img-blog.csdnimg.cn/20200723124615988.PNG#pic_center" alt="在这里插入图片描述"></p><ul><li>Product：表示注重产品功能，强调独特卖点。</li><li>Price：指根据不同的市场定位，制定不同的价格策略。</li><li>Place：指要注重分销商的培养和销售网络的建设。</li><li>Promotion：指企业可以通过改变销售行为来刺激消费者，以短期的行为（如让利、买一送一、调动营销现场气氛等）促成消费的增长，吸引其他品牌的消费者前来消费，或者促使老主顾提前来消费，从而达到销售增长的目的。</li></ul><p>4P理论的核心是Product（产品）。因此，以4P理论为核心营销思想的企业营销战略又可以简称为“以产品为中心”的营销战略。</p><p>在当今，传统的4P营销组合已经无法适应时代发展的需求，营销界开始研究新的营销理论和营销要素。其中，最具代表性的理论就是4C理论，这里的4C包括Consumer（消费者）、Cost（成本）、Convenience（方便性）和Communication（沟通交流）。<br><img src="https://img-blog.csdnimg.cn/20200723125246548.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>消费者的需求与愿望（Customer’s Needs and Wants）。</li><li>消费者得到满足的成本（Cost and Value toSatisfy Consumer’s Needs and Wants）。<ul><li>用户购买的方便性（Convenience to Buy）。</li><li>与用户的沟通交流（Communication with Consumer）。</li></ul></li></ul><p>4C理论的核心是Consumer消费者。因此，以4C理论为核心营销思想的企业营销战略又可以简称为“以消费者为中心”的营销战略。</p><p>4C理论虽然成功找到了从“以产品为中心”转化为“以消费者为中心”的思路和要素，但是随着社会的进步，科技的发展，大数据时代的来临，4C理论再次落后于时代发展的需要。于是在基本思路上融合了4P理论和4C理论的nPnC形式的理论出现了。</p><p>虽然学术界对于到底是几个P和几个C仍存在着争议，没有定论，这里以3P3C为例概述互联网行业运营的典型理论探索。<br><img src="https://img-blog.csdnimg.cn/20200723125845698.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>Probability（概率）：营销、运营活动以概率为核心，追求精细化和精准率。</li><li>Product（产品）：注重产品功能，强调产品卖点。</li><li>Prospects（消费者，目标用户）。</li><li>Creative（创意，包括文案、活动等）。</li><li>Channel（渠道）。</li><li>Cost/Price（成本/价格）。</li></ul><p>而在这其中，以数据分析挖掘所支撑的目标响应概率（Probability）是核心，在此基础上将会围绕产品功能优化、目标用户细分、活动（文案）创意、渠道优化、成本的调整等重要环节和要素，共同促使数据化运营持续完善，直至成功。</p><h3 id="1-2-数据化运营的主要内容"><a href="#1-2-数据化运营的主要内容" class="headerlink" title="1.2 数据化运营的主要内容"></a>1.2 数据化运营的主要内容</h3><p>数据化运营是“以企业级海量数据的存储和分析挖掘应用为核心支持的，企业全员参与的，以精准、细分和精细化为特点的企业运营制度和战略”。</p><p>针对互联网运营部门的数据化运营，具体包括“网站流量监控分析、目标用户行为研究、网站日常更新内容编辑、网络营销策划推广”等，并且，这些内容是在以企业级海量数据的存储、分析、挖掘和应用为核心技术支持的基础上，通过可量化、可细分、可预测等一系列精细化的方式来进行的。</p><p>数据化运营，首先是要有企业全员参与意识，要达成这种全员的数据参与意识比单纯地执行数据挖掘技术显然是要困难得多，也重要得多的。其次是一种常态化的制度和流程，包括企业各个岗位和工种的数据收集和数据分析应用的框架和制度等。更是来自企业决策者、高层管理者的直接倡导和实质性的持续推动。</p><h3 id="1-3-数据化运营的原因及必要条件"><a href="#1-3-数据化运营的原因及必要条件" class="headerlink" title="1.3 数据化运营的原因及必要条件"></a>1.3 数据化运营的原因及必要条件</h3><p><strong>原因：</strong></p><ul><li>首先是现代企业竞争白热化、商业环境变成以消费者为主的“买方市场”等一系列竞争因素所呼唤的管理革命和技术革命。</li><li>其次，数据化运营是飞速发展的数据挖掘技术、数据存储技术等诸多先进数据技术直接推动的结果。</li><li>更是互联网企业得天独厚的“神器”。互联网行业与生俱来的特点就是大数据，而信息时代最大的财富也正是海量的大数据。</li></ul><p><strong>必要条件：</strong></p><ul><li>企业级海量数据存储的实现</li><li>精细化运营的需求</li><li>数据分析和数据挖掘技术的有效应用</li><li>企业决策层的倡导与持续支持</li></ul><h2 id="2-数据挖掘概述"><a href="#2-数据挖掘概述" class="headerlink" title="2 数据挖掘概述"></a>2 数据挖掘概述</h2><h3 id="2-1-统计分析与数据挖掘的主要区别"><a href="#2-1-统计分析与数据挖掘的主要区别" class="headerlink" title="2.1 统计分析与数据挖掘的主要区别"></a>2.1 统计分析与数据挖掘的主要区别</h3><p>在企业的商业实战中，数据分析师分析问题、解决问题时，首先考虑的是思路，其次才会对与思路匹配的分析挖掘技术进行筛选，而不是先考虑到底是用统计技术还是用数据挖掘技术来解决这个问题。</p><p>从两者的理论来源来看，它们在很多情况下都是同根同源的。比如，在属于典型的数据挖掘技术的决策树里，CART、CHAID等理论和方法都是基于统计理论所发展和延伸的；并且数据挖掘中的技术有相当比例是用统计学中的多变量分析来支撑的。</p><p>相对于传统的统计分析技术，数据挖掘有如下一些特点：</p><ul><li>数据挖掘特别擅长于处理大数据，尤其是几十万行、几百万行，甚至更多更大的数据。</li><li>数据挖掘在实践应用中一般都会借助数据挖掘工具。不过，基本的统计知识和技能是必需的。</li><li>在信息化时代，数据分析应用的趋势是从大型数据库中抓取数据，并通过专业软件进行分析，所以数据挖掘工具的应用更加符合企业实践和实战的需要。</li><li>从操作者来看，数据挖掘技术更多是企业的数据分析师、业务分析师在使用，而不是统计学家用于检测。</li></ul><h3 id="2-2-数据挖掘的主要成熟技术及应用"><a href="#2-2-数据挖掘的主要成熟技术及应用" class="headerlink" title="2.2 数据挖掘的主要成熟技术及应用"></a>2.2 数据挖掘的主要成熟技术及应用</h3><h4 id="2-2-1-决策树"><a href="#2-2-1-决策树" class="headerlink" title="2.2.1 决策树"></a>2.2.1 决策树</h4><p>决策树（Decision Tree）是一种非常成熟的、普遍采用的数据挖掘技术。在决策树里，所分析的数据样本先是集成为一个树根，然后经过层层分枝，最终形成若干个结点，每个结点代表一个结论。</p><p>决策树算法之所以在数据分析挖掘应用中如此流行，主要原因在于决策树的构造不需要任何领域的知识，很适合探索式的知识发掘，并且可以处理高维度的数据。它所产生的一系列从树根到树枝（或树叶）的规则，可以很容易地被分析师和业务人员理解，而且这些典型的规则甚至不用整理（或稍加整理），就是现成的可以应用的业务优化策略和业务优化路径。另外，决策树技术对数据的分布甚至缺失非常宽容，不容易受到极值的影响。</p><p>目前，最常用的3种决策树算法分别是CHAID、CART和ID3（包括后来的C4.5，乃至C5.0）。</p><ul><li>CHAID( Chi-square Automatic Interaction Detector)算法，中文简称为卡方自动相互关系检测。CHAID依据局部最优原则，利用卡方检验来选择对因变量最有影响的自变量，CHAID应用的前提是因变量为类别型变量（Category）。</li><li>CART( Classification and Regression Tree)算法，中文简称为分类与回归树，CART的分割逻辑与CHAID相同，每一层的划分都是基于对所有自变量的检验和选择上的。但是，CART采用的检验标准不是卡方检验，而是基尼系数（Gini）等不纯度的指标。两者最大的区别在于CHAID采用的是局部最优原则，即结点之间互不相干，一个结点确定了之后，下面的生长过程完全在结点内进行。而CART则着眼于总体优化，即先让树尽可能地生长，然后再回过头来对树进行修剪（Prune），这一点非常类似统计分析中回归算法里的反向选择（Backward Selection）。CART所生产的决策树是二分的，每个结点只能分出两枝，并且在树的生长过程中，同一个自变量可以反复使用多次（分割），这些都是不同于CHAID的特点。另外，如果是自变量存在数据缺失（Missing）的情况，CART的处理方式将会是寻找一个替代数据来代替（填充）缺失值，而CHAID则是把缺失数值作为单独的一类数值。</li><li>ID3（Iterative Dichotomiser）算法，中文简称为迭代的二分器，其最大的特点在于自变量的挑选标准是：基于信息增益的度量选择具有最高信息增益的属性作为结点的分裂（分割）属性，其结果就是对分割后的结点进行分类所需的信息量最小，这也是一种划分纯度的思想。至于之后发展起来的C4.5可以理解为ID3的发展版（后继版），两者的主要区别在于C4.5采用信息增益率（Gain Ratio）代替了ID3中的信息增益度量，如此替换的主要原因是信息增益度量有个缺点，就是倾向于选择具有大量值的属性。这里给个极端的例子，对于Member_Id 的划分，每个Id都是一个最纯的组，但是这样的划分没有任何实际意义。而C4.5 所采用的信息增益率就可以较好地克服这个缺点，它在信息增益的基础上，增加了一个分裂信息（SplitInformation）对其进行规范化约束。</li></ul><p>决策树技术在数据化运营中的主要用途体现在：作为分类、预测问题的典型支持技术，它在用户划分、行为预测、规则梳理等方面具有广泛的应用前景，决策树甚至可以作为其他建模技术前期进行变量筛选的一种方法，即通过决策树的分割来筛选有效地输入自变量。</p><h4 id="2-2-2-神经网络"><a href="#2-2-2-神经网络" class="headerlink" title="2.2.2 神经网络"></a>2.2.2 神经网络</h4><p>神经网络（Neural Network）是通过数学算法来模仿人脑思维的，它是数据挖掘中机器学习的典型代表。神经网络是人脑的抽象计算模型，数据挖掘中的“神经网络”也是由大量并行分布的人工神经元（微处理单元）组成的，它有通过调整连接强度从经验知识中进行学习的能力，并可以将这些知识进行应用。</p><p>简单来讲，“神经网络”就是通过输入多个非线性模型以及不同模型之间的加权互联（加权的过程在隐蔽层完成），最终得到一个输出模型。其中，隐蔽层所包含的就是非线性函数。</p><p>目前最主流的“神经网络”算法是反馈传播（Backpropagation），该算法在多层前向型（Multilayer Feed-Forward）神经网络上进行学习，而多层前向型神经网络又是由一个输入层、一个或多个隐蔽层以及一个输出层组成的，“神经网络”的典型结构如图所示。<br><img src="https://img-blog.csdnimg.cn/20200723134507907.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>由于“神经网络”拥有特有的大规模并行结构和信息的并行处理等特点，因此它具有良好的自适应性、自组织性和高容错性，并且具有较强的学习、记忆和识别功能。</p><p>“神经网络”的主要缺点就是其知识和结果的不可解释性，没有人知道隐蔽层里的非线性函数到底是如何处理自变量的，“神经网络”应用中的产出物在很多时候让人看不清其中的逻辑关系。但是，它的这个缺点并没有影响该技术在数据化运营中的广泛应用，甚至可以这样认为，正是因为其结果具有不可解释性，反而更有可能促使我们发现新的没有认识到的规律和关系。</p><p>在利用“神经网络”技术建模的过程中，有以下5个因素对模型结果有着重大影响：</p><ul><li>层数。</li><li>每层中输入变量的数量。</li><li>联系的种类。</li><li>联系的程度。</li><li>转换函数，又称激活函数或挤压函数。</li></ul><p>“神经网络”技术在数据化运营中的主要用途体现在：作为分类、预测问题的重要技术支持，在用户划分、行为预测、营销响应等诸多方面具有广泛的应用前景。</p><h4 id="2-2-3-回归"><a href="#2-2-3-回归" class="headerlink" title="2.2.3 回归"></a>2.2.3 回归</h4><p>回归（Regression）分析包括线性回归（Linear Regression），这里主要是指多元线性回归和逻辑斯蒂回归（Logistic Regression）。其中，在数据化运营中更多使用的是逻辑斯蒂回归，它又包括响应预测、分类划分等内容。</p><p><strong>多元线性回归</strong><br>多元线性回归主要描述一个因变量如何随着一批自变量的变化而变化，其回归公式（回归方程）就是因变量与自变量关系的数据反映。因变量的变化包括两部分：系统性变化与随机变化，其中，系统性变化是由自变量引起的（自变量可以解释的），随机变化是不能由自变量解释的，通常也称作残值。</p><p>在用来估算多元线性回归方程中自变量系数的方法中，最常用的是最小二乘法，即找出一组对应自变量的相应参数，以使因变量的实际观测值与回归方程的预测值之间的总方差减到最小。</p><p>对多元线性回归方程的参数估计，是基于下列假设的：</p><ul><li>输入变量是确定的变量，不是随机变量，而且输入的变量间无线性相关，即无共线性。</li><li>随机误差的期望值总和为零，即随机误差与自变量不相关。</li><li>随机误差呈现正态分布。</li></ul><p>如果不满足上述假设，就不能用最小二乘法进行回归系数的估算了。</p><p><strong>逻辑斯蒂回归</strong><br>逻辑斯蒂回归（Logistic Regression）相比于线性回归来说，在数据化运营中有更主流更频繁的应用，主要是因为该分析技术可以很好地回答诸如预测、分类等数据化运营常见的分析项目主题。简单来讲，凡是预测“两选一”事件的可能性（比如，“响应”还是“不响应”；“买”还是“不买”；“流失”还是“不流失”），都可以采用逻辑斯蒂回归方程。</p><p>逻辑斯蒂回归预测的因变量是介于0和1之间的概率，如果对这个概率进行换算，就可以用线性公式描述因变量与自变量的关系了，具体公式如下：<br><img src="https://img-blog.csdnimg.cn/20200723135550214.PNG#pic_center" alt="在这里插入图片描述"><br>与多元线性回归所采用的最小二乘法的参数估计方法相对应，最大似然法是逻辑斯蒂回归所采用的参数估计方法，其原理是找到这样一个参数，可以让样本数据所包含的观察值被观察到的可能性最大。这种寻找最大可能性的方法需要反复计算，对计算能力有很高的要求。最大似然法的优点是在大样本数据中参数的估值稳定、偏差小，估值方差小。</p><h4 id="2-2-4-关联规则"><a href="#2-2-4-关联规则" class="headerlink" title="2.2.4 关联规则"></a>2.2.4 关联规则</h4><p>关联规则（Association Rule）是在数据库和数据挖掘领域中被发明并被广泛研究的一种重要模型，关联规则数据挖掘的主要目的是找出数据集中的频繁模式（Frequent Pattern），即多次重复出现的模式和并发关系（Cooccurrence Relationships），即同时出现的关系，频繁和并发关系也称作关联（Association）。</p><p>应用关联规则最经典的案例就是购物篮分析（Basket Analysis），通过分析顾客购物篮中商品之间的关联，可以挖掘顾客的购物习惯，从而帮助零售商更好地制定有针对性的营销策略。</p><p>以下列举一个简单的关联规则的例子：</p><p>婴儿尿不湿→啤酒[支持度=10%， 置信度=70%]</p><p>这个规则表明，在所有顾客中，有10%的顾客同时购买了婴儿尿不湿和啤酒，而在所有购买了婴儿尿不湿的顾客中，占70%的人同时还购买了啤酒。发现这个关联规则后，超市零售商决定把婴儿尿不湿和啤酒摆放在一起进行促销，结果明显提升了销售额，这就是发生在沃尔玛超市中“啤酒和尿不湿”的经典营销案例。</p><p>上面的案例是否让你对支持度和置信度有了一定的了解？事实上，支持度（Support）和置信度（Confidence）是衡量关联规则强度的两个重要指标，它们分别反映着所发现规则的有用性和确定性。其中支持度：规则X→Y的支持度是指事物全集中包含X∪Y的事物百分比。支持度主要衡量规则的有用性，如果支持度太小，则说明相应规则只是偶发事件。在商业实战中，偶发事件很可能没有商业价值；置信度：规则X→Y的置信度是指既包含了X又包含了Y的事物数量占所有包含了X的事物数量的百分比。置信度主要衡量规则的确定性（可预测性），如果置信度太低，那么从X就很难可靠地推断出Y来，置信度太低的规则在实践应用中也没有太大用处。</p><p>在众多的关联规则数据挖掘算法中，最著名的就是Apriori算法，该算法具体分为以下两步进行：</p><ol><li>生成所有的频繁项目集。一个频繁项目集（Frequent Itemset）是一个支持度高于最小支持度阀值（min-sup）的项目集。</li><li>从频繁项目集中生成所有的可信关联规则。这里可信关联规则是指置信度大于最小置信度阀值（min-conf）的规则。</li></ol><p>关联规则算法不但在数值型数据集的分析中有很大用途，而且在纯文本文档和网页文件中，也有着重要用途。比如发现单词间的并发关系以及Web的使用模式等，这些都是Web数据挖掘、搜索及推荐的基础。</p><h4 id="2-2-5-聚类"><a href="#2-2-5-聚类" class="headerlink" title="2.2.5 聚类"></a>2.2.5 聚类</h4><p>聚类（Clustering）分析有一个通俗的解释和比喻，那就是“物以类聚，人以群分”。针对几个特定的业务指标，可以将观察对象的群体按照相似性和相异性进行不同群组的划分。经过划分后，每个群组内部各对象间的相似度会很高，而在不同群组之间的对象彼此间将具有很高的相异度。</p><p>聚类分析的算法可以分为划分的方法（Partitioning Method）、层次的方法（Hierarchical Method）、基于密度的方法（Density-based Method）、基于网格的方法（Grid-based Method）、基于模型的方法（Model-based Method）等，其中，前面两种方法最为常用。</p><p>对于划分的方法（Partitioning Method），当给定m个对象的数据集，以及希望生成的细分群体数量K后，即可采用这种方法将这些对象分成K组（K≤m），使得每个组内对象是相似的，而组间的对象是相异的。最常用的划分方法是K-Means方法，其具体原理是：首先，随机选择K个对象，并且所选择的每个对象都代表一个组的初始均值或初始的组中心值；对剩余的每个对象，根据其与各个组初始均值的距离，将它们分配给最近的（最相似）小组；然后，重新计算每个小组新的均值；这个过程不断重复，直到所有的对象在K组分布中都找到离自己最近的组。</p><p>层次的方法（Hierarchical Method）则是指依次让最相似的数据对象两两合并，这样不断地合并，最后就形成了一棵聚类树。</p><p>聚类技术在数据分析和数据化运营中的主要用途表现在：既可以直接作为模型对观察对象进行群体划分，为业务方的精细化运营提供具体的细分依据和相应的运营方案建议，又可在数据处理阶段用作数据探索的工具，包括发现离群点、孤立点，数据降维的手段和方法，通过聚类发现数据间的深层次的关系等。</p><h4 id="2-2-6-贝叶斯分类方法"><a href="#2-2-6-贝叶斯分类方法" class="headerlink" title="2.2.6 贝叶斯分类方法"></a>2.2.6 贝叶斯分类方法</h4><p>贝叶斯分类方法（Bayesian Classifier）是非常成熟的统计学分类方法，它主要用来预测类成员间关系的可能性。比如通过一个给定观察值的相关属性来判断其属于一个特定类别的概率。贝叶斯分类方法是基于贝叶斯定理的，已经有研究表明，朴素贝叶斯分类方法作为一种简单贝叶斯分类算法甚至可以跟决策树和神经网络算法相媲美。</p><p>贝叶斯定理的公式如下：<br><img src="https://img-blog.csdnimg.cn/20200723141132253.PNG#pic_center" alt="在这里插入图片描述"><br>其中，X表示n个属性的测量描述； H为某种假设，比如假设某观察值X属于某个特定的类别C；对于分类问题，希望确定P(H|X)，即能通过给定的X的测量描述，来得到H成立的概率，也就是给出X的属性值，计算出该观察值属于类别C的概率。因为P(H|X)是后验概率（Posterior Probability），所以又称其为在条件X下，H的后验概率。</p><p>贝叶斯定理是朴素贝叶斯分类法（Naive Bayesian Classifier）的基础，如果给定数据集里有M个分类类别，通过朴素贝叶斯分类法，可以预测给定观察值是否属于具有最高后验概率的特定类别，也就是说，朴素贝叶斯分类方法预测X属于类别Ci时，表示当且仅当<br><img src="https://img-blog.csdnimg.cn/20200723141458372.PNG#pic_center" alt="P(Ci | X)&gt;P(Cj | X)  1≤j≤m，ji"><br>此时如果最大化P(Ci|X)，其P(Ci|X)最大的类Ci被称为最大后验假设，根据贝叶斯定理<br><img src="https://img-blog.csdnimg.cn/20200723141701294.PNG#pic_center" alt="在这里插入图片描述"><br>可知，由于P(X)对于所有的类别是均等的，因此只需要P(X|Ci)P(Ci)取最大即可。</p><p>为了预测一个未知样本X的类别，可对每个类别Ci估算相应的P(X|Ci)P(Ci)。样本X归属于类别Ci，当且仅当<br><img src="https://img-blog.csdnimg.cn/20200723141803769.png#pic_center" alt="在这里插入图片描述"><br>贝叶斯分类方法在数据化运营实践中主要用于分类问题的归类等应用场景。</p><h4 id="2-2-7-支持向量机"><a href="#2-2-7-支持向量机" class="headerlink" title="2.2.7 支持向量机"></a>2.2.7 支持向量机</h4><p>支持向量机（Support Vector Machine）与传统的神经网络技术相比，支持向量机不仅结构简单，而且各项技术的性能也明显提升，因此它成为当今机器学习领域的热点之一。</p><p>作为一种新的分类方法，支持向量机以结构风险最小为原则。在线性的情况下，就在原空间寻找两类样本的最优分类超平面。在非线性的情况下，它使用一种非线性的映射，将原训练集数据映射到较高的维上。在新的维上，它搜索线性最佳分离超平面。使用一个适当的对足够高维的非线性映射，两类数据总可以被超平面分开。</p><p>支持向量机的基本概念如下：</p><p>设给定的训练样本集为{(x1, y1), (x2, y2), …, (xn, yn)}，其中xi ∈R<sup>n</sup>, y∈{-1,1}。再假设该训练集可被一个超平面线性划分，设该超平面记为(w, x)+b=0。<br><img src="https://img-blog.csdnimg.cn/20200723142736451.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如图中圆形和方形代表两类样本，H为分类线，H1、H2，分别为过各类样本中离分类线最近的样本并且平行于分类线的直线，它们之间的距离叫做分类间隔（Margin）。所谓的最优分类线就是要求分类线不但能将两类正确分开（训练错误为0），而且能使分类间隔最大。推广到高维空间，最优分类线就成了最优分类面。</p><p>其中，距离超平面最近的一类向量被称为支持向量（Support Vector），一组支持向量可以唯一地确定一个超平面。通过学习算法，SVM可以自动寻找出那些对分类有较好区分能力的支持向量，由此构造出的分类器则可以最大化类与类的间隔，因而有较好的适应能力和较高的分类准确率。</p><p>支持向量机的缺点是训练数据较大，但是，它的优点也是很明显的—对于复杂的非线性的决策边界的建模能力高度准确，并且也不太容易过拟合。</p><p>支持向量机主要用在预测、分类这样的实际分析需求场景中。</p><h4 id="2-2-8-主成分分析"><a href="#2-2-8-主成分分析" class="headerlink" title="2.2.8 主成分分析"></a>2.2.8 主成分分析</h4><p>主成分分析（Principal Components Analysis）会通过线性组合将多个原始变量合并成若干个主成分，这样每个主成分都变成了原始变量的线性组合。这种转变的目的，一方面是可以大幅降低原始数据的维度，同时也在此过程中发现原始数据属性之间的关系。</p><p>主成分分析的主要步骤如下：</p><ol><li>通常要先进行各变量的标准化工作，标准化的目的是将数据按照比例进行缩放，使之落入一个小的区间范围之内，从而让不同的变量经过标准化处理后可以有平等的分析和比较基础。</li><li>选择协方差阵或者相关阵计算特征根及对应的特征向量。</li><li>计算方差贡献率，并根据方差贡献率的阀值选取合适的主成分个数。</li><li>根据主成分载荷的大小对选择的主成分进行命名。</li><li>根据主成分载荷计算各个主成分的得分。</li></ol><p>将主成分进行推广和延伸即成为因子分析（Factor Analysis），因子分析在综合原始变量信息的基础上将会力图构筑若干个意义较为明确的公因子；也就是说，采用少数几个因子描述多个指标之间的联系，将比较密切的变量归为同一类中，每类变量即是一个因子。之所以称其为因子，是因为它们实际上是不可测量的，只能解释。</p><p>主成分分析是因子分析的一个特例，两者的区别和联系主要表现在以下方面：</p><ul><li>主成分分析会把主成分表示成各个原始变量的线性组合，而因子分析则把原始变量表示成各个因子的线性组合。这个区别最直观也最容易记住。</li><li>主成分分析的重点在于解释原始变量的总方差，而因子分析的重点在于解释原始变量的协方差。</li><li>在主成分分析中，有几个原始变量就有几个主成分，而在因子分析中，因子个数可以根据业务场景的需要人为指定，并且指定的因子数量不同，则分析结果也会有差异。</li><li>在主成分分析中，给定的协方差矩阵或者相关矩阵的特征值是唯一时，主成分也是唯一的，但是在因子分析中，因子不是唯一的，并且通过旋转可以得到不同的因子。</li></ul><p>主成分分析和因子分析在数据化运营实践中主要用于数据处理、降维、变量间关系的探索等方面，同时作为统计学里的基本而重要的分析工具和分析方法，它们在一些专题分析中也有着广泛的应用。</p><h4 id="2-2-9-假设检验"><a href="#2-2-9-假设检验" class="headerlink" title="2.2.9 假设检验"></a>2.2.9 假设检验</h4><p>假设检验（Hypothesis Test）的基本原理就是小概率事件原理，即观测小概率事件在假设成立的情况下是否发生。如果在一次试验中，小概率事件发生了，那么说明假设在一定的显著性水平下不可靠或者不成立；如果在一次试验中，小概率事件没有发生，那么也只能说明没有足够理由相信假设是错误的，但是也并不能说明假设是正确的，因为无法收集到所有的证据来证明假设是正确的。</p><p>假设检验的结论是在一定的显著性水平下得出的。因此，当采用此方法观测事件并下结论时，有可能会犯错，这些错误主要有两大类：</p><ul><li>第Ⅰ类错误：当原假设为真时，却否定它而犯的错误，即拒绝正确假设的错误，也叫弃真错误。犯第Ⅰ类错误的概率记为，通常也叫α错误，α=1-置信度。</li><li>第Ⅱ类错误：当原假设为假时，却肯定它而犯的错误，即接受错误假设的错误，也叫纳伪错误。犯第Ⅱ类错误的概率记为，通常也叫β错误。</li></ul><p>上述这两类错误在其他条件不变的情况下是相反的，即α增大时，β就减小；α减小时，β就增大。错误容易受数据分析人员的控制，因此在假设检验中，通常会先控制第Ⅰ类错误发生的概率，具体表现为：在做假设检验之前先指定一个的具体数值，通常取0.05，也可以取0.1或0.001。</p><p>在数据化运营的商业实践中，假设检验最常用的场景就是用于“运营效果的评估”上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200723150511532.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据化运营" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8C%96%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】16 图片文字识别(Application Example_Photo OCR)</title>
    <link href="http://yoursite.com/2020/07/22/[Machine%20Learning]%2016%20%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB(Application%20Example_%20Photo%20OCR)/"/>
    <id>http://yoursite.com/2020/07/22/[Machine%20Learning]%2016%20%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB(Application%20Example_%20Photo%20OCR)/</id>
    <published>2020-07-22T07:47:08.000Z</published>
    <updated>2020-07-22T07:57:09.687Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200722154505432.PNG#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="16-Application-Example-Photo-OCR-图片文字识别"><a href="#16-Application-Example-Photo-OCR-图片文字识别" class="headerlink" title="16 Application Example: Photo OCR(图片文字识别)"></a>16 Application Example: Photo OCR(图片文字识别)</h2><h3 id="16-1-Problem-Description-and-Pipeline"><a href="#16-1-Problem-Description-and-Pipeline" class="headerlink" title="16.1 Problem Description and Pipeline"></a>16.1 Problem Description and Pipeline</h3><p>图像文字识别应用所作的事是，从一张给定的图片中识别文字。这比从一份扫描文档中识别文字要复杂的多。<br><img src="https://img-blog.csdnimg.cn/20200722145838803.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>为了完成这样的工作，需要采取如下步骤：<br>1.文字侦测（Text detection）—— 将图片上的文字与其他环境对象分离开来<br>2.字符切分（Character segmentation）—— 将文字分割成一个个单一的字符<br>3.字符分类（Character classification）—— 确定每一个字符是什么</p><p><img src="https://img-blog.csdnimg.cn/20200722145956698.PNG#pic_center" alt="在这里插入图片描述"></p><h3 id="16-2-Sliding-Windows"><a href="#16-2-Sliding-Windows" class="headerlink" title="16.2 Sliding Windows"></a>16.2 Sliding Windows</h3><p>滑动窗口是一项用来从图像中抽取对象的技术。假设需要在一张图片中识别行人，首先要做的是用许多固定尺寸的图片来训练一个能够准确识别行人的模型。然后用之前训练识别行人的模型时所采用的图片尺寸在要进行行人识别的图片上进行剪裁，接着将剪裁得到的切片交给模型，让模型判断是否为行人，再在图片上滑动剪裁区域重新进行剪裁，将新剪裁的切片也交给模型进行判断，如此循环直至将图片全部检测完。一旦完成后，按比例放大剪裁的区域，再以新的尺寸对图片进行剪裁，将新剪裁的切片按比例缩小至模型所采纳的尺寸，交给模型进行判断，如此循环。<br><img src="https://img-blog.csdnimg.cn/20200722151434591.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>滑动窗口技术也被用于文字识别，首先训练模型能够区分字符与非字符，然后，运用滑动窗口技术识别字符，一旦完成了字符的识别，将识别得出的区域进行一些扩展，然后将重叠的区域进行合并。接着以宽高比作为过滤条件，过滤掉高度比宽度更大的区域（认为单词的长度通常比高度要大）。下图中绿色的区域是经过这些步骤后被认为是文字的区域，而红色的区域是被忽略的。<br><img src="https://img-blog.csdnimg.cn/20200722151528509.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>以上便是文字侦测阶段。 下一步是训练一个模型来完成将文字分割成一个个字符的任务，需要的训练集由单个字符的图片和两个相连字符之间的图片来训练模型。<br><img src="https://img-blog.csdnimg.cn/20200722151642739.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>模型训练完后，我们仍然是使用滑动窗口技术来进行字符识别。</p><p>以上便是字符切分阶段。 最后一个阶段是字符分类阶段，利用神经网络、支持向量机或者逻辑回归算法训练一个分类器即可。</p><h3 id="16-3-Getting-Lots-of-Data-and-Artificial-Data"><a href="#16-3-Getting-Lots-of-Data-and-Artificial-Data" class="headerlink" title="16.3 Getting Lots of Data and Artificial Data"></a>16.3 Getting Lots of Data and Artificial Data</h3><p>如果模型是低方差的，那么获得更多的数据用于训练模型，是能够有更好的效果的。问题在于，怎样获得数据，数据不总是可以直接获得的，有可能需要人工地创造一些数据。</p><p>以文字识别应用为例，我们可以字体网站下载各种字体，然后利用这些不同的字体配上各种不同的随机背景图片创造出一些用于训练的实例，这让我们能够获得一个无限大的训练集。这是从零开始创造实例。另一种方法是，利用已有的数据，然后对其进行修改，例如将已有的字符图片进行一些扭曲、旋转、模糊处理。只要我们认为实际数据有可能和经过这样处理后的数据类似，我们便可以用这样的方法来创造大量的数据。</p><p>有关获得更多数据的几种方法：<br>1.人工数据合成<br>2.手动收集、标记数据<br>3.众包</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200722154505432.PNG#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】15 大规模机器学习(Large Scale Machine Learning)</title>
    <link href="http://yoursite.com/2020/07/22/[Machine%20Learning]%2015%20%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(Large%20Scale%20Machine%20Learning)/"/>
    <id>http://yoursite.com/2020/07/22/[Machine%20Learning]%2015%20%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(Large%20Scale%20Machine%20Learning)/</id>
    <published>2020-07-22T06:54:03.000Z</published>
    <updated>2020-07-22T06:55:40.613Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200722144708307.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="15-Large-Scale-Machine-Learning-大规模机器学习"><a href="#15-Large-Scale-Machine-Learning-大规模机器学习" class="headerlink" title="15 Large Scale Machine Learning(大规模机器学习)"></a>15 Large Scale Machine Learning(大规模机器学习)</h2><h3 id="15-1-Learning-With-Large-Dataset"><a href="#15-1-Learning-With-Large-Dataset" class="headerlink" title="15.1 Learning With Large Dataset"></a>15.1 Learning With Large Dataset</h3><p>如果有一个低方差的模型，增加数据集的规模可以帮助你获得更好的结果。那么，如果有 1亿条记录的训练集，该如何应对？</p><p>以线性回归模型为例，每一次梯度下降迭代，都需要计算训练集的误差的平方和，如果我们的学习算法需要有 20 次迭代，这便已经是非常大的计算代价。</p><p>首先应该做的事是去检查一个这么大规模的训练集是否真的必要，也许只用 1000个训练集也能获得较好的效果，可以通过绘制学习曲线来帮助判断。<br><img src="https://img-blog.csdnimg.cn/20200722133854323.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="15-2-Stochastic-Gradient-Descent-随机梯度下降法"><a href="#15-2-Stochastic-Gradient-Descent-随机梯度下降法" class="headerlink" title="15.2 Stochastic Gradient Descent(随机梯度下降法)"></a>15.2 Stochastic Gradient Descent(随机梯度下降法)</h3><p>如果我们一定需要一个大规模的训练集，则可以尝试使用随机梯度下降法（SGD）来代替批量梯度下降法。</p><p>在随机梯度下降法中，我们定义代价函数为一个单一训练实例的代价：<br><img src="https://img-blog.csdnimg.cn/20200722134203793.png#pic_center" alt="在这里插入图片描述"></p><p>随机梯度下降算法为：首先对训练集随机“洗牌”，然后：<br><img src="https://img-blog.csdnimg.cn/20200722134335136.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>随机梯度下降算法在每一次计算之后便更新参数 𝜃 ，而不需要首先将所有的训练集求和，在梯度下降算法还没有完成一次迭代时，随机梯度下降算法便已经走出了很远。但是这样的算法存在的问题是，不是每一步都是朝着”正确”的方向迈出的。因此算法虽然会逐渐走向全局最小值的位置，但是可能无法站到那个最小值的那一点，而是在最小值点附近徘徊。<br><img src="https://img-blog.csdnimg.cn/20200722134513813.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="15-3-Mini-Batch-Gradient-Descent-小批量梯度下降"><a href="#15-3-Mini-Batch-Gradient-Descent-小批量梯度下降" class="headerlink" title="15.3 Mini-Batch Gradient Descent(小批量梯度下降)"></a>15.3 Mini-Batch Gradient Descent(小批量梯度下降)</h3><p>小批量梯度下降算法是介于批量梯度下降算法和随机梯度下降算法之间的算法，每计算常数𝑏次训练实例，便更新一次参数 𝜃 。<br><img src="https://img-blog.csdnimg.cn/20200722135245864.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200722135950392.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通常会令 𝑏 在 2-100 之间。这样做的好处在于，可以用向量化的方式来循环𝑏个训练实例，如果用的线性代数函数库比较好，能够支持平行处理，那么算法的总体表现将不受影响（与随机梯度下降相同）。</p><h3 id="15-4-Stochastic-Gradient-Descent-Convergence-随机梯度下降收敛"><a href="#15-4-Stochastic-Gradient-Descent-Convergence-随机梯度下降收敛" class="headerlink" title="15.4 Stochastic Gradient Descent Convergence(随机梯度下降收敛)"></a>15.4 Stochastic Gradient Descent Convergence(随机梯度下降收敛)</h3><p>在批量梯度下降中，可以令代价函数𝐽为迭代次数的函数，绘制图表，根据图表来判断梯度下降是否收敛。但是，在大规模的训练集的情况下，这是不现实的，因为计算代价太大了。</p><p>在随机梯度下降中，在每一次更新 𝜃 之前都计算一次代价，然后每𝑥次迭代后，求出这𝑥次对训练实例计算代价的平均值，然后绘制这些平均值与𝑥次迭代的次数之间的函数图表。<br><img src="https://img-blog.csdnimg.cn/20200722140830226.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当在绘制这样的图表时，可能会得到一个颠簸不平但是不会明显减少的函数图像（如上面左下图中蓝线所示）。可以通过增加𝛼来使得函数更加平缓，也许便能看出下降的趋势了（如上面左下图中红线所示）；或者可能函数图表仍然是颠簸不平且不下降的（如洋红色线所示），那么我们的模型本身可能存在一些错误。</p><p>如果我们得到的曲线如上面右下方所示，不断地上升，那么我们可能会需要选择一个较小的学习率𝛼。</p><p>我们也可以令学习率随着迭代次数的增加而减小，例如令：<br><img src="https://img-blog.csdnimg.cn/20200722141613805.PNG#pic_center" alt="在这里插入图片描述"><br>随着我们不断地靠近全局最小值，通过减小学习率，迫使算法收敛而非在最小值附近徘徊。 但是通常我们不需要这样做便能有非常好的效果了，对𝛼进行调整所耗费的计算通常不值得。<br><img src="https://img-blog.csdnimg.cn/20200722141743805.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>总结下，近似地监测出随机梯度下降算法在最优化代价函数中的表现，这种方法不需要定时地扫描整个训练集，来算出整个样本集的代价函数，而是只需要每次对最后/前 1000 个，或者多少个样本，求一下平均值。应用这种方法，你既可以保证随机梯度下降法正在正常运转和收敛，也可以用它来调整学习速率𝛼的大小。</p><h3 id="15-5-Online-Learning"><a href="#15-5-Online-Learning" class="headerlink" title="15.5 Online Learning"></a>15.5 Online Learning</h3><p>在线学习机制让我们可以模型化问题。今天，许多大型网站或者许多大型网络公司，使用不同版本的在线学习机制算法，从大批的涌入又离开网站的用户身上进行学习。特别要提及的是，如果你有一个由连续的用户流引发的连续的数据流，进入你的网站，你能做的是使用一个在线学习机制，从数据流中学习用户的偏好，然后使用这些信息来优化一些关于网站的决策。在线学习算法指的是对数据流而非离线的静态数据集的学习。许多在线网站都有持续不断的用户流，对于每一个用户，网站希望能在不将数据存储到数据库中便顺利地进行算法学习。</p><p>假定你有一个提供运输服务的公司，用户们来向你询问把包裹从 A 地运到 B 地的服务，同时假定你有一个网站，让用户们可多次登陆，然后他们告诉你，他们想从哪里寄出包裹，以及包裹要寄到哪里去，然后你的网站开出运输包裹的的服务价格。比如，我会收取$50 来运输你的包裹，我会收取$20 之类的，然后根据你开给用户的这个价格，用户有时会接受这个运输服务，那么这就是个正样本，有时他们会走掉，然后他们拒绝购买你的运输服务，所以，让我们假定我们想要一个学习算法来帮助我们，优化我们想给用户开出的价格。</p><p>假使我们正在经营一家物流公司，每当一个用户询问从地点 A 至地点 B 的快递费用时，我们给用户一个报价，该用户可能选择接受（𝑦 = 1）或不接受（𝑦 = 0）。通过构建一个模型，来预测用户接受报价并使用我们物流服务的可能性。因此报价是一个特征，其他特征为距离，起始地点，目标地点以及特定的用户数据。模型的输出是:𝑝(𝑦 = 1)。</p><p>在线学习的算法与随机梯度下降算法有些类似，对单一的实例进行学习，而非对一个提前定义的训练集进行循环。<br><img src="https://img-blog.csdnimg.cn/20200722142804159.PNG" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200722142804162.png" alt="在这里插入图片描述"><br>一旦对一个数据的学习完成了，便可以丢弃该数据，不需要再存储它了。这种方式的好处在于，算法可以很好的适应用户的倾向性，同时可以针对用户的当前行为不断地更新模型以适应该用户。</p><p>实际上，每次交互事件并不只产生一个数据集，例如，我们一次给用户提供 3 个物流选项，用户选择 2 项，我们实际上可以获得 3 个新的训练实例，因此算法可以一次从 3 个实例中学习并更新模型。</p><p>这些问题中的任何一个都可以被归类到标准的，拥有一个固定的样本集的机器学习问题中。或许，你可以运行一个你自己的网站，尝试运行几天，然后保存一个数据集，一个固定的数据集，然后对其运行一个学习算法。但是这些是实际的问题，在这些问题里，你会看到大公司会获取如此多的数据，真的没有必要来保存一个固定的数据集，取而代之的是你可以使用一个在线学习算法来连续的学习，从这些用户不断产生的数据中来学习。这就是在线学习机制，然后就像我们所看到的，我们所使用的这个算法与随机梯度下降算法非常类似，唯一的区别的是，我们不会使用一个固定的数据集，会做的是获取一个用户样本，从那个样本中学习，然后丢弃那个样本并继续下去，而且如果你对某一种应用有一个连续的数据流，这样的算法可能会非常值得考虑。当然，在线学习的一个优点就是，如果你有一个变化的用户群，又或者你在尝试预测的事情，在缓慢变化，就像你的用户的品味在缓慢变化，这个在线学习算法，可以慢慢地调试你所学习到的假设，将其调节更新到最新的用户行为。</p><h3 id="15-6-Map-Reduce-and-Data-Parallelism-映射化简和数据并行"><a href="#15-6-Map-Reduce-and-Data-Parallelism-映射化简和数据并行" class="headerlink" title="15.6 Map Reduce and Data Parallelism(映射化简和数据并行)"></a>15.6 Map Reduce and Data Parallelism(映射化简和数据并行)</h3><p>映射化简和数据并行对于大规模机器学习问题而言是非常重要的概念。之前提到，如果用批量梯度下降算法来求解大规模数据集的最优解，需要对整个训练集进行循环，计算偏导数和代价，再求和，计算代价非常大。如果能够将数据集分配给不多台计算机，让每一台计算机处理数据集的一个子集，然后再将计所的结果汇总在求和。这样的方法叫做<label style="color:red">映射简化</label>。</p><p>具体而言，如果任何学习算法能够表达为，对训练集的函数的求和，那么便能将这个任务分配给多台计算机（或者同一台计算机的不同 CPU 核心），以达到加速处理的目的。<br><img src="https://img-blog.csdnimg.cn/20200722144329440.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如，有 400 个训练实例，则可以将批量梯度下降的求和任务分配给 4 台计算机进行处理：<br><img src="https://img-blog.csdnimg.cn/20200722144441674.PNG#pic_center" alt="在这里插入图片描述"><br>很多高级的线性代数函数库已经能够利用多核 CPU 的多个核心来并行地处理矩阵运算，这也是算法的向量化实现如此重要的缘故（比调用循环快）。<br><img src="https://img-blog.csdnimg.cn/20200722144753711.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200722144708307.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】14 推荐系统(Recommender Systems)</title>
    <link href="http://yoursite.com/2020/07/21/[Machine%20Learning]%2014%20%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F(Recommender%20Systems)/"/>
    <id>http://yoursite.com/2020/07/21/[Machine%20Learning]%2014%20%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F(Recommender%20Systems)/</id>
    <published>2020-07-21T08:23:44.000Z</published>
    <updated>2020-07-21T08:24:12.062Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200721162108275.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="14-Recommender-Systems-推荐系统"><a href="#14-Recommender-Systems-推荐系统" class="headerlink" title="14 Recommender Systems(推荐系统)"></a>14 Recommender Systems(推荐系统)</h2><h3 id="14-1-Problem-Formulation"><a href="#14-1-Problem-Formulation" class="headerlink" title="14.1 Problem Formulation"></a>14.1 Problem Formulation</h3><p>举个例子：<br>假如我们是一个电影供应商，有 5 部电影和 4 个用户，我们要求用户为电影打分。<br><img src="https://img-blog.csdnimg.cn/20200721152241844.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>前三部电影是爱情片，后两部则是动作片，我们可以看出 Alice 和 Bob 似乎更倾向与爱情片，而 Carol 和 Dave 似乎更倾向与动作片。并且没有一个用户给所有的电影都打过分。</p><p>我们希望构建一个算法来预测他们每个人可能会给他们没看过的电影打多少分，并以此作为推荐的依据。</p><p>字符的含义：<br>𝑛<sub>𝑢</sub> 代表用户的数量<br>𝑛<sub>𝑚</sub> 代表电影的数量<br>𝑟(𝑖,𝑗) 如果用户 j 给电影 𝑖 评过分则 𝑟(𝑖,𝑗) = 1<br>𝑦<sup>(𝑖,𝑗)</sup> 代表用户 𝑗 给电影 i 的评分<br>𝑚<sub>𝑗</sub>代表用户 𝑗 评过分的电影的总数</p><h3 id="14-2-Content-Based-Recommendations"><a href="#14-2-Content-Based-Recommendations" class="headerlink" title="14.2 Content Based Recommendations"></a>14.2 Content Based Recommendations</h3><p>在一个基于内容的推荐系统算法中，我们假设对于希望推荐的东西有一些数据，这些数据是有关这些东西的特征。</p><p>在例子中，假设每部电影都有两个特征，如𝑥1代表电影的浪漫程度，𝑥2代表电影的动作程度。<br><img src="https://img-blog.csdnimg.cn/20200721153145145.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>则每部电影都有一个特征向量，如𝑥<sup>(1)</sup>是第一部电影的特征向量为[0.9 0]。</p><p>下面我们要基于这些特征来构建一个推荐系统算法。 假设我们采用线性回归模型，可以针对每一个用户都训练一个线性回归模型，如𝜃<sup>(1)</sup>是第一个用户的模型的参数。 于是，我们有：<br>𝜃<sup>(𝑗)</sup>用户 𝑗 的参数向量<br>𝑥<sup>(𝑖)</sup>电影 𝑖 的特征向量<br>对于用户 𝑗 和电影 𝑖，我们预测评分为：(𝜃<sup>(𝑗)</sup>)<sup>𝑇</sup>𝑥<sup>(𝑖)</sup></p><p>代价函数<br>针对用户 𝑗，该线性回归模型的代价为预测误差的平方和，加上正则化项：<br><img src="https://img-blog.csdnimg.cn/20200721153819982.PNG#pic_center" alt="在这里插入图片描述"><br>其中 𝑖: 𝑟(𝑖,𝑗)表示我们只计算那些用户 𝑗 评过分的电影。在一般的线性回归模型中，误差项和正则项应该都是乘以1/2𝑚，在这里我们将𝑚去掉。并且我们不对方差项𝜃0进行正则化处理。</p><p>上面的代价函数只是针对一个用户的，为了学习所有用户，我们将所有用户的代价函数求和：<br><img src="https://img-blog.csdnimg.cn/20200721153923665.PNG#pic_center" alt="在这里插入图片描述"><br>如果要用梯度下降法来求解最优解，计算代价函数的偏导数后得到梯度下降的更新公式为：<br><img src="https://img-blog.csdnimg.cn/20200721154007768.PNG#pic_center" alt="在这里插入图片描述"></p><h3 id="14-3-Collaborative-Filtering-协同过滤"><a href="#14-3-Collaborative-Filtering-协同过滤" class="headerlink" title="14.3 Collaborative Filtering(协同过滤)"></a>14.3 Collaborative Filtering(协同过滤)</h3><p>在之前的基于内容的推荐系统中，对于每一部电影，我们都掌握了可用的特征，使用这些特征训练出了每一个用户的参数。相反地，如果我们拥有用户的参数，可以学习得出电影的特征。<br><img src="https://img-blog.csdnimg.cn/20200721154300881.PNG#pic_center" alt="在这里插入图片描述"><br>但是如果我们既没有用户的参数，也没有电影的特征，这两种方法都不可行了。协同过滤算法可以同时学习这两者。</p><p>我们的优化目标便改为同时针对𝑥和𝜃进行。<br><img src="https://img-blog.csdnimg.cn/20200721154357151.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对代价函数求偏导数的结果如下：<br><img src="https://img-blog.csdnimg.cn/20200721154439704.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：在协同过滤从算法中，我们通常不使用方差项，如果需要的话，算法会自动学得。</p><p>协同过滤算法使用步骤如下：</p><ol><li>初始 𝑥<sup>(1)</sup>, 𝑥<sup>(2)</sup>, . . . 𝑥<sup>(𝑛<sub>𝑚</sub>)</sup>, 𝜃<sup>(1)</sup>, 𝜃<sup>(2)</sup>, . . . , 𝜃<sup>(𝑛<sub>𝑢</sub>)</sup>为一些随机小值</li><li>使用梯度下降算法最小化代价函数</li><li>在训练完算法后，我们预测(𝜃<sup>(𝑗)</sup>)<sup>𝑇</sup>𝑥<sup>(𝑖)</sup>为用户 𝑗 给电影 𝑖 的评分</li></ol><p>通过这个学习过程获得的特征矩阵包含了有关电影的重要数据，这些数据不总是人能读懂的，但是我们可以用这些数据作为给用户推荐电影的依据。例如，如果一位用户正在观看电影 𝑥<sup>(𝑖)</sup>，我们可以寻找另一部电影𝑥<sup>(𝑗)</sup>，依据两部电影的特征向量之间的距离||𝑥<sup>(𝑖)</sup> − 𝑥<sup>(𝑗)</sup>||的大小。</p><p><strong>协同过滤算法</strong><br><img src="https://img-blog.csdnimg.cn/20200721155201366.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721155202605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="14-4-Vectorization-Low-Rank-Matrix-Factorization-向量化：低秩矩阵分解"><a href="#14-4-Vectorization-Low-Rank-Matrix-Factorization-向量化：低秩矩阵分解" class="headerlink" title="14.4 Vectorization_ Low Rank Matrix Factorization(向量化：低秩矩阵分解)"></a>14.4 Vectorization_ Low Rank Matrix Factorization(向量化：低秩矩阵分解)</h3><p>协同过滤算法的向量化实现。</p><p>举例子：<br>1.当给出一件产品时，你能否找到与之相关的其它产品。<br>2.一位用户最近看上一件产品，有没有其它相关的产品，你可以推荐给他。<br>要做的是：实现一种选择的方法，写出协同过滤算法的预测情况。</p><p>有五部电影，以及四位用户，那么 这个矩阵 𝑌 就是一个 5 行 4 列的矩阵，它将这些电影的用户评分数据都存在矩阵里：<br><img src="https://img-blog.csdnimg.cn/2020072116095750.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721161314842.PNG#pic_center" alt="在这里插入图片描述"><br>找到相关影片：<br><img src="https://img-blog.csdnimg.cn/20200721161351278.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>总结一下，当用户在看某部电影 𝑖 的时候，如果你想找 5 部与电影非常相似的电影，为了能给用户推荐 5 部新电影，你需要做的是找出电影 𝑗，在这些不同的电影中与我们要找的电影 𝑖 的距离最小，这样你就能给你的用户推荐几部不同的电影了。</p><h3 id="14-5-Implementational-Detail-Mean-Normalization"><a href="#14-5-Implementational-Detail-Mean-Normalization" class="headerlink" title="14.5 Implementational Detail_ Mean Normalization"></a>14.5 Implementational Detail_ Mean Normalization</h3><p>下面的用户评分数据：<br><img src="https://img-blog.csdnimg.cn/2020072116095750.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果新增一个用户 Eve，并且 Eve 没有为任何电影评分，那么以什么为依据为 Eve 推荐电影呢？</p><p>首先需要对结果 𝑌矩阵进行均值归一化处理，将每一个用户对某一部电影的评分减去所有用户对该电影评分的平均值：<br><img src="https://img-blog.csdnimg.cn/20200721161803459.PNG#pic_center" alt="在这里插入图片描述"><br>然后利用这个新的 𝑌 矩阵来训练算法。 如果我们要用新训练出的算法来预测评分，则需要将平均值重新加回去，预测(𝜃<sup>(𝑗)</sup>)<sup>𝑇</sup>𝑥<sup>(𝑖)</sup>+ 𝜇<sub>𝑖</sub>，对于 Eve，新模型会认为她给每部电影的评分都是该电影的平均分。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200721162108275.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】13 异常检测(Anomaly Detection)</title>
    <link href="http://yoursite.com/2020/07/21/[Machine%20Learning]%2013%20%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B(Anomaly%20Detection)/"/>
    <id>http://yoursite.com/2020/07/21/[Machine%20Learning]%2013%20%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B(Anomaly%20Detection)/</id>
    <published>2020-07-21T06:52:02.000Z</published>
    <updated>2020-07-21T06:52:24.936Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200721144739196.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="13-Anomaly-Detection-异常检测"><a href="#13-Anomaly-Detection-异常检测" class="headerlink" title="13 Anomaly Detection(异常检测)"></a>13 Anomaly Detection(异常检测)</h2><h3 id="13-1-Problem-Motivation"><a href="#13-1-Problem-Motivation" class="headerlink" title="13.1 Problem Motivation"></a>13.1 Problem Motivation</h3><p>异常检测(Anomaly detection)问题，是机器学习算法的一个常见应用。这种算法的一个有趣之处在于：它虽然主要用于非监督学习问题，但从某些角度看，它又类似于一些监督学习问题。</p><p>什么是异常检测呢？<br>举个例子：假设你是一个飞机引擎制造商，当你生产的飞机引擎从生产线上流出时，你需要进行QA(质量控制测试)，而作为这个测试的一部分，你测量了飞机引擎的一些特征变量，比如引擎运转时产生的热量，或者引擎的振动等等。<br><img src="https://img-blog.csdnimg.cn/20200721105251707.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果生产了𝑚个引擎的话，得到一个从𝑥<sup>(1)</sup>到𝑥<sup>(𝑚)</sup>的数据集，然后将这些数据绘制成图表，看起来就是上图这样：每个叉都是无标签数据。这样，异常检测问题可以定义如下：我们假设后来有一天，你有一个新的飞机引擎从生产线上流出，而你的新飞机引擎有特征变量𝑥<sub>𝑡𝑒𝑠𝑡</sub>。所谓的异常检测问题就是：我们希望知道这个新的飞机引擎是否有某种异常，或者说，我们希望判断这个引擎是否需要进一步测试。因为，如果它看起来像一个正常的引擎，那么我们可以直接将它运送到客户那里，而不需要进一步的测试。</p><p>给定数据集 𝑥<sup>(1)</sup>, 𝑥<sup>(2)</sup>, . . , 𝑥<sup>(𝑚)</sup>，假设数据集是正常的，我们希望知道新的数据 𝑥<sub>𝑡𝑒𝑠𝑡</sub>是不是异常的，即这个测试数据不属于该组数据的几率如何。我们所构建的模型应该能根据该测试数据的位置告诉我们其属于一组数据的可能性 𝑝(𝑥)。<br><img src="https://img-blog.csdnimg.cn/20200721110500301.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图中，在蓝色圈内的数据属于该组数据的可能性较高，而越是偏远的数据，其属于该组数据的可能性就越低。</p><p>这种方法称为密度估计，表达如下：<br><img src="https://img-blog.csdnimg.cn/20200721110613636.PNG#pic_center" alt="在这里插入图片描述"><br>欺诈检测：𝑥<sup>(𝑖)</sup> = 用户的第 𝑖个活动特征<br>模型𝑝(𝑥) 为我们其属于一组数据的可能性，通过𝑝(𝑥) &lt; 𝜀检测非正常用户。</p><p>异常检测主要用来识别欺骗。例如在线采集而来的有关用户的数据，一个特征向量中可能会包含如：用户多久登录一次，访问过的页面，在论坛发布的帖子数量，甚至是打字速度等。尝试根据这些特征构建一个模型，可以用这个模型来识别那些不符合该模式的用户。再一个例子是检测一个数据中心，特征可能包含：内存使用情况，被访问的磁盘数量，CPU 的负载，网络的通信量等。根据这些特征可以构建一个模型，用来判断某些计算机是不是有可能出错了。</p><h3 id="13-2-Gaussian-Distribution-高斯分布"><a href="#13-2-Gaussian-Distribution-高斯分布" class="headerlink" title="13.2 Gaussian Distribution(高斯分布)"></a>13.2 Gaussian Distribution(高斯分布)</h3><p>高斯分布，也称为正态分布。<br><img src="https://img-blog.csdnimg.cn/20200721111023447.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721111103835.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：机器学习中对于方差通常只除以𝑚而非统计学中的(𝑚 − 1)。这里顺便提一下，在实际使用中，到底是选择使用1/𝑚还是1/(𝑚 − 1)其实区别很小，只要你有一个还算大的训练集，在机器学习领域大部分人更习惯使用1/𝑚这个版本的公式。这两个版本的公式在理论特性和数学特性上稍有不同，但是在实际使用中，他们的区别甚小，几乎可以忽略不计。</p><h3 id="13-3-Algorithm"><a href="#13-3-Algorithm" class="headerlink" title="13.3 Algorithm"></a>13.3 Algorithm</h3><p>异常检测算法：<br>对于给定的数据集 𝑥<sup>(1)</sup>, 𝑥<sup>(2)</sup>, . . . , 𝑥<sup>(𝑚)</sup>，针对每一个特征计算 𝜇 和 𝜎<sup>2</sup> 的估计值。<br><img src="https://img-blog.csdnimg.cn/20200721124039696.PNG#pic_center" alt="在这里插入图片描述"><br>一旦获得了平均值和方差的估计值，给定新的一个训练实例，根据模型计算𝑝(𝑥)：<br><img src="https://img-blog.csdnimg.cn/20200721124146373.PNG#pic_center" alt="在这里插入图片描述"></p><p>当𝑝(𝑥) &lt; 𝜀时，为异常。</p><p>下图是一个由两个特征的训练集，以及特征的分布情况：<br><img src="https://img-blog.csdnimg.cn/20200721124345468.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>下面的三维图表表示的是密度估计函数，𝑧轴为根据两个特征的值所估计𝑝(𝑥)值：<br><img src="https://img-blog.csdnimg.cn/20200721124528244.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择一个𝜀，将𝑝(𝑥) = 𝜀作为我们的判定边界，当𝑝(𝑥) &gt; 𝜀时预测数据为正常数据，否则为异常。</p><h3 id="13-4-Developing-and-Evaluating-an-Anomaly-Detection-System"><a href="#13-4-Developing-and-Evaluating-an-Anomaly-Detection-System" class="headerlink" title="13.4 Developing and Evaluating an Anomaly Detection System"></a>13.4 Developing and Evaluating an Anomaly Detection System</h3><p>异常检测算法是一个非监督学习算法，意味着无法根据结果变量 𝑦 的值来告诉数据是否真的是异常的。我们需要另一种方法来帮助检验算法是否有效。当开发一个异常检测系统时，从带标记（异常或正常）的数据着手，选择其中一部分正常数据用于构建训练集，然后用剩下的正常数据和异常数据混合的数据构成交叉检验集和测试集。</p><p>例如：有 10000 台正常引擎的数据，有 20 台异常引擎的数据。 可以这样分配数<br>据：</p><ul><li>6000 台正常引擎的数据作为训练集</li><li>2000 台正常引擎和 10 台异常引擎的数据作为交叉检验集</li><li>2000 台正常引擎和 10 台异常引擎的数据作为测试集</li></ul><p>具体的评价方法如下：</p><ol><li>根据测试集数据，估计特征的平均值和方差并构建𝑝(𝑥)函数</li><li>对交叉检验集，尝试使用不同的𝜀值作为阀值，并预测数据是否异常，根据 F1 值或者查准率与查全率的比例来选择 𝜀</li><li>选出 𝜀 后，针对测试集进行预测，计算异常检验系统的𝐹1值，或者查准率与查全率之比。</li></ol><h3 id="13-5-Anomaly-Detection-vs-Supervised-Learning"><a href="#13-5-Anomaly-Detection-vs-Supervised-Learning" class="headerlink" title="13.5 Anomaly Detection vs. Supervised Learning"></a>13.5 Anomaly Detection vs. Supervised Learning</h3><table><thead><tr><th>异常检测</th><th>监督学习</th></tr></thead><tbody><tr><td>非常少量的正向类（异常数据 𝑦 = 1）, 大量的负向类（𝑦 = 0）</td><td>同时有大量的正向类和负向类</td></tr><tr><td>许多不同种类的异常，非常难。根据非常少量的正向类数据来训练算法。</td><td>有足够多的正向类实例，足够用于训练算法，未来遇到的正向类实例可能与训练集中的非常近似。</td></tr><tr><td>未来遇到的异常可能与已掌握的异常、非常的不同。</td><td></td></tr><tr><td>例如：欺诈行为检测、生产（例如飞机引擎）、检测数据中心的计算机运行状况</td><td>例如：邮件过滤器、天气预报、肿瘤分类</td></tr></tbody></table><p>另外，对于很多技术公司可能会遇到的一些问题，通常来说，正样本的数量很少，甚至有时候是 0，也就是说，出现了太多没见过的不同的异常类型，那么对于这些问题，通常应该使用的算法就是异常检测算法。</p><h3 id="13-5-Choosing-What-Features-to-Use"><a href="#13-5-Choosing-What-Features-to-Use" class="headerlink" title="13.5 Choosing What Features to Use"></a>13.5 Choosing What Features to Use</h3><p>对于异常检测算法，使用的特征是至关重要的，下面谈谈如何选择特征：</p><p>异常检测假设特征符合高斯分布，如果数据的分布不是高斯分布，异常检测算法也能够工作，但是最好还是将数据转换成高斯分布，例如使用对数函数：𝑥 = 𝑙𝑜𝑔(𝑥 + 𝑐)，其中 𝑐为非负常数； 或者 𝑥 = 𝑥<sup>𝑐</sup>，𝑐为 0-1 之间的一个分数，等方法。<br><img src="https://img-blog.csdnimg.cn/20200721133502124.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：在 python 中，通常用 np.log1p()函数，𝑙𝑜𝑔1𝑝就是 𝑙𝑜𝑔(𝑥 + 1)，可以避免<br>出现负数结果，反向函数就是 np.expm1()</p><p>误差分析：<br>一个常见的问题是一些异常的数据可能也会有较高的𝑝(𝑥)值，因而被算法认为是正常的。这种情况下误差分析能够帮助我们，我们可以分析那些被算法错误预测为正常的数据，观察能否找出一些问题。我们可能能从问题中发现我们需要增加一些新的特征，增加这些新特征后获得的新算法能够帮助我们更好地进行异常检测。</p><p>异常检测误差分析：<br><img src="https://img-blog.csdnimg.cn/20200721133550665.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通常可以通过将一些相关的特征进行组合，来获得一些新的更好的特征（异常数据的该特征值异常地大或小），例如，在检测数据中心的计算机状况的例子中，我们可以用 CPU负载与网络通信量的比例作为一个新的特征，如果该值异常地大，便有可能意味着该服务器是陷入了一些问题中。</p><h3 id="13-7-Multivariate-Gaussian-Distribution"><a href="#13-7-Multivariate-Gaussian-Distribution" class="headerlink" title="13.7 Multivariate Gaussian Distribution"></a>13.7 Multivariate Gaussian Distribution</h3><p>假使我们有两个相关的特征，而且这两个特征的值域范围比较宽，这种情况下，一般的高斯分布模型可能不能很好地识别异常数据。其原因在于，一般的高斯分布模型尝试的是去同时抓住两个特征的偏差，因此创造出一个比较大的判定边界。</p><p>下图中是两个相关特征，洋红色的线（根据 ε 的不同其范围可大可小）是一般的高斯分布模型获得的判定边界，很明显绿色的 X 所代表的数据点很可能是异常值，但是其𝑝(𝑥)值却仍然在正常范围内。多元高斯分布将创建像图中蓝色曲线所示的判定边界。<br><img src="https://img-blog.csdnimg.cn/20200721135545231.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在一般的高斯分布模型中，计算 𝑝(𝑥) 的方法是： 通过分别计算每个特征对应的几率然后将其累乘起来，在多元高斯分布模型中，我们将构建特征的协方差矩阵，用所有的特征一起来计算 𝑝(𝑥)。</p><p>首先计算所有特征的平均值，然后再计算协方差矩阵：<br><img src="https://img-blog.csdnimg.cn/20200721135639131.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注:其中𝜇 是一个向量，其每一个单元都是原特征矩阵中一行数据的均值。最后我们计算多元高斯分布的𝑝(𝑥): <img src="https://img-blog.csdnimg.cn/20200721135725964.PNG#pic_center" alt="在这里插入图片描述"><br>其中：<br>|𝛴|是定矩阵，在 Octave 中用 det(sigma)计算</p><p>𝛴1 是逆矩阵，那么协方差矩阵是如何影响模型的？<br><img src="https://img-blog.csdnimg.cn/20200721135904511.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图是 5 个不同的模型，从左往右依次分析：</p><ol><li>是一个一般的高斯分布模型</li><li>通过协方差矩阵，令特征 1 拥有较小的偏差，同时保持特征 2 的偏差</li><li>通过协方差矩阵，令特征 2 拥有较大的偏差，同时保持特征 1 的偏差</li><li>通过协方差矩阵，在不改变两个特征的原有偏差的基础上，增加两者之间的正相关性</li><li>通过协方差矩阵，在不改变两个特征的原有偏差的基础上，增加两者之间的负相关性</li></ol><p>多元高斯分布模型与原高斯分布模型的关系：<br>可以证明的是，原本的高斯分布模型是多元高斯分布模型的一个子集，即像上图中的第1、2、3，3 个例子所示，如果协方差矩阵只在对角线的单位上有非零的值时，即为原本的高斯分布模型了。</p><p>原高斯分布模型和多元高斯分布模型的比较：</p><table><thead><tr><th>原高斯分布模型</th><th>多元高斯分布模型</th></tr></thead><tbody><tr><td>不能捕捉特征之间的相关性，但可以通过将特征进行组合的方法来解决</td><td>自动捕捉特征之间的相关性</td></tr><tr><td>计算代价低，能适应大规模的特征</td><td>计算代价较高，训练集较小时也同样适用</td></tr><tr><td></td><td>必须要有 𝑚 &gt; 𝑛，不然的话协方差矩阵，不可逆的，通常需要 𝑚 &gt; 10𝑛 另外特征冗余也会导致协方差矩阵不可逆</td></tr></tbody></table><p>原高斯分布模型被广泛使用着，如果特征之间在某种程度上存在相互关联的情况，我们可以通过构造新新特征的方法来捕捉这些相关性。</p><p>如果训练集不是太大，并且没有太多的特征，我们可以使用多元高斯分布模型。</p><h3 id="13-8-Anomaly-Detection-Using-the-Multivariate-Gaussian-Distribution"><a href="#13-8-Anomaly-Detection-Using-the-Multivariate-Gaussian-Distribution" class="headerlink" title="13.8 Anomaly Detection Using the Multivariate Gaussian Distribution"></a>13.8 Anomaly Detection Using the Multivariate Gaussian Distribution</h3><p>多元高斯分布和多元正态分布：<br><img src="https://img-blog.csdnimg.cn/20200721140737892.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>分布有两个参数， 𝜇 和 𝛴。其中𝜇是𝑛维向量和 𝛴 是协方差矩阵(𝑛 × 𝑛的矩阵)。而p(x)，通过调整 𝜇 和𝛴，可以得到一个范围不同的分布。</p><p>参数拟合/参数估计问题<br>有一组样本𝑥<sup>(1)</sup>, 𝑥<sup>(2)</sup>, . . . , 𝑥<sup>(𝑚)</sup>都是一个𝑛维向量，并且样本服从多元高斯分布。那么，如何尝试估计参数 𝜇 和 𝛴 ？</p><p>对于估计参数有一个标准公式<br>假设 𝜇 是你的训练样本的平均值：<br><img src="https://img-blog.csdnimg.cn/20200721141750265.png#pic_center" alt="在这里插入图片描述"><br>并设置𝛴：<img src="https://img-blog.csdnimg.cn/20200721141749912.png#pic_center" alt="在这里插入图片描述"></p><p>这和使用 PCA 算法时，写 𝛴 是一样的。所以只需将上述两个公式插入到p(x)中，就能估计参数 𝜇 和𝛴，并将其代入到异常检测算法。那么，如何把这些综合起来开发一个异常检测算法？</p><p>首先，用训练集来拟合模型，通过设定 𝜇 和𝛴来计算𝑝(𝑥)。<br>接下来，当有一个新样本x，即测试样本，用该样本计算p(x)，若p(x)很小就标记为异常。<br><img src="https://img-blog.csdnimg.cn/20200721143321455.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如上图，该分布在中央最多，越到外面圈的范围越小，并且绿色这个点的概率非常低，即能够检测出绿色点为一个异常。</p><p>原始模型与多元高斯模型的关系如图：<br><img src="https://img-blog.csdnimg.cn/20200721143806670.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>原始模型和多元高斯分布比较如图：<br><img src="https://img-blog.csdnimg.cn/20200721144058852.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200721144739196.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】12 降维(Dimensionality Reduction)</title>
    <link href="http://yoursite.com/2020/07/20/[Machine%20Learning]%2012%20%E9%99%8D%E7%BB%B4(Dimensionality%20Reduction)/"/>
    <id>http://yoursite.com/2020/07/20/[Machine%20Learning]%2012%20%E9%99%8D%E7%BB%B4(Dimensionality%20Reduction)/</id>
    <published>2020-07-20T07:21:49.000Z</published>
    <updated>2020-07-20T07:22:25.476Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200720151913225.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="12-Dimensionality-Reduction-降维"><a href="#12-Dimensionality-Reduction-降维" class="headerlink" title="12 Dimensionality Reduction(降维)"></a>12 Dimensionality Reduction(降维)</h2><h3 id="12-1-Motivation-I-Data-Compression"><a href="#12-1-Motivation-I-Data-Compression" class="headerlink" title="12.1 Motivation I_ Data Compression"></a>12.1 Motivation I_ Data Compression</h3><p>第二种无监督学习问题，称为降维。使用降维可以实现数据压缩，数据压缩不仅可以压缩数据，因而使用较少的计算机内存或磁盘空间，但它也加快了学习算法。</p><p>那么，什么是降维？举一个例子，有一个数据集，其含有许多特征。<br><img src="https://img-blog.csdnimg.cn/20200720133240451.PNG#pic_center" alt="在这里插入图片描述"><br>假设有两个未知的特征：𝑥1:长度：用厘米表示；𝑥2：是用英寸表示同一物体的长度。所以，这给了我们高度冗余表示，也许这两个特征𝑥1和𝑥2，能减少数据到一维。</p><p>将数据从二维降至一维： 假使要采用两种不同的仪器来测量一些东西的尺寸，其中一个仪器测量结果的单位是英寸，另一个仪器测量的结果是厘米，我们希望将测量的结果作为我们机器学习的特征。现在的问题的是，两种仪器对同一个东西测量的结果不完全相等（由于误差、精度等），而将两者都作为特征有些重复，因而，我们希望将这个二维的数据降至一维。<br><img src="https://img-blog.csdnimg.cn/20200720133953685.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将数据从三维降至二维： 这个例子中我们要将一个三维的特征向量降至一个二维的特征向量。过程是与上面类似的，将三维向量投射到一个二维的平面上，强迫使得所有的数据都在同一个平面上，降至二维的特征向量。<br><img src="https://img-blog.csdnimg.cn/20200720134132906.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样的处理过程可以被用于把任何维度的数据降到任何想要的维度，例如将 1000 维的特征降至 100 维。</p><h3 id="12-2-Motivation-II-Visualization"><a href="#12-2-Motivation-II-Visualization" class="headerlink" title="12.2 Motivation II_ Visualization"></a>12.2 Motivation II_ Visualization</h3><p>在许多机器学习问题中，如果能将数据可视化，便能寻找到一个更好的解决方案，其中降维就有助于实现这一目的。<br><img src="https://img-blog.csdnimg.cn/20200720134505327.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如，一个数据集包含有许多不同国家的数据，每一个特征向量都有 50 个特征（如 GDP，人均 GDP，平均寿命等）。如果要将这个 50 维的数据可视化是不可能的。使用降维的方法将其降至 2 维，便可以将其可视化了。<br><img src="https://img-blog.csdnimg.cn/20200720134719309.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样做的问题在于，降维的算法只负责减少维数，新产生的特征的意义就必须由我们自己去发现了。</p><h3 id="12-3-Principal-Component-Analysis-Problem-Formulation"><a href="#12-3-Principal-Component-Analysis-Problem-Formulation" class="headerlink" title="12.3 Principal Component Analysis Problem Formulation"></a>12.3 Principal Component Analysis Problem Formulation</h3><p>主成分分析(PCA)是最常见的降维算法。</p><p>在 PCA 中，要做的是找到一个方向向量（Vector direction），当把所有的数据都投射到该向量上时，希望投射平均均方误差能尽可能地小。方向向量是一个经过原点的向量，而投射误差是从特征向量向该方向向量作垂线的长度。<br><img src="https://img-blog.csdnimg.cn/20200720142621705.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>主成分分析问题的描述：问题是要将𝑛维数据降至𝑘维，目标是找到向量𝑢<sup>(1)</sup>,𝑢<sup>(2)</sup>,…,𝑢<sup>(𝑘)</sup>使得总的投射误差最小。</p><p><strong>主成分分析与线性回归的比较</strong><br>主成分分析与线性回归是两种不同的算法。主成分分析最小化的是投射误差（Projected Error），而线性回归尝试的是最小化预测误差。线性回归的目的是预测结果，而主成分分析不作任何预测。<br><img src="https://img-blog.csdnimg.cn/20200720142903671.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图中，左边的是线性回归的误差（垂直于横轴投影），右边则是主要成分分析的误差（垂直于红线投影）。</p><p>PCA 将𝑛个特征降维到𝑘个，可以用来进行数据压缩，如果 100 维的向量最后可以用 10 维来表示，那么压缩率为 90%。同样图像处理领域的 KL 变换使用 PCA 做图像压缩。但 PCA 要保证降维后，还要保证数据的特性损失最小。</p><p>PCA 技术的一大好处是对数据进行降维的处理。可以对新求出的“主元”向量的重要性进行排序，根据需要取前面最重要的部分，将后面的维数省去，可以达到降维从而简化模型或是对数据进行压缩的效果。同时最大程度的保持了原有数据的信息。</p><p>PCA 技术的一个很大的优点是，它是完全无参数限制的。在 PCA 的计算过程中完全不需要人为的设定参数或是根据任何经验模型对计算进行干预，最后的结果只与数据相关，与用户是独立的。但是，这一点同时也可以看作是缺点。如果用户对观测对象有一定的先验知识，掌握了数据的一些特征，却无法通过参数化等方法对处理过程进行干预，可能会得不到预期的效果，效率也不高。</p><h3 id="12-4-Principal-Component-Analysis-Algorithm"><a href="#12-4-Principal-Component-Analysis-Algorithm" class="headerlink" title="12.4 Principal Component Analysis Algorithm"></a>12.4 Principal Component Analysis Algorithm</h3><p><img src="https://img-blog.csdnimg.cn/202007201433127.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>PCA 减少𝑛维到𝑘维：<br>第一步是均值归一化。需要计算出所有特征的均值，然后令 𝑥𝑗 = 𝑥𝑗 − 𝜇𝑗。如果特征是在不同的数量级上，还需要将其除以标准差 𝜎<sup>2</sup>。<br>第二步是计算协方差矩阵（covariance matrix）𝛴： <img src="https://img-blog.csdnimg.cn/2020072014384614.png#pic_center" alt="在这里插入图片描述"></p><p>第三步是计算协方差矩阵𝛴的特征向量（eigenvectors）:<br>在 Octave 里我们可以利用奇异值分解（singular value decomposition）来求解，[U, S,V]= svd(sigma)。</p><p><img src="https://img-blog.csdnimg.cn/20200720144008580.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对于一个 𝑛 × 𝑛维度的矩阵，上式中的𝑈是一个具有与数据之间最小投射误差的方向向量构成的矩阵。如果我们希望将数据从𝑛维降至𝑘维，只需要从𝑈中选取前𝑘个向量，获得一个𝑛 × 𝑘维度的矩阵，我们用𝑈𝑟𝑒𝑑𝑢𝑐𝑒表示，然后通过如下计算获得要求的新特征向量𝑧<sup>(𝑖)</sup>:<img src="https://img-blog.csdnimg.cn/2020072014414560.PNG#pic_center" alt="在这里插入图片描述"><br>其中𝑥是𝑛 × 1维的，因此结果为𝑘 × 1维度。注，不对方差特征进行处理。</p><h3 id="12-5-Choosing-The-Number-Of-Principal-Components"><a href="#12-5-Choosing-The-Number-Of-Principal-Components" class="headerlink" title="12.5 Choosing The Number Of Principal Components"></a>12.5 Choosing The Number Of Principal Components</h3><p>主要成分分析是减少投射的平均均方误差。</p><p>训练集的方差为：<img src="https://img-blog.csdnimg.cn/20200720145454169.PNG#pic_center" alt="在这里插入图片描述"><br>我们希望在平均均方误差与训练集方差的比例尽可能小的情况下选择尽可能小的𝑘值。如果我们希望这个比例小于 1%，就意味着原本数据的偏差有 99%都保留下来了，如果我们选择保留 95%的偏差，便能非常显著地降低模型中特征的维度了。<br><img src="https://img-blog.csdnimg.cn/20200720145626928.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们可以先令𝑘 = 1，然后进行主要成分分析，获得𝑈𝑟𝑒𝑑𝑢𝑐𝑒和𝑧，然后计算比例是否小于1%。如果不是的话再令𝑘 = 2，如此类推，直到找到可以使得比例小于 1%的最小𝑘 值（原因是各个特征之间通常情况存在某种相关性）。</p><p>还有一些更好的方式来选择𝑘，当我们在 Octave 中调用“svd”函数的时候，我们获得三个参数：[U, S, V] = svd(sigma)。<br><img src="https://img-blog.csdnimg.cn/20200720145716263.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中的𝑆是一个𝑛 × 𝑛的矩阵，只有对角线上有值，而其它单元都是 0，我们可以使用这个矩阵来计算平均均方误差与训练集方差的比例：<br><img src="https://img-blog.csdnimg.cn/20200720145822799.PNG#pic_center" alt="在这里插入图片描述"><br>也就是：<img src="https://img-blog.csdnimg.cn/20200720145856156.png#pic_center" alt="在这里插入图片描述"><br>在压缩过数据后，我们可以采用如下方法来近似地获得原有的特征：<br><img src="https://img-blog.csdnimg.cn/20200720145934745.PNG#pic_center" alt="在这里插入图片描述"></p><h3 id="12-6-Reconstruction-from-Compressed-Representation"><a href="#12-6-Reconstruction-from-Compressed-Representation" class="headerlink" title="12.6 Reconstruction from Compressed Representation"></a>12.6 Reconstruction from Compressed Representation</h3><p>PCA 作为压缩算法，可能把 1000 维的数据压缩 100 维特征，或具有三维数据压缩到一二维表示。所以，如果这是一个压缩算法，那么如何回到原有的高维数据的表示？<br><img src="https://img-blog.csdnimg.cn/20200720150332378.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如图中样本𝑥<sup>(1)</sup>,𝑥<sup>(2)</sup>，这些样本在图中这个二维平面上，然后只使用一个实数，比如𝑧<sup>(1)</sup>，指定这些点的位置后他们被投射到这一个一维曲线上。那么，给定一个点𝑧<sup>(1)</sup>，如何能把这些点还原为原始的二维空间呢？𝑥为 2 维，z 为 1 维，𝑧 = 𝑈<sub>𝑟𝑒𝑑𝑢𝑐𝑒</sub><sup>𝑇</sup> 𝑥，相反的方程为：<br><img src="https://img-blog.csdnimg.cn/20200720150949625.PNG#pic_center" alt="𝑥𝑎𝑝𝑝𝑜𝑥 = 𝑈𝑟𝑒𝑑𝑢𝑐𝑒 ⋅ 𝑧,𝑥𝑎𝑝𝑝𝑜𝑥 ≈ 𝑥。"><br>所以，这就是从低维表示𝑧回到未压缩的表示，得到了数据之前的原始数据 𝑥，也把这个过程称为重建原始数据。</p><h3 id="12-7-Advice-for-Applying-PCA"><a href="#12-7-Advice-for-Applying-PCA" class="headerlink" title="12.7 Advice for Applying PCA"></a>12.7 Advice for Applying PCA</h3><p>假使正在针对一张 100×100 像素的图片进行某个计算机视觉的机器学习，即总共有 10000 个特征。</p><ol><li>第一步是运用主要成分分析将数据压缩至 1000 个特征</li><li>然后对训练集运行学习算法。</li><li>在预测时，采用之前学习而来的𝑈𝑟𝑒𝑑𝑢𝑐𝑒将输入的特征𝑥转换成特征向量𝑧，然后再进行预测</li></ol><p>注：如果我们有交叉验证集合测试集，也采用对训练集学习而来的𝑈𝑟𝑒𝑑𝑢𝑐𝑒。</p><p>错误的主要成分分析情况：一个常见错误使用主要成分分析的情况是，将其用于减少过拟合（减少了特征的数量）。这样做非常不好，不如尝试正则化处理。原因在于主要成分分析只是近似地丢弃掉一些特征，它并不考虑任何与结果变量有关的信息，因此可能会丢失非常重要的特征。然而当我们进行正则化处理时，会考虑到结果变量，不会丢掉重要的数据。</p><p>另一个常见的错误是，默认地将主要成分分析作为学习过程中的一部分，这虽然很多时候有效果，但最好还是从所有原始特征开始，只在有必要的时候（算法运行太慢或者占用太多内存）才考虑采用主要成分分析。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200720151913225.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】11 聚类(Clustering)</title>
    <link href="http://yoursite.com/2020/07/19/[Machine%20Learning]%2011%20%E8%81%9A%E7%B1%BB(Clustering)/"/>
    <id>http://yoursite.com/2020/07/19/[Machine%20Learning]%2011%20%E8%81%9A%E7%B1%BB(Clustering)/</id>
    <published>2020-07-19T06:54:21.000Z</published>
    <updated>2020-07-19T06:56:01.549Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200719144836596.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="11-Clustering-聚类"><a href="#11-Clustering-聚类" class="headerlink" title="11 Clustering(聚类)"></a>11 Clustering(聚类)</h2><h3 id="11-1-Unsupervised-Learning-Introduction"><a href="#11-1-Unsupervised-Learning-Introduction" class="headerlink" title="11.1 Unsupervised Learning Introduction"></a>11.1 Unsupervised Learning Introduction</h3><p>在一个典型的监督学习中，训练集是有标签的，目标是找到能够区分正样本和负样本的决策边界，需要据此拟合一个假设函数。<br><img src="https://img-blog.csdnimg.cn/20200719131513611.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>与此不同的是，在非监督学习中，数据没有附带任何标签。<br><img src="https://img-blog.csdnimg.cn/20200719131548265.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里的一系列点是没有标签的。因此，训练集可以写成只有𝑥<sup>(1)</sup>,𝑥<sup>(2)</sup>…..一直到𝑥<sup>(𝑚)</sup>。也就是说，在非监督学习中，需要将一系列无标签的训练数据，输入到一个算法中，然后告诉这个算法，快去为我们找找这个数据的内在结构给定数据。图上的数据看起来可以分成两个分开的点集（称为簇），一个能够找到圈出的这些点集的算法，就被称为聚类算法。</p><p>那么聚类算法一般用来做什么呢？<br><img src="https://img-blog.csdnimg.cn/20200719131923129.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>市场分割。在数据库中存储了许多客户的信息，希望将他们分成不同的客户群，这样可以对不同类型的客户分别销售产品或者分别提供更适合的服务。</li><li>社交网络分析。事实上有许多研究人员正在研究这样一些内容，他们关注社交网络，例如 Facebook，Google+，或者是其他的一些信息，比如说：你经常跟哪些人联系，而这些人又经常给哪些人发邮件，由此找到关系密切的人群。因此，这可能需要另一个聚类算法，通过它发现社交网络中关系密切的朋友。</li><li>更好的组织计算机集群，或者更好的管理数据中心。因为如果知道数据中心中哪些计算机经常协作工作。那么，可以重新分配资源，重新布局网络。由此优化数据中心，优化数据通信。</li><li>了解星系的形成。然后用这个知识，了解一些天文学上的细节问题。</li></ul><h3 id="11-2-K-Means-Algorithm"><a href="#11-2-K-Means-Algorithm" class="headerlink" title="11.2 K-Means Algorithm"></a>11.2 K-Means Algorithm</h3><p>K-均值是最普及的聚类算法，算法接收一个未标记的数据集，然后将数据聚类成不同的组。</p><p>K-均值是一个迭代算法，假设我们想要将数据聚类成 n 个组，其方法为:</p><ol><li>首先选择𝐾个随机的点，称为聚类中心（cluster centroids）；</li><li>对于数据集中的每一个数据，按照距离𝐾个中心点的距离，将其与距离最近的中心点关联起来，与同一个中心点关联的所有点聚成一类。</li><li>计算每一个组的平均值，将该组所关联的中心点移动到平均值的位置。</li><li>重复步骤 2-4 直至中心点不再变化。</li></ol><p>下面是一个聚类示例：<br><img src="https://img-blog.csdnimg.cn/20200719140308547.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719140330295.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>迭代多次以后，结果为：<img src="https://img-blog.csdnimg.cn/20200719140423526.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用𝜇<sup>1</sup>,𝜇<sup>2</sup>,…,𝜇<sup>𝑘</sup> 来表示聚类中心，用𝑐<sup>(1)</sup>,𝑐<sup>(2)</sup>,…,𝑐<sup>(𝑚)</sup>来存储与第𝑖个实例数据最近的聚类中心的索引，K-均值算法的伪代码如下：<br><img src="https://img-blog.csdnimg.cn/20200719140716133.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>算法分为两个步骤，第一个 for 循环是赋值步骤，即：对于每一个样例𝑖，计算其应该属于的类。第二个 for 循环是聚类中心的移动，即：对于每一个类𝐾，重新计算该类的质心。</p><p>K-均值算法也可以很便利地用于将数据分为许多不同组，即使在没有非常明显区分的组群的情况下也可以。下图所示的数据集包含身高和体重两项特征构成的，利用 K-均值算法将数据分为三类，用于帮助确定将要生产的 T-恤衫的三种尺寸。<br><img src="https://img-blog.csdnimg.cn/20200719140859116.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="11-3-Optimization-Objective"><a href="#11-3-Optimization-Objective" class="headerlink" title="11.3 Optimization Objective"></a>11.3 Optimization Objective</h3><p>K-均值最小化问题，是要最小化所有的数据点与其所关联的聚类中心点之间的距离之和，因此 K-均值的代价函数（又称畸变函数 Distortion function）为：<br><img src="https://img-blog.csdnimg.cn/20200719141101932.PNG#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719142033802.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>其中𝜇<sub>𝑐</sub>(𝑖)代表与𝑥(𝑖)最近的聚类中心点。 我们的优化目标便是找出使得代价函数最小的 𝑐<sup>(1)</sup>,𝑐<sup>(2)</sup>,…,𝑐<sup>(𝑚)</sup>和𝜇<sup>1</sup>,𝜇<sup>2</sup>,…,𝜇<sup>𝑘</sup> ：<br><img src="https://img-blog.csdnimg.cn/20200719141605420.PNG#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719141817692.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第一个循环是用于减小𝑐(𝑖)引起的代价，而第二个循环则是用于减小𝜇𝑖引起的代价。迭代的过程一定会是每一次迭代都在减小代价函数，不然便是出现了错误。</p><h3 id="11-4-Random-Initialization"><a href="#11-4-Random-Initialization" class="headerlink" title="11.4 Random Initialization"></a>11.4 Random Initialization</h3><p>在运行 K-均值算法的之前，首先要随机初始化所有的聚类中心点，具体步骤：</p><ol><li>应该选择𝐾 &lt; 𝑚，即聚类中心点的个数要小于所有训练集实例的数量</li><li>随机选择𝐾个训练实例，然后令𝐾个聚类中心分别与这𝐾个训练实例相等</li></ol><p>K-均值的一个问题在于，它有可能会停留在一个局部最小值处，而这取决于初始化的情况。<br><img src="https://img-blog.csdnimg.cn/20200719142726248.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>为了解决这个问题，通常需要多次运行 K-均值算法，每一次都重新进行随机初始化，最后再比较多次运行 K-均值的结果，选择代价函数最小的结果。这种方法在𝐾较小的时候（2–10）还是可行的，但是如果𝐾较大，这么做也可能不会有明显地改善。<br><img src="https://img-blog.csdnimg.cn/20200719143202386.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="11-5-Choosing-the-Number-of-Clusters"><a href="#11-5-Choosing-the-Number-of-Clusters" class="headerlink" title="11.5 Choosing the Number of Clusters"></a>11.5 Choosing the Number of Clusters</h3><p>没有所谓最好的选择聚类数的方法，通常是需要根据不同的问题，人工进行选择的。选择的时候思考运用 K-均值算法聚类的动机是什么，然后选择能最好服务于该目的标聚类数。</p><p>当人们在讨论，选择聚类数目的方法时，有一个可能会谈及的方法叫作“肘部法则”。关于“肘部法则”，我们所需要做的是改变𝐾值，也就是聚类类别数目的总数。用一个聚类来运行 K 均值聚类方法。这就意味着，所有的数据都会分到一个聚类里，然后计算成本函数或者计算畸变函数𝐽。<br><img src="https://img-blog.csdnimg.cn/20200719144322108.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图左边一条类似于一个人的肘部的曲线，这就是 <label style="color:red">“肘部法则”</label> 所做的。好像人的手臂，如果你伸出胳膊，那么这就是你的肩关节、肘关节、手。这就是“肘部法则”。在这种模式下，它的畸变值会迅速下降，从 1 到 2，从 2 到 3 之后，你会在 3 的时候达到一个肘点。在此之后，畸变值就下降的非常慢，看起来就像使用 3 个聚类来进行聚类是正确的，这是因为那个点是曲线的肘点，畸变值下降得很快，𝐾 = 3之后就下降得很慢，那么我们就选𝐾 = 3。当应用“肘部法则”的时候，如果得到了一个像上面这样的图，那么这将是一种用来选择聚类个数的合理方法。</p><p>例如，在 T-恤制造例子中，将用户按照身材聚类，可以分成 3 个尺寸:𝑆, 𝑀, 𝐿，也可以分成 5 个尺寸𝑋𝑆, 𝑆, 𝑀, 𝐿,𝑋𝐿，这样的选择是建立在回答“聚类后制造的 T-恤是否能较好地适合客户”这个问题的基础上作出的。<img src="https://img-blog.csdnimg.cn/20200719144333799.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="聚类参考资料"><a href="#聚类参考资料" class="headerlink" title="聚类参考资料"></a>聚类参考资料</h3><p><img src="https://img-blog.csdnimg.cn/20200719145128563.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719145150498.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200719145204814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200719144836596.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Clustering" scheme="http://yoursite.com/tags/Clustering/"/>
    
      <category term="K-Means" scheme="http://yoursite.com/tags/K-Means/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】10 支持向量机(Support Vector Machines)</title>
    <link href="http://yoursite.com/2020/07/18/[Machine%20Learning]%2010%20%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA(Support%20Vector%20Machines)/"/>
    <id>http://yoursite.com/2020/07/18/[Machine%20Learning]%2010%20%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA(Support%20Vector%20Machines)/</id>
    <published>2020-07-18T10:19:53.000Z</published>
    <updated>2020-07-19T06:55:16.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200718181732448.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="10-Support-Vector-Machines-支持向量机"><a href="#10-Support-Vector-Machines-支持向量机" class="headerlink" title="10 Support Vector Machines(支持向量机)"></a>10 Support Vector Machines(支持向量机)</h2><h3 id="10-1-Optimization-Objective-优化目标"><a href="#10-1-Optimization-Objective-优化目标" class="headerlink" title="10.1  Optimization Objective(优化目标)"></a>10.1  Optimization Objective(优化目标)</h3><p>在监督学习中，许多学习算法的性能都非常类似，因此，重要的不是该选择使用学习算法 A 还是学习算法 B，而是应用这些算法时，所创建的大量数据表现情况通常依赖于你的水平。比如：你为学习算法所设计的特征量的选择，以及如何选择正则化参数，诸如此类的事。还有一个更加强大的算法广泛的应用于工业界和学术界，它被称为<label style="color:red">支持向量机(Support Vector Machine)</label>。与逻辑回归和神经网络相比，支持向量机，或者简称 SVM，在学习复杂的非线性方程时提供了一种更为清晰，更加强大的方式。</p><p>为了描述支持向量机，将从逻辑回归开始展示如何一点一点修改来得到本质上的支持向量机。<br><img src="https://img-blog.csdnimg.cn/20200716133202535.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>现在考虑下想要逻辑回归做什么：如果有一个 𝑦 = 1的样本，不管是在训练集中或是在测试集中，又或者在交叉验证集中，总之是 𝑦 = 1，现在希望ℎ𝜃(𝑥) 趋近 1。因为想要正确地将此样本分类，这就意味着当 ℎ𝜃(𝑥)趋近于 1 时，𝜃<sup>𝑇</sup>𝑥 应当远大于 0，此时逻辑回归的输出将趋近于 1。相反地，如果有另一个样本，即𝑦 = 0。希望假设函数的输出值将趋近于 0，这对应于𝜃<sup>𝑇</sup>𝑥 应远小于 0，对应的假设函数的输出值趋近 0。</p><p><img src="https://img-blog.csdnimg.cn/20200716133758296.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果进一步观察逻辑回归的代价函数，会发现每个样本 (𝑥, 𝑦)都会为总代价函数，增加这里的一项，<img src="https://img-blog.csdnimg.cn/20200716135237497.png#pic_center" alt="在这里插入图片描述"><br>因此，对于总代价函数通常会有对所有的训练样本求和，并且这里还有一个1/𝑚项，但是，在逻辑回归中，这里的这一项就是表示一个训练样本所对应的表达式。如果将完整定义的假设函数代入这里。那么，就会得到每一个训练样本都影响这一项。现在，先忽略 1/𝑚 这一项，一起来考虑两种情况：一种是𝑦等于 1 的情况；另一种是 𝑦 等于 0 的情况。</p><p>在第一种情况中，假设 𝑦 = 1 ，此时在目标函数中只需有第一项起作用，因为𝑦 = 1时，(1 − 𝑦)项将等于 0。因此，当在 𝑦 = 1 的样本中时，得到<img src="https://img-blog.csdnimg.cn/20200716135757484.PNG#pic_center" alt="在这里插入图片描述"><br>这样一项。</p><p>用 𝑧 表示𝜃<sup>𝑇</sup>𝑥 ，即： 𝑧 = 𝜃<sup>𝑇</sup>𝑥 。画出关于𝑧 的函数，得到左下角的这条曲线，可以看到，当𝑧 增大时，对应的值会变的非常小。对整个代价函数而言，影响也非常小。这也就解释了，为什么逻辑回归在观察到正样本𝑦 = 1时，试图将𝜃<sup>𝑇</sup>𝑥 设置得非常大。因为，在代价函数中的这一项会变的非常小。</p><p>现在开始建立支持向量机，从这个代价函数开始，也就是<img src="https://img-blog.csdnimg.cn/20200716135757484.PNG#pic_center" alt="在这里插入图片描述"><br>一点一点修改，取这里的𝑧 = 1点，先画出将要用的代价函数。新的代价函数（紫红色）将会水平的从z=1到右边，然后再在左边画一条同逻辑回归非常相似的直线。那么，到了这里已经非常接近逻辑回归中使用的代价函数了。只是这里是由两条线段组成，即位于右边的水平部分和位于左边的直线部分，先不考虑左边直线部分的斜率，这并不是很重要。<br><img src="https://img-blog.csdnimg.cn/20200716140253965.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这同逻辑回归中类似的事情，并且为支持向量机，带来计算上的优势。例如，更容易计算股票交易的问题等等。</p><p>当𝑦 = 0时，此时代价函数只留下了第二项。<br><img src="https://img-blog.csdnimg.cn/20200716141707606.PNG#pic_center" alt="在这里插入图片描述"><br>并且，如果将这一项作为𝑧的函数，那么，就会得到横轴𝑧。同理得到如下图像。<br><img src="https://img-blog.csdnimg.cn/20200716141839387.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果用一个新的代价函数来代替，即这条从 0 点开始的水平直线，然后是一条斜线，像上图。那么，现在给这两个方程命名，左边的函数，称之为cos𝑡1(𝑧)，同时，右边函数我称它为cos𝑡0(𝑧)。这里的下标是指在代价函数中，对应的 𝑦 = 1 和 𝑦 = 0 的情况，拥有了这些定义后，现在就开始构建支持向量机。<br><img src="https://img-blog.csdnimg.cn/20200716142211885.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是在逻辑回归中使用代价函数𝐽(𝜃)，对于支持向量机而言，实质上要将这替换为cos𝑡<sub>1</sub>(𝑧)，也就是cos𝑡<sub>1</sub>(𝜃<sup>𝑇</sup>𝑥)，同样地，我也将这一项替换为cos𝑡<sub>0</sub>(𝑧)，也就是代价cos𝑡<sub>0</sub>(𝜃<sup>𝑇</sup>𝑥 )。因此，对于支持向量机，得到了这里的最小化问题，即:<br><img src="https://img-blog.csdnimg.cn/202007161432520.PNG#pic_center" alt="在这里插入图片描述"><br>首先，要除去1/𝑚这一项，这仅仅是由于人们使用支持向量机时，对比于逻辑回归而言，不同的习惯所致。1/𝑚 仅是个常量，因此，在这个最小化问题中，无论前面是否有1/𝑚 这一项，最终所得到的最优值𝜃都是一样的。</p><p>第二点概念上的变化，只是指在使用支持向量机时，一些如下的标准惯例，而不是逻辑回归。对于逻辑回归，在目标函数中，有两项：第一个是训练样本的代价，第二个是正则化项，我们不得不去用这一项来平衡。这就相当于想要最小化𝐴加上正则化参数𝜆，然后乘以其他项𝐵。这里的𝐴、B分别表示第一项和第二项，但不包括𝜆。这里实际上不是优化𝐴 + 𝜆 × 𝐵，而是通过设置不同正则参数𝜆达到优化目的。这样，就能够权衡对应的项，使得训练样本拟合的更好。即最小化𝐴。但对于支持向量机，使用C替换这里使用的𝜆来权衡这两项，同时改为优化目标，𝐶 × 𝐴 + 𝐵。在逻辑回归中，如果给定𝜆，一个非常大的值，意味着给予 B 更大的权重。而这里，就对应于将𝐶 设定为非常小的值，那么，相应的将会给𝐵比给𝐴更大的权重。因此，这只是一种不同的方式来控制这种权衡或者一种不同的方法，即用参数来决定是更关心第一项的优化，还是更关心第二项的优化。当然也可以把这里的参数𝐶 考虑成1/𝜆，同 1/𝜆所扮演的角色相同，并且这两个方程或这两个表达式并不相同，因为𝐶 = 1/𝜆，但是也并不全是这样，如果当𝐶 = 1/𝜆时，这两个优化目标应当得到相同的值，相同的最优值 𝜃。那么，𝜆用常数𝐶来代替，这就得到了在支持向量机中的整个优化目标函数，然后最小化这个目标函数，得到 SVM 学习到的参数𝐶。<img src="https://img-blog.csdnimg.cn/20200716143445357.PNG#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/2020071614341664.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后有别于逻辑回归输出的概率。当最小化代价函数，获得参数𝜃时，支持向量机所做的是它来直接预测𝑦的值等于 1，还是等于 0。当𝜃<sup>𝑇</sup>𝑥大于或者等于 0 时，这个假设函数会预测 1；否则为0。</p><h3 id="10-2-Large-Margin-Intuition-直观上对大间距的理解"><a href="#10-2-Large-Margin-Intuition-直观上对大间距的理解" class="headerlink" title="10.2 Large Margin Intuition(直观上对大间距的理解)"></a>10.2 Large Margin Intuition(直观上对大间距的理解)</h3><p>人们有时将支持向量机看作是大间距分类器。<br><img src="https://img-blog.csdnimg.cn/20200716151046664.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是支持向量机模型的代价函数，左边是关于 z 的代价函cos𝑡1(𝑧)，此函数用于正样本，而在右边是关于𝑧的代价函数cos𝑡0(𝑧)。</p><p>现在思考一下，最小化这些代价函数的必要条件是什么。如果有一个正样本，𝑦 = 1，则只有在𝑧 &gt;= 1时，代价函数cos𝑡1(𝑧)才等于 0。反之，如果𝑦 = 0，函数cos𝑡0(𝑧)只有在𝑧 &lt;= 1的区间里函数值为 0。事实上，如果一个正样本𝑦 = 1，则其实仅仅要求𝜃<sup>𝑇</sup>𝑥大于等于 0，就能将该样本恰当分出，这是因为如果𝜃<sup>𝑇</sup>𝑥&gt;0 大的话，模型代价函数值为 0，类似地，如果有一个负样本，则仅需要𝜃<sup>𝑇</sup>𝑥&lt;=0 就会将负例正确分离，但是，支持向量机的要求更高，不仅仅要能正确分开输入的样本。即不仅仅要求𝜃<sup>𝑇</sup>𝑥&gt;0，要的是比 0 值大很多，比如大于等于1，也想这个比 0 小很多，比如希望它小于等于-1，这就相当于在支持向量机中嵌入了一个<label style="color:red">额外的安全因子</label>，或者说<label style="color:red">安全的间距因子</label>。</p><p>在支持向量机中，这个因子会导致什么结果。例如，将这个常数𝐶设置成一个非常大的值，比如假设𝐶的值为 100000 或者其它非常大的数，然后来观察支持向量机会给出什么结果？<br><img src="https://img-blog.csdnimg.cn/20200716154456301.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果 𝐶非常大，则最小化代价函数的时候，将会很希望找到一个使第一项为 0 的最优解。因此，假设第一项为 0的情形下理解该优化问题 。可以知道输入一个训练样本标签为𝑦 = 1，想令第一项为 0，需要做的是找到一个𝜃，使得𝜃<sup>𝑇</sup>𝑥 &gt;= 1，类似地，对于一个训练样本，标签为𝑦 = 0，为了使cos𝑡0(𝑧) 函数的值为 0，需要𝜃<sup>𝑇</sup>𝑥 &lt;= −1。现在考虑的优化问题，将选择参数使第一项为 0，得𝐶乘以 0 加上二分之一乘以第二项。这里第一项是𝐶乘以 0，因此可以将其删去。这将遵从以下的约束：如果 𝑦(𝑖)是等于 1 ，𝜃<sup>𝑇</sup>𝑥(𝑖) &gt;= 1；如果 𝑦(𝑖)是等于 0，𝜃<sup>𝑇</sup>𝑥(𝑖) &lt;= −1。这样当求解这个优化问题的时候，会得到一个非常有趣的决策边界。<br><img src="https://img-blog.csdnimg.cn/20200716155700363.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>具体而言，如果一个数据集中有正样本，也有负样本，可以看到这个数据集是线性可分的。即，存在一条直线把正负样本分开。当然有多条不同的直线，可以把正样本和负样本完全分开。</p><p>另外，也存在仅仅可以勉强将正样本和负样本分开的决策边界，这些决策边界看起来都不是特别好的选择。支持向量机将会选择这个黑色的决策边界，因为在分离正样本和负样本上，相较于粉色或者绿色画的决策界，黑色显得的更好。从数学的角度来说，这条黑线有更大的距离，这个距离叫做间距(margin)。<br><img src="https://img-blog.csdnimg.cn/20200716155952938.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当画出两条额外的蓝线，可以看到黑色的决策边界和训练样本之间有更大的最短距离。然而粉线和蓝线离训练样本就非常近，在分离样本的时候就会比黑线表现差。因此，这个距离叫做<label style="color:red">支持向量机的间距</label>，而这是支持向量机具有鲁棒性的原因，因为它努力用一个最大间距来分离样本。因此支持向量机有时被称为大间距分类器。</p><blockquote><p>鲁棒是Robust的音译，也就是健壮和强壮的意思。它也是在异常和危险情况下系统生存的能力。比如说，计算机软件在输入错误、磁盘故障、网络过载或有意攻击情况下，能否不死机、不崩溃，就是该软件的鲁棒性。所谓“鲁棒性”，也是指控制系统在一定（结构，大小）的参数摄动下，维持其它某些性能的特性。</p></blockquote><p>如上所述，将这个大间距分类器中的正则化因子常数𝐶设置的非常大，将选择这样的决策界，从而最大间距地分离开正样本和负样本。那么在让代价函数最小化的过程中，希望找出在𝑦 = 1和𝑦 = 0两种情况下都使得代价函数中左边的这一项尽量为零的参数。如果找到了这样的参数，则最小化问题便转变成：<br><img src="https://img-blog.csdnimg.cn/20200716161707282.PNG#pic_center" alt="在这里插入图片描述"><br>事实上，支持向量机现在要比这个大间距分类器所体现得更成熟，尤其是当使用大间距分类器的时候，学习算法会受异常点(outlier) 的影响。比如加入一个额外的正样本。<br><img src="https://img-blog.csdnimg.cn/20200716161955550.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时，为了将样本用最大间距分开，也许最终会得到一条类似粉色这样的决策边界。仅仅基于一个异常值，仅仅基于一个样本，就将决策边界从黑线变成粉线，这实在是不明智的。事实上，将正则化参数𝐶设置的非常大，正是支持向量机将会做的。但是如果C设置的小一点，则最终会得到这条黑线，当然数据如果不是线性可分的，正样本和负样本混在一起，则支持向量机也会将它们恰当分开。因此，大间距分类器的描述，仅仅是从直观上给出了正则化参数𝐶非常大的情形，同时，记住𝐶的作用类似于1/𝜆，𝜆是之前使用过的正则化参数。这只是𝐶非常大的情形，或者等价地 𝜆 非常小的情形。最终会得到类似粉线这样的决策界，但是实际上应用支持向量机的时候，当𝐶不是非常非常大的时候，它可以忽略掉一些异常点的影响，得到更好的决策界。甚至当数据不是线性可分的时候，支持向量机也可以给出好的结果。</p><p>回顾 𝐶 = 1/𝜆，因此：</p><ul><li>𝐶 较大时，相当于 𝜆 较小，可能会导致过拟合，高方差。</li><li>𝐶 较小时，相当于 𝜆 较大，可能会导致低拟合，高偏差。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200716161456209.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="10-3-Mathematics-Behind-Large-Margin-Classification"><a href="#10-3-Mathematics-Behind-Large-Margin-Classification" class="headerlink" title="10.3 Mathematics Behind Large Margin Classification"></a>10.3 Mathematics Behind Large Margin Classification</h3><p><img src="https://img-blog.csdnimg.cn/20200718143324125.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下面就是先前给出的支持向量机模型中的目标函数。<br><img src="https://img-blog.csdnimg.cn/20200718143449168.PNG#pic_center" alt="在这里插入图片描述"><br>接下来忽略掉截距，令𝜃0 = 0，这样更容易画示意图。将特征数𝑛置为 2，因此仅有两个特征𝑥1, 𝑥2，式子可以写作：<img src="https://img-blog.csdnimg.cn/20200718144012599.PNG#pic_center" alt="在这里插入图片描述">只有两个参数𝜃1, 𝜃2。括号里面的这一项是向量𝜃的范数，或者说是向量𝜃的长度。即，如果将向量𝜃写出来，那么刚刚画红线的这一项就是向量𝜃的长度或范数。这里用的是之前学过的向量范数的定义，事实上这就等于向量𝜃的长度。<br><img src="https://img-blog.csdnimg.cn/20200718143708543.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以将其写作𝜃0, 𝜃1, 𝜃2，如果𝜃0 = 0，那就是𝜃1, 𝜃2的长度。忽略𝜃0，这样来写𝜃的范数，它仅仅和𝜃1, 𝜃2有关。但是，数学上不管你是否包含，其实并没有差别，因此在接下来的推导中去掉𝜃0不会有影响这意味着我们的目标函数是等于1/2 ||θ||<sup>2</sup>。因此支持向量机做的全部事情，就是<strong>极小化参数向量𝜃范数的平方，或者说长度的平方。</strong></p><p>可知，约束条件θ<sup>T</sup>x<sup>(i)</sup>&gt;=1或者θ<sup>T</sup>x<sup>(i)</sup>&lt;-1可以被p<sup>(i)</sup>·||θ||&gt;=1所替换。因为θ<sup>T</sup>x<sup>(i)</sup> = p<sup>(i)</sup>·||θ|| ，将其写入优化目标。将会得到没有了约束，θ<sup>T</sup>x<sup>(i)</sup>而变成了p<sup>(i)</sup>·||θ||。<br><img src="https://img-blog.csdnimg.cn/20200718144929142.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>比如下面这个样本，假设第一个样本是𝑥<sup>(1)</sup>，这个样本到参数𝜃的投影，是短的红线段，就等于𝑝<sup>(1)</sup>，它非常短。类似地，如果它恰好是𝑥<sup>(2)</sup>，则它到𝜃的投影是短的粉色线段是𝑝<sup>(2)</sup>，即第二个样本到参数向量𝜃的投影。𝑝<sup>(2)</sup>事实上是一个负值，𝑝<sup>(2)</sup>是在相反的方向，这个向量和参数向量𝜃的夹角大于 90 度。<br><img src="https://img-blog.csdnimg.cn/20200718151310395.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以发现这些𝑝<sup>(𝑖)</sup>将会是非常小的数，因此当考察优化目标函数的时候，对于正样本而言，需要p<sup>(i)</sup>·||θ|| &gt;= 1，但是如果 𝑝<sup>(𝑖)</sup>在这里非常小，那就意味着𝜃的范数非常大。因为如果 𝑝<sup>(1)</sup> 很小,而希望p<sup>(1)</sup>·||θ||&gt;= 1 ，令其实现的唯一的办法就是这两个数较大。如果 𝑝<sup>(1)</sup> 小，就希望𝜃的范数大。类似地，对于负样本而言需要p<sup>(2)</sup>·||θ||&lt;= −1，𝜃的范数变大。但是目标函数是希望找到一个参数𝜃，它的范数是小的。因此，这看起来不像是一个好的参数向量𝜃的选择。</p><p>相反地，看一个不同的决策边界。比如说，支持向量机选择了垂直线这个决策界，这就是相对应的参数𝜃的方向。根据线性代数的知识，可知这个绿色的决策界有一个垂直于它的向量𝜃。现在如果考察数据在横轴𝑥上的投影，比如样本𝑥<sup>(1)</sup>，当将它投影到横轴𝑥上，或投影到𝜃上，就会得到这样𝑝<sup>(1)</sup>，它的长度是𝑝<sup>(1)</sup>。另一个样本是𝑥<sup>(2)</sup>，投影发现，𝑝<sup>(2)</sup>的长度是负值。可以发现𝑝<sup>(1)</sup>和𝑝<sup>(2)</sup>这些投影长度比上例中长多了。如果仍然要满足约束，p<sup>(i)</sup>·||θ||&gt;1，则因为𝑝<sup>(1)</sup>变大了，𝜃的范数就可以变小了。因此这意味着通过选择右边的决策界，而不是左边的那个，支持向量机可以使参数𝜃的范数变小很多。因此，如果想令𝜃的范数变小，从而令𝜃范数的平方变小，就能让支持向量机选择右边的决策界。这就是支持向量机如何能有效地产生大间距分类的原因。<br><img src="https://img-blog.csdnimg.cn/20200718152948680.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图中这个绿色的决策界，满足正样本和负样本投影到𝜃的值大。这是大间距决策界来区分开正样本和负样本这个间距的值。这个间距的值就是𝑝<sup>(1)</sup>, 𝑝<sup>(2)</sup>, 𝑝<sup>(3)</sup>等等的值。通过让间距变大，即通过这些𝑝<sup>(1)</sup>, 𝑝<sup>(2)</sup>, 𝑝<sup>(3)</sup>等等的值，支持向量机最终可以找到一个较小的𝜃范数。这正是支持向量机中最小化目标函数的目的。</p><p>以上就是为什么支持向量机最终会找到大间距分类器的原因。因为它试图极大化这些𝑝<sup>(𝑖)</sup>的范数，它们是训练样本到决策边界的距离。最后一点，以上推导自始至终使用了简化假设——参数𝜃0 = 0。这个的作用是：𝜃0 = 0的意思是让决策界通过原点。如果令𝜃0不是 0 的话，含义就是希望决策界不通过原点。</p><p>另外，即便𝜃0不等于 0，支持向量机要做的事情都是优化这个目标函数对应着𝐶值非常大的情况，但是可以说明的是，即便𝜃0不等于 0，支持向量机仍然会找到正样本和负样本之间的大间距分隔。</p><h3 id="10-4-Kernels-核函数"><a href="#10-4-Kernels-核函数" class="headerlink" title="10.4 Kernels(核函数)"></a>10.4 Kernels(核函数)</h3><p><img src="https://img-blog.csdnimg.cn/20200718160658734.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>为了获得上图所示的判定边界，模型可能是𝜃0 + 𝜃1𝑥1 + 𝜃2𝑥2 + 𝜃3𝑥1𝑥2 + 𝜃4𝑥1<sup>2</sup> +𝜃5𝑥2<sup>2</sup> + ⋯的形式。</p><p>可以用一系列的新的特征 f 来替换模型中的每一项。例如令： 𝑓1 = 𝑥1, 𝑓2 = 𝑥2, 𝑓3 =𝑥1𝑥2, 𝑓4 = 𝑥1<sup>2</sup>, 𝑓5 = 𝑥2<sup>2</sup>…得到ℎ𝜃(𝑥) = 𝑓1 + 𝑓2+. . . +𝑓𝑛。然而，除了对原有的特征进行组合以外，有没有更好的方法来构造𝑓1, 𝑓2, 𝑓3？可以利用核函数来计算出新的特征。</p><p>给定一个训练实例 𝑥 ，我们利用 𝑥 的各个特征与我们预先选定的地标(landmarks) 𝑙<sup>(1)</sup>, 𝑙<sup>(2)</sup>, 𝑙<sup>(3)</sup>的近似程度来选取新的特征𝑓1, 𝑓2, 𝑓3。<br><img src="https://img-blog.csdnimg.cn/20200718161237110.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例如，<img src="https://img-blog.csdnimg.cn/20200718161533756.PNG#pic_center" alt="在这里插入图片描述"><br>其中，<img src="https://img-blog.csdnimg.cn/20200718161600192.PNG#pic_center" alt="在这里插入图片描述"><br>为实例𝑥中所有特征与地标𝑙<sup>(1)</sup>之间的距离的和。</p><p>上例中的𝑠𝑖𝑚𝑖𝑙𝑎𝑟𝑖𝑡𝑦(𝑥, 𝑙<sup>(1)</sup>)就是核函数，具体而言，这里是一个<label style="color:red">高斯核函数(Gaussian Kernel)</label>。注：这个函数与正态分布没什么实际上的关系，只是看上去像而已。</p><p>这些地标的作用是什么？如果一个训练实例𝑥与地标𝐿之间的距离近似于 0，则新特征f 近似于𝑒<sup>−0</sup> = 1，如果训练实例𝑥与地标𝐿之间距离较远，则𝑓近似于𝑒<sup>−(一个较大的数)</sup> = 0。</p><p>假设训练实例含有两个特征[𝑥1 𝑥2]，给定地标𝑙<sup>(1)</sup>与不同的𝜎值，见下图：<br><img src="https://img-blog.csdnimg.cn/2020071816570134.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>图中水平面的坐标为 𝑥1，𝑥2而垂直坐标轴代表𝑓。可以看出，只有当𝑥与𝑙<sup>(1)</sup>重合时𝑓才具有最大值。随着𝑥的改变𝑓值改变的速率受到𝜎<sup>2</sup>的控制。</p><p>在下图中，当实例处于洋红色的点位置处，因为其离𝑙<sup>(1)</sup>更近，但是离𝑙<sup>(2)</sup>和𝑙<sup>(3)</sup>较远，因此𝑓1接近 1，而𝑓2,𝑓3接近 0。因此ℎ𝜃(𝑥) = 𝜃0 + 𝜃1𝑓1 + 𝜃2𝑓2 + 𝜃1𝑓3 &gt; 0，预测𝑦 = 1。同理可以求出，对于离𝑙<sup>(2)</sup>较近的绿色点，也预测𝑦 = 1，但是对于蓝绿色的点，因为其离三个地标都较远，预测𝑦 = 0。<br><img src="https://img-blog.csdnimg.cn/20200718170436415.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样，图中红色的封闭曲线所表示的范围，便是依据一个单一的训练实例和选取的地标所得出的判定边界，在预测时，采用的特征不是训练实例本身的特征，而是通过核函数计算出的新特征𝑓1, 𝑓2, 𝑓3。</p><p><strong>如何选择地标？</strong><br>通常是根据训练集的数量选择地标的数量，即如果训练集中有𝑚个实例，则选<br>取𝑚个地标，并且令:𝑙<sup>(1)</sup> = 𝑥<sup>(1)</sup>, 𝑙<sup>(2)</sup> = 𝑥<sup>(2)</sup>, . . . . . , 𝑙<sup>(m)</sup> = 𝑥<sup>(m)</sup>。这样做的好处在于：得到的新特征是建立在原有特征与训练集中所有其他特征之间距离的基础之上的，即：<br><img src="https://img-blog.csdnimg.cn/20200718172124963.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200718172407635.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>下面将核函数运用到支持向量机中，修改支持向量机假设为：<br>给定𝑥，计算新特征𝑓，当𝜃<sup>𝑇</sup>𝑓 &gt;= 0 时，预测 𝑦 = 1，否则反之。</p><p>相应地修改代价函数为：<img src="https://img-blog.csdnimg.cn/20200718172655971.PNG#pic_center" alt="在这里插入图片描述"><br>，<br><img src="https://img-blog.csdnimg.cn/20200718172729787.PNG#pic_center" alt="在这里插入图片描述"><br>在具体实施过程中，还需要对最后的正则化项进行些微调整，在计算<img src="https://img-blog.csdnimg.cn/20200718172813904.PNG#pic_center" alt="在这里插入图片描述"><br>时，用𝜃<sup>𝑇</sup>𝑀𝜃代替𝜃<sup>𝑇</sup>𝜃，其中𝑀是根据选择的核函数而不同的一个矩阵。这样做的原因是为了简化计算。理论上讲，也可以在逻辑回归中使用核函数，但是上面使用 𝑀来简化计算的方法不适用与逻辑回归，因此计算将非常耗费时间。</p><p>另外，支持向量机也可以不使用核函数，不使用核函数又称为<label style="color:red">线性核函数(linear kernel)</label>，当不采用非常复杂的函数，或者训练集特征非常多而实例非常少的时候，可以采用这种不带核函数的支持向量机。</p><p>下面是支持向量机的两个参数𝐶和𝜎的影响：</p><ul><li>𝐶 = 1/𝜆</li><li>𝐶 较大时，相当于𝜆较小，可能会导致过拟合，高方差；</li><li>𝐶 较小时，相当于𝜆较大，可能会导致低拟合，高偏差；</li><li>𝜎较大时，可能会导致低方差，高偏差；</li><li>𝜎较小时，可能会导致低偏差，高方差。</li></ul><h3 id="10-5-Using-An-SVM"><a href="#10-5-Using-An-SVM" class="headerlink" title="10.5 Using An SVM"></a>10.5 Using An SVM</h3><p>在高斯核函数之外还有其他一些选择，如：<br>多项式核函数（Polynomial Kernel）<br>字符串核函数（String kernel）<br>卡方核函数（ chi-square kernel）<br>直方图交集核函数（histogram intersection kernel）<br>等等…<br>这些核函数的目标也都是根据训练集和地标之间的距离来构建新特征，这些核函数需要满足 Mercer’s 定理，才能被支持向量机的优化软件正确处理。</p><p><strong>多类分类问题</strong><br>假设利用之前介绍的一对多方法来解决一个多类分类问题。如果一共有𝑘个类，则需要𝑘个模型，以及𝑘个参数向量𝜃。同样也可以训练𝑘个支持向量机来解决多类分类问题。但是大多数支持向量机软件包都有内置的多类分类功能，我们只要直接使用即可。</p><p>尽管不需要自己写 SVM 的优化软件，但是也需要做几件事：<br>1、是提出参数𝐶的选择。<br>2、需要选择内核参数或想要使用的相似函数，其中一个选择是：选择不需要任何内核参数，没有内核参数的理念，也叫线性核函数。因此，如果有人说他使用了线性核的 SVM，这就意味这他使用了不带有核函数的 SVM。</p><p><strong>在逻辑回归模型和支持向量机模型之间，应该如何选择？</strong></p><p>下面是一些普遍使用的准则：<br>𝑛为特征数，𝑚为训练样本数。</p><ul><li>(1)如果相较于𝑚而言，𝑛要大许多，即训练集数据量不够支持我们训练一个复杂的非线性模型，我们选用逻辑回归模型或者不带核函数的支持向量机。</li><li>(2)如果𝑛较小，而且𝑚大小中等，例如𝑛在 1-1000 之间，而𝑚在 10-10000 之间，使用高斯核函数的支持向量机。</li><li>(3)如果𝑛较小，而𝑚较大，例如𝑛在 1-1000 之间，而𝑚大于 50000，则使用支持向量机会非常慢，解决方案是创造、增加更多的特征，然后使用逻辑回归或不带核函数的支持向量机。</li><li>值得一提的是，神经网络在以上三种情况下都可能会有较好的表现，但是训练神经网络可能非常慢，选择支持向量机的原因主要在于它的代价函数是凸函数，不存在局部最小值。</li><li>当有非常非常大的训练集，且用高斯核函数是在这种情况下，通常会尝试手动地创建，拥有更多的特征变量，然后用逻辑回归或者不带核函数的支持向量机。</li></ul><p>逻辑回归和不带核函数的支持向量机是非常相似的算法，不管是逻辑回归还是不带核函数的 SVM，通常都会做相似的事情，并给出相似的结果。根据实现的情况，其中一个可能会比另一个更加有效，但是在其中一个算法应用的地方，逻辑回归或不带核函数的SVM 另一个也很有可能很有效。随着 SVM 的复杂度增加，当使用不同的内核函数来学习复杂的非线性函数时。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200718181732448.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="SVM" scheme="http://yoursite.com/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>《增长黑客实战》（第4-6章）</title>
    <link href="http://yoursite.com/2020/07/16/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC4-6%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/16/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC4-6%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-16T09:36:02.000Z</published>
    <updated>2020-07-16T09:42:43.336Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020071414384626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="4-秉持数据为王"><a href="#4-秉持数据为王" class="headerlink" title="4 秉持数据为王"></a>4 秉持数据为王</h2><h3 id="4-1-数据能够解决什么"><a href="#4-1-数据能够解决什么" class="headerlink" title="4.1 数据能够解决什么"></a>4.1 数据能够解决什么</h3><h4 id="4-1-1-是否一切皆可数据化衡量"><a href="#4-1-1-是否一切皆可数据化衡量" class="headerlink" title="4.1.1 是否一切皆可数据化衡量"></a>4.1.1 是否一切皆可数据化衡量</h4><p><strong>如何估算芝加哥有多少钢琴调音师？</strong><br>解答：芝加哥人口大约300万人，假设平均10-30个家庭中有一部钢琴，每部钢琴大约一年需要调音一次，每个调音师每天大约调音4-5家，每个调音师每年工作250天。那么，上述问题答案可由以下公式求得：<br><img src="https://img-blog.csdnimg.cn/20200715151232307.PNG#pic_center" alt="在这里插入图片描述"></p><p><strong>婚姻幸福相当于收入增加多少带来的快乐？</strong><br>英国伦敦大学的研究人员对1万名英国人的快乐程度、财富、健康和社会关系进行了调查，他们把受调查者的“生活满意度”从高到低划分为7个级别，计算出人们每提升一个“生活满意度”级别，每年需要多挣多少钱。<br>通过对比这两类数据，研究人员计算出了每个社会因素和生活方式因素所对应的“价格”。比如，婚姻幸福和每年多赚5.4万英镑所带来的欢乐相当，两个人同居所带来的快乐等同于每年多赚8.25万英镑，经常和邻居聊天所感受到的快乐则相当于每年多赚4万英镑。</p><p>真正的量化过程不需要无限精确。尽管公共事业及各类投资、商业管理决策中所需要量化的数据往往看起来异常复杂，难以获取。但只要先明确待量化的内容，找出核心问题，或是将一个笼统问题层层分解、剥离，对含糊的概念做出清晰的定义，就能为数据驱动的决策提供良好解决办法。换而言之，如果你提不出任何数据化衡量的思路，说明你对问题理解得还不够深刻。</p><h4 id="4-1-2-数据不能解决什么"><a href="#4-1-2-数据不能解决什么" class="headerlink" title="4.1.2 数据不能解决什么"></a>4.1.2 数据不能解决什么</h4><p><strong>1.数据不懂社交情绪</strong><br>计算机擅长为社交产品定量，而非定性。数据分析师能够获悉你在过去一周内47%的使用时长用于跟新认识的好友聊天，但却无法捕捉到你心底对一年仅能见2次面的儿时玩伴的牵挂。</p><p>例：Facebook通过数据掌握了用户对发布和查看照片功能的喜爱，于是着力于让平台产生更多照片。平台价值也随着用户数据资产的沉淀而不断增值。但反其道而行之的产品Snapchat一经推出，让不少青少年用户纷纷改旗易帜。因为Snapchat开创的“阅后即焚”社交产品模式，允许用户在发送照片后的几秒钟内，立即自动清除。这转瞬即逝的互动形式，反倒刺激了用户的紧迫感和创造力，人们得以毫无顾忌地肆意使用。Snapchat每天产生的照片及视频上传量，甚至一度击败了Facebook，让后者不得不考虑收购或模仿。</p><p><strong>2.数据无法理解业务背景</strong><br>人类的决策并不都是独立离散的事件，而是镶嵌在时间序列和背景之中。数据本身不懂得如何叙事，也无法理解思维的浮现过程。我们掌握的数据越多，统计上显著相关的变量也愈发繁杂，而变量之间如何作用、权重高低如何设置，以及如何排除没有实际意义的干扰变量，则需要结合背景考虑。</p><p>例：一款异性交友产品，出现大量优质女用户流失的现象。通过数据分析，原来是因为她们动辄每天收到数十条陌生人的聊天骚扰。在简单地与女性用户沟通后，我们产生了做一个“一键清除未读信息”的功能。满怀信心地将功能发布上线，却意外发现用户并不买账，留存曲线并没有因此更好看。直到参与一场线下的圆桌访谈，才找到了个中症结：她们之所以并不打算使用“一键清除未读消息”，是故意想留着未读消息数量的数字，在各种场合假装不经意地晒出截图，彰显自己的人气——被骚扰越多，反而显得越有魅力。如果不去理解用户使用的背景和微妙的心态，光靠观察数据仪表盘，我们是不可能领悟到这一重要需求的。</p><p><strong>3.数据抹杀创新精神</strong><br>曾经借力Facebook平台大热的社交游戏公司星佳（Zynga）强调常态化地检测用户身份和他们的行为。通过分析用户一段时间内在游戏中与其他玩家的交互行为、前N天内建造的房子数目、前 M 个小时内杀死的怪物个数等，他们便可以知道用户达成参与的关键点，并设计出符合玩家需要的游戏。但也正是这样投其所好亦步亦趋的刻板设计，抹杀了游戏作为一款感性产品的创新精神。在固有测试模板下生成的流水线游戏，绝不可能产生让人耳目一新、大放异彩的特性，新的模式、特性、剧情必须仰赖游戏创造者灵光一闪的创造力。最终，玩家在厌烦了社交游戏的惯常套路后纷纷流失，星佳游戏黯然衰落。</p><h3 id="4-2-数据分析常见方法及指标"><a href="#4-2-数据分析常见方法及指标" class="headerlink" title="4.2 数据分析常见方法及指标"></a>4.2 数据分析常见方法及指标</h3><h4 id="4-2-1-数据分析的一般步骤"><a href="#4-2-1-数据分析的一般步骤" class="headerlink" title="4.2.1 数据分析的一般步骤"></a>4.2.1 数据分析的一般步骤</h4><p>培养数据分析能力，可以从两方面着手：一是数据分析方法论的建立，二是以入门到精通的方式掌握数据分析的技能。</p><p>数据分析的一般步骤及其需要掌握的技能点，如下所述。</p><p><strong>第一步：数据准备（这很可能花费你70%的时间）</strong><br>• 获取数据（爬虫抓取、基于自有数据仓库）<br>• 验证数据<br>• 数据清洗（包括对缺失值、孤立点、垃圾信息、规范化、重复记录、特殊值、合并数据集的处理）<br>• 使用Python进行文件读取，导出为csv或者txt格式便于操作加工<br>• 数据抽样（数据量大时常用随机抽样提取子数据集）<br>• 存储和归档</p><p><strong>第二步：数据观察（发现规律和隐藏的关联）</strong><br>• 单一变量：点图、抖动图、直方图、核密度估计等<br>• 两个变量：散点图、LOESS平滑、残差分析、对数图、斜率等<br>• 多个变量：假色图、马赛克图、平行坐标图等</p><p><strong>第三步：数据建模</strong><br>• 推算和估算（均衡可行性和成本消耗）<br>• 缩放参数模型（缩放维度优化问题）<br>• 建立概率模型（二项、高斯、幂律、几何、泊松分布与已知模型对比）</p><p><strong>第四步：数据挖掘</strong><br>• 选择合适的机器学习算法（如蒙特卡洛模拟、相似度计算、主成分分析）<br>• 大数据考虑用Map/Reduce<br>• 得出结论，最后绘制图表展示</p><h4 id="4-2-2-留存率——产品早期“最重要的唯一指标”"><a href="#4-2-2-留存率——产品早期“最重要的唯一指标”" class="headerlink" title="4.2.2 留存率——产品早期“最重要的唯一指标”"></a>4.2.2 留存率——产品早期“最重要的唯一指标”</h4><p>在用户获取和留存之间，增长团队主要负责的是用户获取，而留存率则主要取决于产品。当产品还没有达到真正的P/MF阶段前，增长对于公司来说都是徒劳的。如果留存率很低，那么先把重点放在产品的改进、市场方向的调整上，而不是继续加速扩张宣传。</p><p>为了找出影响留存率的关键因素，可以尝试向用户询问下面4个问题：<br>• 最初是什么因素驱动你注册账号试用我们的产品？<br>• 产品哪些地方没有达到你的预期，或是觉得很难使用？<br>• 停用一阵后，你为什么愿意再次回来使用？<br>• 哪些因素会让你倾向于今后更频繁地使用？</p><p>此外，如果统计代码部署得当，足以观测每一个单体用户的使用行为，那么去“死亡现场”勘探一下——也就是观测那些流失用户的最后一次使用行为，看看他们走过哪些路径、干了哪些事情、有哪些痛点还未解决，借此模拟用户流失的场景，寻求维护优化策略。</p><h4 id="4-2-3-NPS净推荐值：衡量产品早期用户忠诚度"><a href="#4-2-3-NPS净推荐值：衡量产品早期用户忠诚度" class="headerlink" title="4.2.3 NPS净推荐值：衡量产品早期用户忠诚度"></a>4.2.3 NPS净推荐值：衡量产品早期用户忠诚度</h4><p>在创业型团队早期研发中，缺乏海量的数据反馈，面对数量有限的种子用户，NPS净推荐值系统是一种结合了定量研究手段和定性分析的有效方法。</p><p><label style="color:red">NPS（Net Promoter Score），净推荐值系统</label>，是一种计量某个客户将会向其他人推荐公司产品或服务可能性的指数。</p><p>计算NPS的方法很简单：<br><img src="https://img-blog.csdnimg.cn/20200715164222229.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.通过问卷或面对面访问，请用户回答“你在多大程度上愿意向朋友（亲人、同事）推荐某服务或产品？”用户以10分制数字作答，10分表示非常愿意，0分表示非常不愿意。<br>2.根据用户回答，将用户分成三类：评分在6分及以下的归为“贬损者”（Detractors），即用户不满意、无忠诚度；7-8分的归为“被动者”（Passives），即用户总体满意但没到狂热的程度，会考虑其他竞争对手的产品；9-10分的归为“推荐者”（Promoter），即用户是忠实狂热的，会考虑继续购买或推荐给其他人。<br>3.推荐者与贬损者在用户总数中所占百分比之差，就是净推荐值。<br><img src="https://img-blog.csdnimg.cn/2020071516405996.PNG#pic_center" alt="在这里插入图片描述"><br>• 优点：与长期利润增长正相关，可操作性强，易理解和接受，能直接与竞品比较，帮助企业明确业务优先级，弥补了用户满意度调查（ACSI）所得信息太多又缺乏重点的问题。<br>• 缺点：需要结合用户的具体信息去考虑，如“生命周期”等；净推荐值≠用户满意度，它只能为企业提供“预警装置”；最后，它不能给你解释，需要结合其他定性定量的方法来分析原因。</p><p>建议：<br>1.请先衡量它是否适用于你的产品或服务。人们愿意推荐餐馆，却不见得会推荐墓地。你的产品或服务本身应当具有被推荐的价值，最好也能给推荐者带来某些好处（显得见多识广、塑造前沿形象）。如果用户选择你的产品或服务，是为了解决难以启齿的痛点，那么面向大众公开推荐的可能性会显著降低。<br>2.NPS可以结合其他指标体系共同作用。比如Airbnb的增长团队将顾客入住后的综合评分，以及清洁度、位置、性价比等6个子维度的数据与NPS（他们称之为LTR）结合，建立了一系列嵌套逻辑回归模型。<br>3.可以根据实际情况对NPS进行修改简化。例如取消10分制，改为7分制或5分制（“非常厌恶”、“勉强接受”、“中规中矩”、“超过预期”、“非常喜爱”）。</p><h4 id="4-2-4-魔法数字：发现用户的惊喜时刻"><a href="#4-2-4-魔法数字：发现用户的惊喜时刻" class="headerlink" title="4.2.4 魔法数字：发现用户的惊喜时刻"></a>4.2.4 魔法数字：发现用户的惊喜时刻</h4><p>用户流失的一般情形：<br>• 30%的人因“没有感受到产品价值”而离开<br>• 30%的人因“不知道怎么操作”而离开<br>• 10%的人因“使用中有失败体验”而离开<br>• 剩下不到30%的人出于兼容性差、投奔竞品等理由离开</p><p>新用户直至亲身体验到你的产品为他们带来的价值与愉悦之际才有可能转化成忠诚的常客。这个最终让用户成功驻留的关键点，就是 <label style="color:red">“惊喜时刻”（＂Aha！”Moment）</label>。它代表用户在使用产品到达特定阶段后所产生的对产品价值的肯定。而奠定惊喜时刻的数据指标，则被称为 <label style="color:red">“魔法数字”（Magic Number）</label>。</p><p>以下是一组“惊喜时刻”及其对应“魔法数字”的例子：<br>• Twitter的增长负责人Josh Elman透露，如果一个新用户关注了至少30人，他才更倾向于转化成活跃用户，而不是随便看看就离开。<br>• Facebook的Chamath Palihapitiya说，他们定义的惊喜时刻是让新用户在注册的前10天里添加至少7个好友。为此Facebook开发了“你可能感兴趣的人”（People You May Know）功能来引导用户互加好友。<br>• Zynga的Nabell Hyatt意识到，如果他们游戏的玩家在注册后的第二天重新登录，则这批人变为活跃用户和付费用户的可能性更高，所以将“第一天的次日留存率”（Day 1 Retention）视作核心指标之一。<br>• Dropbox的增长负责人ChenLi Wang观测获知，惊喜时刻在于让用户上传至少一个文件到自己的网盘空间。</p><p>通过对常见产品魔法数字的归纳总结，不难得出以下三种衡量标准。<br>• 用户关系网络密度：在X天内添加/关注了Y名好友。<br>• 产生内容：添加（上传/发布/撰写）了X单位的内容。<br>• 访问频度：在X天之内发生重复访问行为。</p><p><strong>掌握用户的惊喜时刻的方法</strong></p><ul><li>询问用户</li><li>借助数据分析工具精确地探寻产品的惊喜时刻，将它们作为增长团队行动的参照。国外的Mixpanel、国内的GrowingIO等。</li></ul><p><strong>分析移动端订单数量下降情况</strong><br>假设你是百度外卖App的增长团队负责人，某天移动端的订单数量比前一日下跌了5%。你的老板要求你对这一数据变动做出合理解释，你将如何应答呢？</p><p>为了分析订单下跌情况，可以从以下三个方面展开论述：<br>• 明确指标变动的异常程度、预期影响面<br>• 寻求数据分析的角度，排查异常原因<br>• 根据结论寻求优化或止损方案</p><p>第一步：订单量比前一日下跌5%，影响是否大到必须加以重视？<br>以2015年百度外卖B轮融资计划书展示的数据看，其拥有3 000万注册用户，日订单数量超过110万，客单价可达50元左右。以此数据估算，假设2016年底注册用户数达到6 000万，日订单数量突破200万，客单价基本不变，那么5%的订单量下滑意味着当日损失500万元营收。<br>天然的单一突发事件几乎不可能造成这么大的损失，因此这足以引起产品团队的高度重视。</p><p>第二步：影响数据异常变动的原因可能有哪些？<br>1）全局指标：包括一定时间内新增用户量、用户活跃度、总转化率、搜索功能使用率、翻页率、Bug率等。全局指标用于分析对全体用户产生影响的共性原因。<br>2）分渠道指标：可按不同下载渠道、用户所在地域、移动平台、运营商、网络接入方式等维度观察不同渠道数据是否存在异常。<br>3）用户行为数据：在上述两项指标基础上，重点观测用户在不同时间段、不同需求类型下的行为，从而定位到由于某一细分人群的定向变化产生的数据异常。<br>4）时间因素：外界环境的影响也可能对产品数据造成影响，因此观测同比和环比数据都很重要。典型代表如“月末效应”，即一定规模的用户群体会因月底手机流量用尽而减少上网行为，造成整体流量的下滑。另外，对于一款外卖产品而言，天气变化也会造成数据波动，通常阴雨天的订单量会走高。<br>5）其他产品线监控：百度集团旗下的其他产品线变动也可能成为造成订单量下滑的原因，例如91应用市场改变了App广告的展示位置，或是搜索引擎的算法调整降低了网民常用关键词的权重等。<br>6）舆情监控：包括但不限于通过人工或机器方式，从内部反馈通道、论坛、贴吧、微博、朋友圈等处采集大众对产品的实时意见。极有可能因此发现导致产品数据骤然降低或飙升的特殊舆情，如新发布的当季财报引发投资者关注、母公司运作纰漏招致大众抵制，或是竞争对手做出了哪些新动作。</p><p>第三步：提出应对方案。<br>排查完成后，通过定位到具体原因，给出对应的方案。比如修复某个版本新上线引发的严重Bug、联系合作部门提高曝光量、针对竞争对手的营销策略做出同等力度的折扣反击等。</p><h4 id="4-2-5-同期群分析"><a href="#4-2-5-同期群分析" class="headerlink" title="4.2.5 同期群分析"></a>4.2.5 同期群分析</h4><p><label style="color:red">同期群分析（Cohort Analysis）</label> 亦称群组分析，是按照用户初始行为的发生时间进行群组划分，继而分析相似群体随时间变化情况的数据分析方法。<br><img src="https://img-blog.csdnimg.cn/20200715170724530.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在产品研发中，同一项产品改进，对不同同期群中的用户而言，产生的影响是不同的，分开衡量才能反应最真实的情况。如果你为产品增加了新手引导，那么就要将新手和老用户区隔开验证；如果你准备发放折扣券，那么已长期使用的忠实用户会比刚注册的新用户更乐于响应。</p><p>同期群分析的作用主要体现在：<br>• 衡量产品业务的整体进展。<br>• 评估产品改版的效果。<br>• 优化产品的用户体验。<br>• 寻找产品改进关键点。<br>• 提升用户参与度。</p><h3 id="4-3-案例：如何通过大数据分析提升电销利润"><a href="#4-3-案例：如何通过大数据分析提升电销利润" class="headerlink" title="4.3 案例：如何通过大数据分析提升电销利润"></a>4.3 案例：如何通过大数据分析提升电销利润</h3><h4 id="4-3-1-如何获取并维护客户销售线索"><a href="#4-3-1-如何获取并维护客户销售线索" class="headerlink" title="4.3.1 如何获取并维护客户销售线索"></a>4.3.1 如何获取并维护客户销售线索</h4><p>销售线索（Leads）是指有成单可能性的客户名单，是电销行业中非常重要的资源。传统的做法是从各种渠道获取销售线索名单，直接海量拨打。某网则通过数据挖掘，创建出周密的分析模型，继而搭建出两套自动化系统：1.商机自动识别和分配系统；2.客户策略性维护系统。</p><p>1.商机自动识别和分配系统：针对海量客户数据进行挖掘，决定触达客户群</p><p>首先通过数据分析，归纳出100多个影响成交率的不同维度数据（包括行为数据、订单数据、行业地域数据等），再结合机器学习，教会机器模型如何通过上述特征判别出有成功可能的通话记录。经过训练，机器模型成功将需要拨打的电话数量从2万5千条降到了5千条，节约了近五分之四的成本，成功率提升到80%。模型上线后的一段时间内，团队继续通过报表监控预测值和实际结果的区别，每周对模型更新和维护，收集销售端反馈，持续优化模型参数和商机分配规则。</p><p>2.客户策略性维护系统</p><p>只有客户留存率足够高的时候，追求客户数增长才是有意义的，否则即使利用高额成本获取了大量客户，也只能制造短暂的市场繁荣假象，无法带来持久增长。某网采用了RFM模型进行客户状态跟踪和维护。</p><p><img src="https://img-blog.csdnimg.cn/20200715172632473.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><label style="color:red">RFM</label>代表：<br>• Recency：最近一次消费距今时间。<br>• Frenquency：消费频率。<br>• Monetary：消费金额。</p><p>依据上述三个核心指标，用户被划分成八种类型。从消费金额角度，花钱多的用户定义为重要客户，花钱少的用户定义为一般客户。将重要用户继续拆分：<br>• 重要价值客户。最受欢迎的是这类消费频率高、最近一次消费距今时间短的“重要价值客户”。他们价值高、行为活跃、维护成本低。通过观察重要价值客户的占比，可以衡量公司重点客户的风险性和维护效果。<br>• 重要发展客户。这类客户最近一次消费时间较近，单消费频率偏低，说明其消费潜力没有被充分发掘，因此需要重点发展该类客户。<br>• 重要保持客户。客户历史上消费过多次，而最近一次消费距今较远，有可能体现了客户对产品的兴趣减弱。对这类客户要积极跟进，以防流失。<br>• 重要挽留客户。客户历史消费金额较高，但是消费频次低、最近一次消费时间距今较远。这类客户很有可能已经流失了。该类型客户的占比反映了重要客户的流失情况，如果占比较高，需要引起警惕，可以通过对该类客户的回访找出流失原因，制定补救方案。</p><h4 id="4-3-2-如何控制成本实现收益最大化"><a href="#4-3-2-如何控制成本实现收益最大化" class="headerlink" title="4.3.2 如何控制成本实现收益最大化"></a>4.3.2 如何控制成本实现收益最大化</h4><p>相对于邮件或短信营销渠道，电话销售渠道的成本非常高。因此在进行业绩目标规划时，也需要考虑到成本因素，让电销的收益最大化。</p><p>1.营收管理：如何实现收益最大化<br>首先将各个维度的成本分摊到每通电话上，并且将电销渠道获取的消费总金额分摊到每通成功转化的电话上。例如，假设折算出一通电话的成本为5元，而一通成功转化的电话可以带来100元的消费，那么只要一个销售线索的转化率高于5%（5元/100元），那么拨打是盈利的。<br>于是借助上文提到的数据挖掘模型，可以预测出每个销售线索的转化率，并依据转化率倒序排列，制作出 ROC（接受者操作特征）曲线。曲线可以反映出拨打决策和相应的预测结果。在这套模型下，如果决策者计划削减外呼量以控制成本，电销人员就可以选择拨打模型预测出的转化率最高的20%客户。</p><p>2.系统管理：减少无效拨打，增加工作条理性<br>某网将客户名单池划分为：个人池、公共池和无效池。<br>• 个人池：属于单个销售人员的名单池，为了避免抢单，其他销售不可触达。个人池可进一步细分为。<br>a）熟客维护池：属于该销售维护的已成单的客户。<br>b）新分配商机：属于系统自动分配或销售从公共池领取的商机。<br>• 公共池：当个人池的销售线索无法满足业绩指标时，销售人员可从公共池领取替补销售线索。<br>• 无效池：当所触达的客户明确表示无需求时，销售会在客户商机标注无效，该商机从个人池流转至无效。</p><h4 id="4-3-3-如何抓住转瞬即逝的商机"><a href="#4-3-3-如何抓住转瞬即逝的商机" class="headerlink" title="4.3.3 如何抓住转瞬即逝的商机"></a>4.3.3 如何抓住转瞬即逝的商机</h4><p>和传统线下商店不同，困扰很多电商平台的一个大问题是：用户来访转化率大多只有5%左右。也就是说，每100位来访者，仅有5位客户会真的付费。另外，互联网访问的低成本也加剧了市场竞争：客户可以毫不费力地去访问多家网站，对比产品和价格之后再做出购买决定。</p><p>某网借鉴沃顿商学院市场营销系知名教授彼得·菲德尔（Peter Fader）关于路径数据（Path Data）的理论体系，对客户行为进行拆分和建模，观测到了用户从出现购买意向到被销售人员触达的时间间隔和用户转化率之间的关系。<br><img src="https://img-blog.csdnimg.cn/20200715174530960.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>研究发现，在客户出现购买意向之后越快得到销售的服务，其成单可能性就越高。这里面有两个原因：</p><ul><li>第一，市场竞争激烈。客户同时有3家以上分类网站可供选择，稍有延迟，客户就流失。</li><li>第二，“被服务”VS“被推销”：不同时机带来截然不同的客户体验。越及时地触达客户，就越能更好地帮助客户，节约客户的时间，从而让客户对你的服务满意并乐意购买你的产品。基于这一点，某网确定了服务营销的关键时刻，研发了一套实时用户需求挖掘和响应系统，从用户在某网的点击流数据中挖掘其出现付费需求的可能性和强烈程度，并及时将信息利用CRM系统传达给电销团队。</li></ul><h4 id="4-3-4-如何利用用户需求提炼系统找出业务增长点"><a href="#4-3-4-如何利用用户需求提炼系统找出业务增长点" class="headerlink" title="4.3.4 如何利用用户需求提炼系统找出业务增长点"></a>4.3.4 如何利用用户需求提炼系统找出业务增长点</h4><p>电销团队就某网来说，不是一个赚钱工具，而是最能理解客户需求的渠道。因此<br>某网研发了一套需求提炼系统，通过评估、跟踪用户的需求满足情况找出产品缺点，推动产品的革新和业务发展。用户的需求识别系统可以分为两个部分：显著需求和潜在需求。<br>• 显著需求是指那些信号明确，流程清晰的常见需求，包括验证失败、支付失败、发布失败、发布超限等。<br>• 潜在需求则是指较为模糊的、有待发掘的需求，包括流量需求（用户发布信息之后感觉来联系的人少）、编辑需求（用户对如何优化信息的内容比较在意）、信息需求（用户并没有找到想要的信息）等。</p><p>对于某网这个服务提供方来说，显著需求的整理主要是为了降低理解成本，简化沟通流程；而潜在需求则是某网在销售服务上的核心竞争力。对潜在需求的精确解读可以为用户提供更与众不同的服务，推荐个性化的付费产品。</p><p>那么某网是如何分析和提炼出用户的潜在需求的呢？<br>第一，对潜在需求进行定义和分级。<br>第二，对定义好的潜在需求进行数据整理和建模。<br>第三，对单个用户进行需求提取，方便销售人员了解用户痛点。<br>第四，对客户需求进行宏观总结，制定针对性的政策。<br><img src="https://img-blog.csdnimg.cn/20200715182307915.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过宏观总结客户需求的处理率，某网就可以发现产品和服务上面的改进点，从而推动服务运营能力和产品完善性。</p><p>综上所述，某网利用其大数据技术优势，结合营收管理和市场营销理论，全方位地改造了电话销售团队，使其成为一支能够实时捕捉商机、高效服务于客户的精英团队。</p><h2 id="5-洞悉用户心理"><a href="#5-洞悉用户心理" class="headerlink" title="5 洞悉用户心理"></a>5 洞悉用户心理</h2><h3 id="5-1-用户画像：理解你的目标用户"><a href="#5-1-用户画像：理解你的目标用户" class="headerlink" title="5.1 用户画像：理解你的目标用户"></a>5.1 用户画像：理解你的目标用户</h3><p><label style="color:red">用户画像（Persona）</label> 可以给用户体验建模，从而帮助团队更加清晰地理解目标用户的工作方法。“Persona”在拉丁语中的原意是“面具”。在产品研发中，Persona 是真实用户的虚拟代表，是建立在一系列真实数据之上的目标用户模型。通过用户调研去了解用户，根据他们的目标、行为和观点的差异，将他们区分为不同类型以进行用户信息标签化，然后从每种类型中抽取出典型特征，赋予名字、照片、一些人口统计学要素、场景等描述，形成了一个Persona。</p><p>用户体验专家大卫·特拉维斯（David Travis）认为，一个令人信服的Persona要满足七个条件，即<label style="color:red">P.E.R.S.O.N.A</label>——<br>• P代表基本性（Primary research）指该Persona是否基于对真实用户的情景访谈。<br>• E 代表移情性（Empathy）指 Persona 中包含姓名、照片和产品相关的描述，是否能引起同理心。<br>• R代表真实性（Realistic）指对那些每天与顾客打交道的人来说，Persona是否看起来像真实人物。<br>• S代表独特性（Singular）每个Persona是否是独特的，彼此很少有相似性。<br>• O代表目标性（Objectives）该Persona是否包含与产品相关的高层次目标，是<br>否包含关键词来描述该目标。<br>• N代表数量（Number）Persona的数量是否足够少，以便设计团队能够记住每个用户角色的姓名，以及其中的一个主要用户角色。<br>• A代表应用性（Applicable）是否能使用Persona作为一种实用工具进行设计决策。</p><p><strong>完整有价值的Persona，应当包括以下内容：</strong><br>• 赋予每一个角色姓名、年龄和性别。让他更像是有血有肉的真实存在，并且方便迅速沟通。<br>• 寻找一张代表这个角色的真人照片。<br>• 确定所在的地理位置。<br>• 职业、收入范围。<br>• 喜好、人生态度、对于外部特定刺激的固定反应。<br>• 用户使用产品的场景和外部因素。<br>• 致使他们使用产品的主要原因。<br>• 他们的根本需求、痛点及核心目标是什么。<br>• 与产品使用相关的其他补充信息。</p><p><strong>构建Persona的一般步骤</strong><br>第1步：根据角色对访谈对象进行分组。根据研究结果和理解对用户进行大致的角色划分，并根据角色对要访谈的用户进行分组。<br>第2步：找出行为变量。把每种角色的显著行为列成几组行为变量。一般包括用户的活动（行为及频率），以及对产品及相关技术的态度、能力、动机、技能等几个方面。<br>第3步：将访谈主体和行为变量对应起来。实际上就是为每个访谈用户标注各项行为的情况。<br>第4步：找出重要的行为模型。发现访谈用户中的显著行为模式组合。<br>第5步：综合各种特征，阐明目标。从用户模型的行为细节中综合挖掘出用户的目标和其他特性。<br>第6步：检查完整性和冗余。为每种用户模型弥补行为特征中重要的缺漏，将行为模式相同而仅仅是人口统计数据有差异的用户模型合并为一个。<br>第7步：指定用户模型的类型。对用户模型进行优先级排序，确定主要、次要、补充、增加负面的用户模型。主要用户模型是界面设计的主要对象，一个产品的一个界面，只能有一个主要用户模型。<br>第8步：进一步描述特征和行为。通过第三人称叙述的方式描述用户模型，并为不同用户模型选择恰当的照片。至此，用户模型构建完成。</p><p>例如，某产品构建的Persona文字部分示例如下。<br>用户画像：互联网公司产品经理Jason<br>基础信息<br>• 姓名：Jason<br>• 性别：男<br>• 年龄：出生于1993年，金牛座<br>• 籍贯：江西南昌<br>• 性格：腼腆内敛，富于好奇心<br>• 职业：产品经理<br>• 工作单位：北京某互联网公司X，月薪6千元<br>• 常用软件：Visio、Axure、Office、MindManager<br>• 经常关注网站：增长黑客网、知乎、36氪、馒头商学院<br>用户特性<br>• 出入产品经理行业1年，对产品工作经验不足<br>• 面对部分工作力不从心，急需快速提升产品相关专业能力<br>• 希望可以通过行业内前辈的指导以及同行交流帮助自己高效完成工作<br>用户故事<br>• Jason 刚进入一家互联网公司做产品经理，由于缺乏实战经验，有时对于团队负责人分配的工作显得力不从心。<br>• 他希望通过使用本产品，能跟行业内的大牛互动，逐步形成自己的思维方式和产品方法论，掌握一套趁手工具的高效使用流程，提升自己对于产品的把控能力，尽早担负起独当一面的责任，计划两到三年内从产品经理上升到高级产品经理。<br>• Jason 可能会在入行五年后考虑自行创业，因此与创业有关的技能和行业八卦也是他所热衷的话题之一。</p><p><strong>怎样才能让Person发挥最大作用呢？</strong><br>• 首先，应当确保获得公司各部门的支持。良好的跨团队协作交流，既有利于获取生成 Persona 需要的信息和资源，又可以让大家都有参与感、了解 Persona的产生过程，最后的结果会更让人信服。<br>• 其次，每个产品界面只对应一个主要的Persona。不要试图满足所有的Persona，这很可能导致众口难调，最终谁的需求都无法充分满足。<br>• 最后，针对不同的项目、功能及时调整 Persona，不要指望一劳永逸。时代在前进，产品在更迭，Persona迟早是会过时的。</p><h3 id="5-2-新手引导：加速惊喜时刻的到来"><a href="#5-2-新手引导：加速惊喜时刻的到来" class="headerlink" title="5.2 新手引导：加速惊喜时刻的到来"></a>5.2 新手引导：加速惊喜时刻的到来</h3><p>新手引导流程（User Onboarding）是加速惊喜时刻到来的重要环节。成功的新手引导流程不仅便于用户快速上手，还能让他尽快感受到产品的价值，从而形成长期使用的习惯。</p><p>Robbie Kellman Baxter在其著作《成员经济学》（The Membership Economy）<br>中提出了新手引导流程的三大法则和八个步骤。</p><p><strong>法则一：消除用户疑虑，降低挫败感</strong><br>➢ 步骤1：注册环节<br>你应该设法让注册环节变得更简单，减少用户的疑虑困惑，让他们毫无负担地尽快开始使用。例如：<br>• 将注册时的必填项缩减到最少，其他选填项允许在之后填补。<br>• 采用第三方账号（如Facebook、微博）一键授权登录。<br>• 如果是收费服务，记得提供免费试用期或者演示账号。</p><p>➢ 步骤2：欢迎信息<br>在注册完成后，马上提出感谢并告诉用户他们应该干些什么。常用的做法有：<br>• 给用户发送一封欢迎邮件，展示产品的主要功能。<br>• 用浮层页面指示用户常见操作的入口。<br>• 或是像Slack那样，模拟机器人小助手的输入，与用户轻松对话。</p><p><strong>法则二：为用户提供立竿见影的好处</strong><br>➢ 步骤3：让用户马上体验主要功能<br>在新用户热情尚未消散之前，尽快引导他们用上产品的主要功能。为此你可以：<br>• 让用户注册完毕后，立即跳转到主要功能的所在页面。<br>• 将执行“标准动作”作为必经步骤，无法直接跳过。<br>• 安排另一名用户主动发起交互（如聊天、私信、漂流瓶），主要适用于社交类产品。</p><p>➢ 步骤4：询问反馈<br>通过提前部署数据分析工具，你可以明确追踪到每一名用户的使用行为，并在适当时机与其建立沟通。如果用户卡在某一任务流程中，始终未能走完，那么不妨询问他阻力来自哪里并予以适当协助。</p><p>➢ 步骤5：提供建议<br>如果用户已经逐渐从新手阶段过渡到进阶阶段，那么不妨给出一些使用中的小技巧、高级玩法，提升他们的使用效率和愉悦感。例如，可以向使用Dropbox网页版的用户建议：<br>• 下载手机版App，体验手机照片同步备份到云端的功能。<br>• 开启浏览器插件，一键拖动自动上传。<br>• 更换Webkit内核的现代浏览器，让使用过程更顺畅。<br>• 体验一次版本控制、文件标注等高级功能。</p><p><strong>法则三：根据用户行为施予小恩小惠</strong><br>➢ 步骤6：鼓励用户邀请好友使用<br>如果你的产品自带推荐用户（Referral Program）模块，记得找机会鼓励那些活跃度高的用户，号召他们邀请亲朋好友一起使用你的产品。常用策略有：<br>• 邀请好友注册，你跟他都获赠一个月会员、500MB空间及100元礼金券。<br>• 你获得受邀好友日后实际消费金额20%的销售提成。<br>• 分享到社交网络，解锁某个高级付费功能的3个月使用权限。<br>• 推出人气榜单，公开展示邀请好友数量最多的活跃用户名单。</p><p>➢ 步骤7：向用户提供定制的个性体验<br>在用户使用一定程度后，你应该能通过数据对他描摹出画像，由此提供独特的专属服务。包括但不限于：<br>• 内容预测类，如“你可能感兴趣的人”、“猜你喜欢的内容”、“你的音乐口味”。<br>• 身份特质类，如向个人用户发放指定品类的消费代金券，给企业用户一定额度的垂直人群免费曝光机会。<br>• 个性彰显类，达到特定等级的用户，可以自己选择主题背景、图片配饰、签名小尾巴等。</p><p>➢ 步骤8：提供有营养的长期价值<br>无论是智慧的与日俱增、财富的水涨船高，还是友情的持续升温，你的用户应当在每一次使用产品的过程中，明确感觉到长期价值的提升。你的整套产品都应当毫不吝惜于彰显自己的价值，不必藏着掖着。</p><h3 id="5-3-病毒基因：让产品像病毒一样疯传"><a href="#5-3-病毒基因：让产品像病毒一样疯传" class="headerlink" title="5.3 病毒基因：让产品像病毒一样疯传"></a>5.3 病毒基因：让产品像病毒一样疯传</h3><p>乔纳·伯杰（Jonah Berger）在其著作《疯传——让你的产品、思想、行为像病毒一样入侵》一书中，归结出以下六个关键因素：社交货币、诱因、情绪、公共性、实用价值和故事。它们构成了广泛传播的深层次原因。<br><img src="https://img-blog.csdnimg.cn/20200715191902758.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200715191944913.PNG#pic_center" alt="在这里插入图片描述"><br>➢ 因素一：社交货币（Social Currency）<br>每个人都希望自己在他人眼中更加灵巧、更加富有、更加时尚。人们对产品或思想的评论，就像服装和轿车一样，成为别人对其评判的重要因素。我们需要洞悉人们的内心深处，让他们感觉到自己进入了他们渴望的世界之中。我们需要调整游戏规则，去迎合人们向身边朋友炫耀身份的需要，构建出他们渴望的形象。这就是社交货币。</p><p>铸造社交货币的方式：<br>1）发掘标志性的内心世界。<br>2）撬动游戏杠杆。<br>3）使人们有自然天成、身临其境的归属感。</p><p>➢ 因素二：诱因（Triggers）<br>怎样能提醒用户想到我们的产品呢？巧妙地利用心理学的“锚点”，把你的产品和用户司空见惯的事物建立关联，一旦产生刺激，瞬间激发人们的记忆，就能让人们想到你的产品。这就是诱因的作用。许多产品之所以缺乏传播，是源于“空对空”的单纯吹嘘工具性能，而不是放到用户实实在在的业务需求场景中展开讨论。</p><p>➢ 因素三：情绪（Emotion）<br>有感染力的内容通常能够激发人们的即时情绪。只有选择高唤醒的情绪才容易带来更多转发。</p><p>➢ 因素四：公共性（Public）<br>当人们看见别人使用我们的产品时，他们会不会考虑这种产品是否符合自己的需要呢？有样学样的“羊群效应”很能反映人们的跟风趋势。所以从反面来讲，人们只要没有看到相关的事物，是不会轻易模仿的，更不可能让这些事物变得流行。所以我们需要设计一些具备公共性的产品，主动制造一种在公众中广泛渗透的影响力。</p><p>➢ 因素五：实用价值（Practical Value）<br>人与人之间本来就有互利的倾向，只要我们向用户证明我们的产品能够为他们节省时间或者金钱，他们就会大力宣传我们的产品。不过当我们绞尽脑汁想以产品信息将用户的视野淹没时，应该更清醒地意识到，应当让自己的信息能够优先凸显。为此，我们应该弄清什么东西会让用户觉得更优质、更加值得信赖，从而尽可能地向用户提供更具性价比的商品。</p><p>➢ 因素六：故事（Stories）<br>人们不仅会分享信息，更可能会讲述其中的相关故事。特洛伊木马之所以经久流<br>传，是因为故事本身就是传播道德和启示的血液。信息会经过闲散的聊天包装后逐渐传播。所以我们需要建立像特洛伊木马这样的传奇故事，用来注入我们的产品和思想。这也是为什么越来越多中高端产品开始重视对品牌故事的包装叙述。</p><h2 id="6-技术驱动营销"><a href="#6-技术驱动营销" class="headerlink" title="6 技术驱动营销"></a>6 技术驱动营销</h2><h3 id="6-1-营销是如何逐渐被技术接管的"><a href="#6-1-营销是如何逐渐被技术接管的" class="headerlink" title="6.1 营销是如何逐渐被技术接管的"></a>6.1 营销是如何逐渐被技术接管的</h3><p><strong>传统以营销为驱动力的增长是如何被技术颠覆的？</strong><br>1.营销和产品的边界正在变得模糊。过去的产品和营销是割裂的，互联网的兴起为软件产品的推广和交付带来全新可能。以云端同步工具 Dropbox 为例，每一位用户可以将它推介给自己的好友，双方都将因此获赠额外的500MB免费存储空间。这算是营销吗？当然，但它是技术团队开发出来的产物。这算是产品吗？的确，但其初衷是完成与营销密切挂钩的用户增长指标。</p><p>2.获得用户数据越来越容易。一个对普通用户而言有点难以接受的事实是：如果你获得的商品是免费的，那么你自己就是商品。</p><p>3.平台和开放接口（API）的涌现提供了更多机会。如今，你既可以花钱购买平台提供的广告展示机会，也可以借助第三方提供的接口（许多是免费的）从零开始搭建自己的产品、服务或营销工具，利用网络上现成的基础设施为你节省下一大笔费用。</p><p>4.营销者眼界逐渐放宽。周遭环境的变化让敏锐的营销者重新开始审视自身权责的边界。一种新技术或渠道的出现让他们眼前一亮，而当流量红利逐渐殆尽，他们不得不伺机待发，随时扑向另一个潜在机会。</p><h3 id="6-2-爬虫抓取：对网络公开资源的巧取豪夺"><a href="#6-2-爬虫抓取：对网络公开资源的巧取豪夺" class="headerlink" title="6.2 爬虫抓取：对网络公开资源的巧取豪夺"></a>6.2 爬虫抓取：对网络公开资源的巧取豪夺</h3><p>互联网是一座资源未被充分结构化的数据仓库，利用技术手段批量从已知网页或其他数据源下载资源的方法，就是爬虫抓取。执行这项任务的程序被称为网络爬虫（Web Crawler），它的职责在于采集、处理和储存。</p><p><strong>利用抓取技术解决产品增长的案例，包括：</strong><br>• 锁定早期用户。<br>• 调研竞争对手。<br>• 立项市场调查。<br>• 年底业绩交差。</p><p><strong>编写爬虫脚本抓取数据的基本步骤：</strong><br>1）选定目标。首先确定被抓取方提供了哪些服务，比如网站、移动应用、开放平台等。如果所有服务是等价的，不存在某一服务缺失功能，那么就优先从移动应用开始抓取。因为应用一般是通过API来获取数据，透过API抓取的数据方便后期的结构化整理。<br>2）技术方案。依实际情况而定。<br>3）性能优化。如果是单次抓取需求，并不需要持续稳定地一直跟踪抓取。复杂一些可以考虑用付费的第三方云服务。<br>4）资源结构。抓取网页，一般先研究页面上是否有统一的资源ID命名方式（分类、排行、导航、搜索通常能提供良好的组织结构和命名规则），然后递增、遍历或借助能批量处理特定结构的第三方库。<br>5）见招拆招。对于采取防抓取措施的对象，也有应对方法：如果对方要求注册，网页服务可以在request请求中把浏览器的cookie带上，移动应用抓包看看Auth Key然后在请求中带上；如果对方有 IP 限制，可以用代理池解决；如果有随机数时间校验，就用random命令生成一个对应长度的随机数来延时。<br>6）数据处理。脏数据要用正则表达式或者 beautifulsoup 这样的第三方包把想要的内容取出来，然后存放到数据库。<br>7）数据分析。</p><p><strong>如何反抓取，保护自己的数据资产</strong><br>封锁IP、封锁设备、限制单位时间内的访问频度、混淆代码增大识别难度等。将单一策略组合起来，能更有效地避免误判，以免将普通用户识别为爬虫。</p><h3 id="6-3-A-B测试：如何用数据定夺最终决策"><a href="#6-3-A-B测试：如何用数据定夺最终决策" class="headerlink" title="6.3 A/B测试：如何用数据定夺最终决策"></a>6.3 A/B测试：如何用数据定夺最终决策</h3><p>所谓<label style="color:red">A/B测试</label>，就是针对想调研的问题提供多种解决方案（比如两个页面），然后让一部分用户使用方案A，另一部分用户使用方案B，通过数据观察对比确定较优的方案，从而确定最终结果。世界上最好的产品经理也只能跑赢一半的A/B测试。</p><p>A/B测试的基本思想：<br>• 提供多个方案并行测试。<br>• 不同方案之间只存在一个变量。<br>• 以某种标准判定结果，筛出最优方案。</p><p>利用A/B测试优化产品，分为后验和试验两种策略。</p><ul><li>后验是通过统计分析目前用户的行为指标，以判断产品在哪些地方可以做改进，比如将白底黑字改为黑底白字是否影响页面停留时长、将按钮体积增大20%能否提升被点击的概率。</li><li>试验则是根据项目目标提出方案的假想，再经过A/B测试的结果对假想结果加以检验，从而推断是否应当上线某项改动。</li></ul><p>A/B测试中抽取的测试流量应当来源于该功能的真实使用者，核心在于无感知分流和对不同流量群准确观测。在产品初期，随意的改动都可能引发寥寥数个用户的测试曲线波动，造成数百上千倍的增长或下滑，这样的测试结果并不能落在有效的置信区间内。一般来说，产品的UV超过数千时的测试结果才有意义。</p><p>为了得出足以具有说服力的测试结论，你应当考虑以下两个要素。<br>• 转化率基准线（Baseline Conversion Rate），用于参考的控制组数据。<br>• 最少可检测效果（Minimum Detectable Effect），相较于控制组数据，产生多<br>少变化被视作试验产生了效果。</p><p>为了确保A/B测试工具本身的科学合理性，你可以试着跑一次“A/A测试”——实验组和控制组没有任何产品特性的差别，仅存在样本量上的变化。</p><h3 id="6-4-深度链接：如何合纵连横提升转化率"><a href="#6-4-深度链接：如何合纵连横提升转化率" class="headerlink" title="6.4 深度链接：如何合纵连横提升转化率"></a>6.4 深度链接：如何合纵连横提升转化率</h3><p>当今，一个个应用如同一座座老死不相往来的信息孤岛，彼此暗自较劲，争相将用户锁定在自己的平台上。例如，微信中只能通过内嵌浏览器查看有限的外部网页，某些竞争对手的产品受到严格的封锁与限制。这种巨头互掐之下的做法虽然确保了应用的活跃度与使用时长的增长，却剥夺了用户自由选择和高效获取信息的权利。</p><p>用户的真实需求是，在朋友圈看到时尚的服装单品推荐，能够直接点击文章里的链接，打开手机淘宝，直达购买页面。在这种转化流程中，用户主动操作步骤少、跳转方便灵活，因此能产生更高转化率。但在实际操作中，用户不得不先记住商品名称，再主动打开手机淘宝，从首页中搜索并找到对应商品，一个简单的需求经过多个步骤多次跳转才能实现。由此，一种打破移动应用彼此割据封闭状态的技术—— <label style="color:red">深度链接（Deeplink）</label> 应运而生。</p><p>深度链接的基本原理是：为移动应用的每一个子页面分配一个特定的链接，该链接能够被其他应用识别，经调用后打开应用并直达相应的子页面，从而彻底打破彼此间的壁垒。<br><img src="https://img-blog.csdnimg.cn/20200716172432665.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>深度链接技术涵盖的优势如下：<br>• 解决了跨域信息损耗的困境。<br>• 打破了入口垄断。<br>• 实现了入口的多样化和切片化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020071414384626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="用户增长" scheme="http://yoursite.com/tags/%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】9 机器学习系统的设计(Machine Learning System Design)</title>
    <link href="http://yoursite.com/2020/07/15/[Machine%20Learning]%209%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1(Machine%20Learning%20System%20Design)/"/>
    <id>http://yoursite.com/2020/07/15/[Machine%20Learning]%209%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1(Machine%20Learning%20System%20Design)/</id>
    <published>2020-07-15T06:49:12.000Z</published>
    <updated>2020-07-19T06:55:02.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200715144610243.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="9-Machine-Learning-System-Design-机器学习系统的设计"><a href="#9-Machine-Learning-System-Design-机器学习系统的设计" class="headerlink" title="9 Machine Learning System Design(机器学习系统的设计)"></a>9 Machine Learning System Design(机器学习系统的设计)</h2><h3 id="9-1-Prioritizing-What-to-Work-On"><a href="#9-1-Prioritizing-What-to-Work-On" class="headerlink" title="9.1 Prioritizing What to Work On"></a>9.1 Prioritizing What to Work On</h3><p>例子：一个垃圾邮件分类器算法。</p><p>为了解决这样一个问题，首先要确定如何选择并表达特征向量𝑥。例如可以选择由 100 个最常出现在垃圾邮件中的词所构成的列表，根据这些词是否有在邮件中出现，来获得特征向量（出现为 1，不出现为 0），尺寸为 100×1。<br><img src="https://img-blog.csdnimg.cn/2020071512515334.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>为了构建这个分类器算法，可以做很多事，例如：</p><ol><li>收集更多的数据，让我们有更多的垃圾邮件和非垃圾邮件的样本</li><li>基于邮件的路由信息开发一系列复杂的特征</li><li>基于邮件的正文信息开发一系列复杂的特征，包括考虑截词的处理</li><li>为探测刻意的拼写错误（把 watch 写成 w4tch）开发复杂的算法</li></ol><p>对于上面这些选项，难以决定应该在哪一项上花费时间和精力。不过当使用机器学习时，总是可以“头脑风暴”一下，想出一堆方法来试试，作出明智的选择，比随着感觉走要更好。</p><h3 id="9-2-Error-Analysis"><a href="#9-2-Error-Analysis" class="headerlink" title="9.2 Error Analysis"></a>9.2 Error Analysis</h3><p>构建一个学习算法的推荐方法为：</p><ol><li>构建一个简单并且能快速实现的算法，即便运行得不完美，但是也把它运行一遍，最后通过交叉验证来检验数据。</li><li>一旦做完，可以画出学习曲线，通过画出学习曲线，以及检验误差，来找出算法是否有高偏差和高方差的问题，或者别的问题。在这样分析之后，再来决定用更多的数据训练，或者加入更多的特征变量是否有用。</li><li>除了画出学习曲线之外，一件非常有用的事是误差分析。例如，当在构造垃圾邮件分类器时，看一看交叉验证数据集，然后亲自看一看哪些邮件被算法错误地分类。因此，通过这些被算法错误分类的垃圾邮件与非垃圾邮件，可以发现某些系统性的规律：什么类型的邮件总是被错误分类。思考怎样能改进分类器。例如，发现是否缺少某些特征，记下这些特征出现的次数。</li></ol><p>误差分析并不总能帮助我们判断应该采取怎样的行动。有时需要尝试不同的模型，然后进行比较，在模型比较时，用数值来判断哪一个模型更好更有效，通常是看交叉验证集的误差。</p><p>在垃圾邮件分类器例子中 ，对于“是否应该将 discount/discounts/discounted/discounting 处理成同一个词？”如果这样做可以改善算法，则会采用一些截词软件。误差分析并不能帮助做出这类判断，只能尝试采用和不采用截词软件这两种不同方案，然后根据数值检验的结果来判断哪一种更好。</p><p>推荐在交叉验证集上来实施误差分析，而不是在测试集上。</p><h3 id="9-3-Error-Metrics-for-Skewed-Classes-偏斜类的误差评估"><a href="#9-3-Error-Metrics-for-Skewed-Classes-偏斜类的误差评估" class="headerlink" title="9.3 Error Metrics for Skewed Classes(偏斜类的误差评估)"></a>9.3 Error Metrics for Skewed Classes(偏斜类的误差评估)</h3><p><label style="color:red">类偏斜（Skewed Classes）</label> 情况表现为训练集中有非常多的同一种类的实例，只有很少或没有其他类的实例。例如以算法来预测癌症是否是恶性的，在训练集中，只有 0.5%的实例是恶性肿瘤。假设编写一个非学习的算法，在所有情况下都预测肿瘤是良性的，那么误差只有 0.5%。然而通过训练而得到的神经网络算法却有 1%的误差。这时，误差的大小是不能视为评判算法效果的依据的。</p><p><label style="color:red">查准率（Precision）和查全率（Recall）</label> 将算法预测的结果分成四种情况：</p><ol><li>正确肯定（True Positive,TP）：预测为真，实际为真</li><li>正确否定（True Negative,TN）：预测为假，实际为假</li><li>错误肯定（False Positive,FP）：预测为真，实际为假</li><li>错误否定（False Negative,FN）：预测为假，实际为真</li></ol><p>则：查准率=TP/(TP+FP)。例，在所有我们预测有恶性肿瘤的病人中，实际上有恶性肿瘤的病人的百分比，越高越好。<br>查全率=TP/(TP+FN)。例，在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。</p><p>这样，对于我们刚才那个总是预测病人肿瘤为良性的算法，其查全率是 0。<br><img src="https://img-blog.csdnimg.cn/20200715134329675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="9-4-Trading-Off-Precision-and-Recall-查准率和查全率之间的权衡"><a href="#9-4-Trading-Off-Precision-and-Recall-查准率和查全率之间的权衡" class="headerlink" title="9.4 Trading Off Precision and Recall(查准率和查全率之间的权衡)"></a>9.4 Trading Off Precision and Recall(查准率和查全率之间的权衡)</h3><p>在很多应用中，我们希望能够保证查准率和查全率的相对平衡。</p><p>继续沿用刚才预测肿瘤性质的例子。假使，算法输出的结果在 0-1 之间，使用阀值 0.5 来预测真和假。<br><img src="https://img-blog.csdnimg.cn/20200715140646134.PNG#pic_center" alt="在这里插入图片描述"></p><ul><li>查准率(Precision)=TP/(TP+FP) 。在所有预测有恶性肿瘤的病人中，实际上有恶 性肿瘤的病人的百分比，越高越好。</li><li>查全率(Recall)=TP/(TP+FN)。在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。</li><li>如果希望只在非常确信的情况下预测为真（肿瘤为恶性），即希望更高的查准率，可以使用比 0.5 更大的阀值，如0.7，0.9。这样做我们会减少错误预测病人为恶性肿瘤的情况，同时却会增加未能成功预测肿瘤为恶性的情况。</li><li>如果希望提高查全率，尽可能地让所有有可能是恶性肿瘤的病人都得到进一步地 检查、诊断，可以使用比 0.5 更小的阀值，如 0.3。</li></ul><p>将不同阈值情况下，查全率与查准率的关系绘制成图表，曲线的形状根据数据的不同而不同：<br><img src="https://img-blog.csdnimg.cn/20200715141018277.PNG#pic_center" alt="在这里插入图片描述"><br>希望有一个帮助我们选择这个阈值的方法。<br><img src="https://img-blog.csdnimg.cn/20200715141425862.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一种方法是计算 F1 值（F1 Score），其计算公式为：<br><img src="https://img-blog.csdnimg.cn/20200715141508777.png#pic_center" alt="在这里插入图片描述"><br>选择使得 F1 值最高的阀值。</p><h3 id="9-5-Data-For-Machine-Learning"><a href="#9-5-Data-For-Machine-Learning" class="headerlink" title="9.5 Data For Machine Learning"></a>9.5 Data For Machine Learning</h3><p>例：希望通过机器学习算法来区分常见的易混淆的单词，尝试了许多种不同的算法，发现数据量非常大时，这些不同类型的算法效果都很好。<br><img src="https://img-blog.csdnimg.cn/20200715143139923.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如上折线图所示，首先大部分算法，都具有相似的性能，其次，随着训练数据集的增大，在横轴上代表以百万为单位的训练集大小，从 0.1 个百万到 1000 百万，也就是到了 10亿规模的训练集的样本，这些算法的性能也都对应地增强了。</p><p>事实上，如果选择任意一个算法，可能是选择了一个”劣等的”算法，如果给这个劣等算法更多的数据，那么从这些例子中看起来的话，它看上去很有可能会其他算法更好，甚至会比”优等算法”更好。像这样的结果，引起了一种在机器学习中的普遍共识：”取得成功的人不是拥有最好算法的人，而是拥有最多数据的人”。</p><p>另一种考虑这个问题的角度是为了有一个高性能的学习算法，希望它不要有高的偏差和方差。因此偏差问题，将通过确保有一个具有很多参数的学习算法来解决，以便能够得到一个较低偏差的算法，并且通过用非常大的训练集来保证。<br><img src="https://img-blog.csdnimg.cn/20200715144013603.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在此没有方差问题，这算法将没有方差，并且通过将这两个值放在一起，最终可以得到一个低误差和低方差的学习算法，能够很好地测试测试数据集。从根本上来说，这是一个关键的假设：特征值有足够的信息量，且有一类很好的函数，这是为什么能保证低误差的关键所在。它有大量的训练数据集，这能保证得到更多的方差值，因此这提出了一些可能的条件，如果你有大量的数据，而且你训练了一种带有很多参数的学习算法，那么这将会是一个很好的方式，来提供一个高性能的学习算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200715144610243.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Skewed Classes" scheme="http://yoursite.com/tags/Skewed-Classes/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】8 应用机器学习的建议(Advice for Applying Machine Learning)</title>
    <link href="http://yoursite.com/2020/07/14/[Machine%20Learning]%208%20%E5%BA%94%E7%94%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%BB%BA%E8%AE%AE(Advice%20for%20Applying%20Machine%20Learning)/"/>
    <id>http://yoursite.com/2020/07/14/[Machine%20Learning]%208%20%E5%BA%94%E7%94%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%BB%BA%E8%AE%AE(Advice%20for%20Applying%20Machine%20Learning)/</id>
    <published>2020-07-14T10:10:07.000Z</published>
    <updated>2020-07-19T07:00:34.439Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200714180442551.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="8-Advice-for-Applying-Machine-Learning-应用机器学习的建议"><a href="#8-Advice-for-Applying-Machine-Learning-应用机器学习的建议" class="headerlink" title="8 Advice for Applying Machine Learning(应用机器学习的建议)"></a>8 Advice for Applying Machine Learning(应用机器学习的建议)</h2><h3 id="8-1-Introduction"><a href="#8-1-Introduction" class="headerlink" title="8.1 Introduction"></a>8.1 Introduction</h3><p>获得更多的训练实例——通常是有效的，但代价较大，下面的方法也可能有效，可考虑先采用下面的几种方法。<br>1.尝试减少特征的数量<br>2.尝试获得更多的特征<br>3.尝试增加多项式特征<br>4.尝试减少正则化程度𝜆<br>5.尝试增加正则化程度𝜆<br>不应该随机选择上面的某种方法来改进算法，而是运用一些机器学习诊断法来确定上面哪些方法对算法是有效的。</p><p>接下来将介绍怎样评估机器学习算法的性能，然后再开始讨论这些方法，它们也被称为”机器学习诊断法”。“诊断法”的意思是：这是一种测试法，你通过执行这种测试，能够深入了解某种算法到底是否有用。这通常也能够告诉你，要想改进一种算法的效果，什么样的尝试，才是有意义的。这些诊断法的执行和实现，是需要花些时间的，有时候确实需要花很多时间来理解和实现，但这样做的确是把时间用在了刀刃上。</p><h3 id="8-2-Evaluating-a-Hypothesis"><a href="#8-2-Evaluating-a-Hypothesis" class="headerlink" title="8.2 Evaluating a Hypothesis"></a>8.2 Evaluating a Hypothesis</h3><p><img src="https://img-blog.csdnimg.cn/20200714153351469.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在确定学习算法参数的时候，需要考虑的是选择参量来使训练误差最小化。另外，仅仅是因为这个假设具有很小的训练误差，并不能说明它就一定是一个好的假设函数。例如，可能发生了过拟合问题。</p><p>那么，该如何判断一个假设函数是过拟合的呢？对于这个简单的例子，可以对假设函数ℎ(𝑥)进行画图，然后观察图形趋势，但对于特征变量不止一个的这种一般情况，还有像有很多特征变量的问题，想要通过画出假设函数来进行观察，就会变得很难甚至是不可能实现。因此，需要另一种方法来评估假设函数过拟合。</p><p>为了检验算法是否过拟合，将数据分成训练集和测试集，通常用 70%的数据作为<br>训练集，用剩下 30%的数据作为测试集。很重要的一点是训练集和测试集均要含有各种类型的数据，通常需要对数据进行“洗牌”，然后再分成训练集和测试集。<img src="https://img-blog.csdnimg.cn/20200714153540170.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br>测试集评估在通过训练集让模型学习得出其参数后，对测试集运用该模型，有两种方式计算误差：<br>1.对于线性回归模型，利用测试集数据计算代价函数𝐽<br>2.对于逻辑回归模型，除了可以利用测试数据集来计算代价函数外：<br><img src="https://img-blog.csdnimg.cn/20200714163139716.png" alt="在这里插入图片描述"><br>误分类的比率，对于每一个测试集实例，计算：<br><img src="https://img-blog.csdnimg.cn/20200714163307224.PNG#pic_center" alt="在这里插入图片描述"><br>然后对计算结果求平均。</p><h3 id="8-3-Model-Selection-and-Train-Validation-Test-Sets"><a href="#8-3-Model-Selection-and-Train-Validation-Test-Sets" class="headerlink" title="8.3 Model Selection and Train_Validation_Test Sets"></a>8.3 Model Selection and Train_Validation_Test Sets</h3><p><img src="https://img-blog.csdnimg.cn/20200714163458637.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>假设要在 10 个不同次数的二项式模型之间进行选择，显然越高次数的多项式模型越能够适应训练数据集，但是适应训练数据集并不代表着能推广至一般情况，应该选择一个更能适应一般情况的模型。此时需要使用交叉验证集来帮助选择模型。</p><p>即：使用 60%的数据作为训练集，使用 20%的数据作为交叉验证集，使用 20%的数据作为测试集。<br><img src="https://img-blog.csdnimg.cn/20200714163712246.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>模型选择的方法为：</p><ol><li>使用训练集训练出 10 个模型</li><li>用 10 个模型分别对交叉验证集计算得出交叉验证误差（代价函数的值）</li><li>选取代价函数值最小的模型</li><li>用步骤 3 中选出的模型对测试集计算得出推广误差（代价函数的值）</li></ol><p><img src="https://img-blog.csdnimg.cn/20200714163835857.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="8-4-Diagnosing-Bias-vs-Variance"><a href="#8-4-Diagnosing-Bias-vs-Variance" class="headerlink" title="8.4 Diagnosing Bias vs. Variance"></a>8.4 Diagnosing Bias vs. Variance</h3><p>当运行一个学习算法时，如果这个算法的表现不理想，那么多半是出现两种情况：要么是偏差比较大，要么是方差比较大。换句话说，出现的情况要么是欠拟合，要么是过拟合问题。那么这两种情况，哪个和偏差有关，哪个和方差有关，或者是不是和两个都有关？搞清楚这一点非常重要，因为能判断出现的情况是这两种情况中的哪一种。其实是一个很有效的指示器，指引着可以改进算法的最有效的方法和途径。<br><img src="https://img-blog.csdnimg.cn/202007141657370.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通常会通过将训练集和交叉验证集的代价函数误差与多项式的次数绘制在同一张图表上来帮助分析：<br><img src="https://img-blog.csdnimg.cn/20200714165636740.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200714170214653.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对于训练集，当 𝑑 较小时，模型拟合程度更低，误差较大；随着 𝑑 的增长，拟合程度提高，误差减小。<br>对于交叉验证集，当 𝑑 较小时，模型拟合程度低，误差较大；但是随着 𝑑 的增长，误差呈现先减小后增大的趋势，转折点是我们的模型开始过拟合训练数据集的时候。</p><p>如果交叉验证集误差较大，如何判断是方差还是偏差呢？根据上面的图表，得出:<br><img src="https://img-blog.csdnimg.cn/20200714170427983.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>训练集误差和交叉验证集误差近似时：偏差/欠拟合</li><li>交叉验证集误差远大于训练集误差时：方差/过拟合</li></ul><h3 id="8-5-Regularization-and-Bias-Variance"><a href="#8-5-Regularization-and-Bias-Variance" class="headerlink" title="8.5 Regularization and Bias/Variance"></a>8.5 Regularization and Bias/Variance</h3><p>在训练模型的过程中，一般会使用一些正则化方法来防止过拟合。但是可能会正则化的程度太高或太小了，即在选择 λ 的值时也需要思考与刚才选择多项式模型次数类似的问题。<br><img src="https://img-blog.csdnimg.cn/20200714170902750.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择一系列的想要测试的 𝜆 值，通常是 0-10 之间的呈现 2 倍关系的值（如：0,0.01,0.02,0.04,0.08,0.15,0.32,0.64,1.28,2.56,5.12,10共 12 个）。同样把数据分为训练集、交叉验证集和测试集。<br><img src="https://img-blog.csdnimg.cn/20200714172426323.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择𝜆的方法为：<br>1.使用训练集训练出 12 个不同程度正则化的模型<br>2.用 12 个模型分别对交叉验证集计算的出交叉验证误差<br>3.选择得出交叉验证误差最小的模型<br>4.运用步骤 3 中选出模型对测试集计算得出推广误差，也可以同时将训练集和交叉验证集模型的代价函数误差与 λ 的值绘制在一张图表上：<br><img src="https://img-blog.csdnimg.cn/20200714172535993.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>当 𝜆 较小时，训练集误差较小（过拟合）而交叉验证集误差较大</li><li>随着 𝜆 的增加，训练集误差不断增加（欠拟合），而交叉验证集误差则是先减小后增加</li></ul><h3 id="8-6-Learning-Curves"><a href="#8-6-Learning-Curves" class="headerlink" title="8.6 Learning Curves"></a>8.6 Learning Curves</h3><p>学习曲线可用于判断某一个学习算法是否处于偏差、方差问题。学习曲线是学习算法的一个很好的<label style="color:red">合理检验（sanity check）</label>。学习曲线是将训练集误差和交叉验证集误差作为训练集实例数量（𝑚）的函数绘制的图表。</p><p>即，如果有 100 行数据，从 1 行数据开始，逐渐学习更多行的数据。思想是：当训练较少行数据的时候，训练的模型将能够非常完美地适应较少的训练数据，但是训练出来的模型却不能很好地适应交叉验证集数据或测试集数据。<br><img src="https://img-blog.csdnimg.cn/20200714173125794.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如何利用学习曲线识别高偏差/欠拟合：作为例子，尝试用一条直线来适应下面的数据，可以看出，无论训练集有多么大误差都不会有太大改观：<br><img src="https://img-blog.csdnimg.cn/2020071417355684.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>也就是说在高偏差/欠拟合的情况下，增加数据到训练集不一定能有帮助。</p><p>如何利用学习曲线识别高方差/过拟合：假设使用一个非常高次的多项式模型，并且正则化非常小，可以看出，当交叉验证集误差远大于训练集误差时，往训练集增加更多数据可以提高模型的效果。<br><img src="https://img-blog.csdnimg.cn/20200714173709702.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>也就是说在高方差/过拟合的情况下，增加更多数据到训练集可能可以提高算法效果。</p><h3 id="8-7-Summary"><a href="#8-7-Summary" class="headerlink" title="8.7 Summary"></a>8.7 Summary</h3><ol><li>获得更多的训练实例——解决高方差</li><li>尝试减少特征的数量——解决高方差</li><li>尝试获得更多的特征——解决高偏差</li><li>尝试增加多项式特征——解决高偏差</li><li>尝试减少正则化程度 λ——解决高偏差</li><li>尝试增加正则化程度 λ——解决高方差</li></ol><p><strong>神经网络的方差和偏差：</strong><br><img src="https://img-blog.csdnimg.cn/20200714180238125.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用较小的神经网络，类似于参数较少的情况，容易导致高偏差和欠拟合，但计算代价较小使用较大的神经网络，类似于参数较多的情况，容易导致高方差和过拟合，虽然计算代价比较大，但是可以通过正则化手段来调整而更加适应数据。通常选择较大的神经网络并采用正则化处理会比采用较小的神经网络效果要好。</p><p>对于神经网络中的隐藏层的层数的选择，通常从一层开始逐渐增加层数，为了更好地作选择，可以把数据分为训练集、交叉验证集和测试集，针对不同隐藏层层数的神经网络训练神经网络， 然后选择交叉验证集代价最小的神经网络。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200714180442551.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Learning Curves" scheme="http://yoursite.com/tags/Learning-Curves/"/>
    
      <category term="Bias/Variance" scheme="http://yoursite.com/tags/Bias-Variance/"/>
    
  </entry>
  
  <entry>
    <title>《增长黑客实战》（第1-3章）</title>
    <link href="http://yoursite.com/2020/07/14/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC1-3%E7%AB%A0%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/14/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E5%AE%9E%E6%88%98%E3%80%8B%EF%BC%88%E7%AC%AC1-3%E7%AB%A0%EF%BC%89/</id>
    <published>2020-07-14T07:11:57.000Z</published>
    <updated>2020-07-14T07:12:00.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020071414384626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="1-检验商业计划"><a href="#1-检验商业计划" class="headerlink" title="1 检验商业计划"></a>1 检验商业计划</h2><h3 id="1-1-伪需求"><a href="#1-1-伪需求" class="headerlink" title="1.1 伪需求"></a>1.1 伪需求</h3><p>对于初创公司能否存活的关键：如何快速地迭代、如何在现金流耗尽之前验证商业模式。常见的两种失败：</p><ul><li>市场占有失败</li><li>产品研发失败</li></ul><p>其中，前者的比例远远高于后者。</p><p>失败的项目中有超过七成错在满足的是伪需求。伪需求产品的诞生，主要可归结为五种原因。</p><ul><li>1.创始人的个人梦想情怀<br>“弱小和无知不是生存的障碍，傲慢才是”</li><li>2.寻求技术的商业化路径时结合生硬<br>“手里拿着锤子，看什么都是钉子”</li><li>3.误将自身需求放大为整个市场需求</li><li>4.以感性体验代替理性思考</li><li>5.盲目抄袭市场热点，缺乏对商业本质的深度认识</li></ul><h3 id="1-2-快速验证商业计划"><a href="#1-2-快速验证商业计划" class="headerlink" title="1.2 快速验证商业计划"></a>1.2 快速验证商业计划</h3><p>商业计划书（BP，business plan）<label style="color:red">P/MF，Product/Market Fit</label>，产品与市场相契合。用户级产品和企业级SaaS产品的业界参考标准如下。</p><p><strong>用户级产品标准</strong></p><ul><li>每周使用天数超过3天</li><li>初始日新增用户DAU超过100</li><li>30%新用户次日留存率</li><li>达到10万用户量</li></ul><p><strong>SaaS产品标准</strong></p><ul><li>5%付费转化率</li><li>LTV/CAC 大于 3，即用户生命周期价值/获取成本 大于3</li><li>月流失率 小于 2%</li><li>月销售流水达到10万元</li></ul><p><strong>快速寻找到P/MF的方法</strong></p><ul><li>精益画布</li><li>最小化可行产品（MVP）</li><li>设计冲刺（Sprint）</li></ul><h3 id="1-3-产品价值和建立付费增长框架"><a href="#1-3-产品价值和建立付费增长框架" class="headerlink" title="1.3 产品价值和建立付费增长框架"></a>1.3 产品价值和建立付费增长框架</h3><p>百度贴吧之父俞军提出过一个产品价值公式：<br>产品价值 = （新体验-旧体验）-换用成本</p><p>建立系统性的付费增长（Paid Growth）框架，每多花一元钱都能明确地讲出这一元的付出究竟是降低了整体获客成本、圈占到更大市场份额，抑或是让竞争对手不得不为此多花费两天的额外成本。</p><p><strong>互联网产品增值的“不可能三角”</strong></p><ul><li>新增用户规模</li><li>用户留存率</li><li>营收变现</li></ul><ol><li>追求新增、留存，牺牲营收<br>—— “烧钱补贴”</li><li>追求留存、营收，暂缓新增<br>—— 在同质化竞争之下，产品只能从加强专业性、提升用户体验等角度寻求溢价。</li><li>追求新增、营收，放弃留存<br>—— 如同设赌场一样，本着捞一笔是一笔的态度，只要有足够的用户流量支撑，最终都能收割韭菜，保证赚钱。</li></ol><p><strong>如何付费购买增长，保证产品获取长久稳健的流量？</strong></p><ul><li>购买用户数量<br>—— 适用于完全竞争市场，采用该方式的前提是CAC（用户获取成本）必须小于LTV（用户生命周期总价值）。即，花5美元买来的用户，最后会让你赚10美元。</li><li>购买增长速度<br>—— 牺牲短期营收，快速跑马圈地。目的是垄断市场。垄断利润给了企业规划长远未来的资本，但前提可能是牺牲短期营收，CAC大于LTV。</li><li>购买流动性<br>—— 促成更多的交易。如果项目是建立一个双边市场，那么相比供求双方的数量，更直接与估值挂钩的是流动性。只有产生流动性才算得出客单价、复购率、生命周期中价值等数据。 </li></ul><h3 id="1-4-增长的三个阶段：选择最恰当时机和目标"><a href="#1-4-增长的三个阶段：选择最恰当时机和目标" class="headerlink" title="1.4 增长的三个阶段：选择最恰当时机和目标"></a>1.4 增长的三个阶段：选择最恰当时机和目标</h3><p><img src="https://img-blog.csdnimg.cn/20200714133027404.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><table><thead><tr><th></th><th>种子期</th><th>成型期</th><th>增长期</th></tr></thead><tbody><tr><td>目标</td><td>验证产品，达到P/FM状态</td><td>理解用户的使用行为如何让各项指标产生波动，比如DAU波动的原因及改进方法</td><td>增长、增长、高速增长</td></tr><tr><td>指标</td><td>紧盯留存率</td><td>开始关注每周或每月的用户增长，并设法降低CPA （Cost Per Action）、提高LTV</td><td>增长率是主要目标，但仍需留意投资回报期，也就是多久能把之前亏损的钱赚回来</td></tr><tr><td>用户规模</td><td>在保证平稳持续的前提下，缓慢导入一些种子用户，用于进行各种试验，最终服务于达成P/FM的目的</td><td>允许更多的真实用户加入使用，但仍要注意留存率</td><td>已找到性价比在接受范围的推广渠道，就开闸泄洪让用户鱼贯而入吧</td></tr><tr><td>推广渠道</td><td>在多种不同类型的推广渠道上小规模地测试投入产出比，找到值得重点投入的主力渠道</td><td>一边尝试新的渠道，一边在已验证过的渠道中选择投入产出比最高的一个继续加码投入</td><td>花费80%的精力在主要推广渠道上</td></tr><tr><td>产品优化</td><td>在产品方向令人满意前，着眼于大的优化点，比如更换目标人群、改善行为路径、推翻核心流程</td><td>既着眼于大的优化点，也开始着手解决小问题</td><td>打磨细节</td></tr><tr><td>团队成员</td><td>不需要专门的增长黑客角色，但至少保证团队里有一个人在工作中将80%的时间用于思考如何获取增长</td><td>开始尝试建立专门的增长团队，或选拨有经验的产品经理专职负责聚焦增长</td><td>增长团队扩增</td></tr></tbody></table><h3 id="1-5-对产品增进认知"><a href="#1-5-对产品增进认知" class="headerlink" title="1.5 对产品增进认知"></a>1.5 对产品增进认知</h3><p>产品：<br>    * 用户为什么使用产品？他们期待的核心价值是什么？<br>    * 用户在产品中一步步的使用路径是怎样的？<br>    * 哪些特性或功能，更容易让新增用户转化成长期活跃的忠诚用户？<br>    * 是什么问题直接导致了一部分用户的离开？</p><p>用户：<br>    * 他们年龄多大，住在哪里，大多数从事什么职业？（建立你的用户画像。）<br>    * 他们如何描述我们试图解决的问题，以及看待我们提供的解决方案？<br>    * 在实际使用过程中，他们有哪些疑虑或恐慌？<br>    * 他们会将我们的产品与哪些品牌或事物关联在一起？</p><p>推广渠道：<br>    * 我们现行的推广渠道是如何运作的？<br>    * 哪些渠道的性价比最高，哪些渠道的用户质量最高，哪些渠道更便宜？<br>    * 如何让我们的网页在搜索引擎里取得更高的排名？<br>    * 怎样群发广告邮件能较好地避免被系统屏蔽或引发用户反感？</p><p>认知过程：<br>    * 我们是否以系统化的思维，正确地收集并分析了所有试验数据？<br>    * 我们挑选试验的标准，是基于手头的资源限制，还是预期产生的影响？<br>    * 我们是否在每一次的试验之前，清晰地提出了某种假设，并有意识地去验证它？<br>    * 对我们用户新增渠道影响最深远的一次近期变化是什么？我们花了多久发现并做出调整？</p><p>获得试验结论：<br>    * 我们是否有及时记录试验结论并交流分享的机制，还是它们只停留在参与者各自脑袋里？<br>    * 认知结论是否以一种便于分享的形式，对团队内的所有成员开放？<br>    * 我们是否坦然地交流了所有的认知结论，包括那些让人不快的负面结论？（记得 交流时邀请黑帽思考者参与。）<br>    * 是否有人刻意绕过某些障碍或掩盖错误，对影响认知结论的因素避而不谈？</p><h2 id="2-组建增长团队"><a href="#2-组建增长团队" class="headerlink" title="2 组建增长团队"></a>2 组建增长团队</h2><p><strong>增长黑客的工作</strong><br>    * 关注整个用户生命周期，而不仅仅是获客阶段<br>    * 通过数据驱动的方法，不断试验迭代<br>    * 将增长进制产品化，把增长做到产品里面去</p><p><strong>团队成员角色</strong><br>增长负责人、增长产品经理、增长工程师、设计师/交互设计师、增长营销经理、数据分析师等。</p><p><strong>增长团队日常工作</strong><br>主要围绕制定策略、实施方案、招聘人才、打造文化四项内容展开。</p><ul><li>制定策略<br>——  制定策略就是在采取下一步具体行动之前，对整体框架和路线图进行梳理，找出影响增长的方法、建立增长模型。<br>举个例子，你可以将增长策略分解为以下这些基本问题： 1）我应当如何提升下载/注册转化率？ 2）我能在用户初次使用的前N天内做些什么来激发活跃度？ 3）影响用户参与度和留存率的手段都有哪些？ 4）如何召回即将或已经流失的用户，让他们重新对产品发生兴趣？<br>接着，寻求解决上述问题的新渠道，或是对既有渠道进行优化改进，例如尝试病毒邀请机制、购买搜索引擎关键词、导入通讯录联系人、优化注册确认邮件送达率等。</li><li>实施方案<br>——  增长策略落实到执行阶段，就产生了待办列表上的一堆具体的计划任务。要做的是将这些点子，通过技术手段实现出来，并且不断打磨优化，提升方案的最终转化率。<br>值得注意的潜在细节包括但不限于： • 用按钮取代文字链接 • 测试按钮的位置、尺寸、用语和配色 • 提升页面和服务器的响应速度，降低延迟 • 优化网页标题、副标题、关键词、描述 • 应用适当的配图尺寸和文件格式 • 在页面加入客户证言来加强可信度 • 加入直观的宣传视频降低使用门槛 • 优化付费关键词对应的着陆页 • 简化注册表单，去除或延后非必要字段 • 用第三方账号授权登录代替注册独立账号 • 给用户施加社交压力，如写上“你的N个朋友正在使用” • 测试电子邮件的标题、内容、发送者地址、发送频率</li></ul><h2 id="3-提升协作效率"><a href="#3-提升协作效率" class="headerlink" title="3 提升协作效率"></a>3 提升协作效率</h2><h3 id="3-1-AARRR流量漏斗模型"><a href="#3-1-AARRR流量漏斗模型" class="headerlink" title="3.1 AARRR流量漏斗模型"></a>3.1 AARRR流量漏斗模型</h3><p><img src="https://img-blog.csdnimg.cn/20200714134346384.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>Acquisition（获取用户）</strong></p><p>互联网产品获取用户流量的常见手段繁多。<br>诸如： • 在目标人群集中的网站平台购买广告位 • 搜索引擎优化（SEO）及搜索引擎营销（SEM） • 内容营销、社群营销、病毒营销 • 撰写软文或公关稿 • 预装、刷机 当你成功吸引到网站的新房客，或是让应用被下载安装一次，AARRR流量漏斗就此启动运行。</p><p><strong>Activation（激发活跃）</strong></p><p>互联网产品可以通过交互界面和机制策略的设计，激发用户使用的活跃度，让他们尽快完成某些“指定动作”，从而产生商业价值。<br>例如： • 简化填写步骤，促使用户尽快填写并提交调查表 • 提供注册奖励，新用户绑定手机或信用卡即赠送5元代金券 • 加强被动引导，用排行榜、热门搜索等帮用户发现更多内容 • 预测购物偏好，将用户可能感兴趣的商品直接推荐到购物车 • 设置积分等级，用户发布一条微博或上传一张照片就能增加积分</p><p><strong>Retention（提高留存）</strong></p><p>留住一个老用户的成本要远远低于获取一个新用户的成本。为了再次赢回他们的注意力，提高留存率。<br>可以采取： • 增加高频刚需的功能，例如网盘自动为用户上传备份手机相册照片 • 优化产品性能，如判断用户的网络环境下载对应大小的数据包 • 定期发送产品升级优化的通知邮件，维持品牌曝光 • 用好友的私信提醒、陌生人添加好友的邀请等社交关系来召回 • 根据用户生命周期模型，在预测到用户可能流失时主动发送优惠折扣券</p><p><strong>Revenue（增加收入）</strong></p><p>以免费大行其道的互联网行业，除了直接向用户收费以外，还可以通过广告展示、业务分成、技术支持等方式向其他利益方收取费用。<br>常见的增加收入策略有： • 让电商顾客买更多东西，如捆绑推荐关联商品 • 让免费用户为增值服务买单，如层出不穷的QQ秀及网络游戏里的皮肤套装 • 为犹豫不决的潜在用户提供一个月免费试用，到期若不主动取消则自动续订 • 让已经付费者升级付费套餐，如视频网站的白银会员升级到黄金会员后，每月可享受更多独播大片 • 涨价，如付费社群可采用阶梯性定价，让晚加入者支付更高成本</p><p><strong>Referral（传播推荐）</strong></p><p>有关传播推荐的典型案例如下： • 以Dropbox为代表的云存储产品，若邀请到一名好友注册，双方就都能获赠额外250MB网络免费空间 • 互联网金融产品，邀请好友注册并绑定信用卡就能获赠10元礼金 • 打车应用订单完成后，向用户提供代金红包并鼓励分享给好友 • 图片社交产品，只有先分享到朋友圈才能解锁某款独特的滤镜或贴纸 • 在微信里开展的母婴电商、时尚潮品销售，可通过加盟代理和三级分销的方式获得订单优惠和返利</p><p>从获取用户到传播推荐，整个AARRR流量漏斗构成了一道产品使用周期的闭环。增长团队正是通过不断优化这五个关键步骤，减少每个环节中不必要的损耗，提高转化效率，从而不断扩大用户群体的数量和质量，为增长保驾护航。</p><h3 id="3-2-如何套用流量漏斗模型，提高转化率"><a href="#3-2-如何套用流量漏斗模型，提高转化率" class="headerlink" title="3.2 如何套用流量漏斗模型，提高转化率"></a>3.2 如何套用流量漏斗模型，提高转化率</h3><p>案例：信用卡优惠应用如何提升转化率</p><p>我的一客户朋友开发了一款展示信用卡优惠的手机应用。用户手动输入卡号或拍摄扫描，将信用卡绑定到个人账号后，就能定期收到这张卡的专属优惠信息，例如周二刷卡冰淇淋半价、周六电影票八折兑换等。</p><p>这款产品在早期推广时陷入了困境。用户并没有如预想的那样蜂拥而至，借助有限的免费推广渠道发布的营销广告和软文阅读曝光量寥寥。即使是注册用户，也在匆匆扫了几眼过后，就急不可耐地卸载了。这究竟是怎么一回事呢？</p><p>套用AARRR流量漏斗模型，分析了这款应用的流量转化路径。<br>• 获取用户：利用微信公众号做内容营销聚拢粉丝，提醒粉丝下载应用<br>• 激发活跃：引导用户绑定信用卡信息，作为推送内容的基础<br>• 提高留存：通过推送通知（Push Notification）等形式定期推送商家优惠券<br>• 增加收入：根据用户广告内容的点击和转化，向合作商家收取分成<br>• 传播推荐：邀请用户将有价值的内容分享出去</p><p>厘清上述转化脉络后，我们就可以针对每个环节加以优化。</p><p>• 在微信公众号里，原先每日推送的文章聚焦在信用卡使用知识上，受众狭窄，传播受限。既然我们的目标是以此聚集潜在用户，就不必苛求人群精准，而应当扩大基数，发布内容从“垂直人群的强需求”向“宽泛人群的普遍需求”转变，为下一步转化提供充足的“分母”。所以，调整后的策略是：增加优惠活动、美食旅行、品质生活等泛目标人群中喜闻乐见且有传播力的内容，提高攒粉速率。</p><p>• 提醒粉丝下载安装阶段，用小恩小惠增加说服的筹码：注册即送 10 元专享代金券，或是指定餐厅优惠体验资格（注意要与前面通过公众号文章吸引来的目标人群兴趣点吻合）。</p><p>• 不要在用户首次启动时，就立即催促他绑定信用卡，此时大部分人会有抵触心理。正确的做法是先让他自由地浏览，体验到产品的价值感，然后再试图诱导转化。例如在呈现的高质量优惠信息详情底部设置“立即领取”按钮，未绑卡用户一旦点击，就提醒他需要先绑卡才可享用。诉诸利益，而非恳请或强迫。</p><p>• 用户绑卡后，更聪明地向其推送优惠信息。比如，工作日侧重推送金融证券、商旅服务、正餐餐厅，周末则提供娱乐休闲聚会相关资讯。如果结合用户画像，效果更佳。</p><p>• 在尝到甜头时，才提醒分享，例如在成功兑换优惠之时提醒。</p><h3 id="3-3-从增长模型中挖掘机会"><a href="#3-3-从增长模型中挖掘机会" class="headerlink" title="3.3 从增长模型中挖掘机会"></a>3.3 从增长模型中挖掘机会</h3><p>创建增长模型的三个核心原则<br>    * 覆盖全面<br>    * 逻辑精简<br>    * 全员贯彻</p><p>增长模型应当形如：<br><img src="https://img-blog.csdnimg.cn/20200714135257832.PNG#pic_center" alt="在这里插入图片描述"><br>以美国最大的电商网站亚马逊为例，它的增长模型是：<br><img src="https://img-blog.csdnimg.cn/20200714135315661.PNG#pic_center" alt="在这里插入图片描述"><br>A=垂直品类拓展（Vertical Expansion）<br>B=单个垂直品类商品库存（Product Inventory Per Vertical）<br>C=单个商品页面浏览量（Traffic Per Product Page）<br>D=购买转化率（Coversion to Purchase）<br>E=客单价（Average Purchase Value）<br>F=重复购买行为（Repeat Purchase Behavior）</p><p>据此归纳出的亚马逊增长模型，可指导管理层关注三个增长方向：<br>    * 组织市场研究团队，探索新的商品品类和服务领域。<br>    * 调配采购团队，加强商品采购和货物流通。<br>    * 建立线上优化团队，运用SEO、付费广告、A/B测试等途径优化页面浏览到下单购买的整个流程。</p><p>增长模型左边的增长目标以具体的数字指标体现，是你的核心指标，又被称作“North Star Metric”（北极星指标），或“OMTM”（One Metric That Matters，即唯一重要的指标）。</p><p>设定核心指标时，必须避免 <label style="color:red">“虚荣指标”（Vanity Metric）</label>，也就是让团队误以为自己好像在进步，但实际上却没有取得什么进展的浮夸指标。如：点击量、页面浏览量（PV）、访问量、独立访客数、粉丝/好友/赞的数量、网站提留时间/浏览页数、收集到的用户邮件地址数量、下载量。</p><p>以下是一组不同公司核心指标的范例：<br>• 亚马逊，做的是电商购物的生意，核心指标是“商品销量额”。<br>• Medium，一家作者与读者交换故事想法的在线创作社区，核心指标是“总阅读时长”。<br>• Quora，允许专家以问答形式将知识技能分享给全世界，核心指标是“有多少问题被回答”。<br>• Airbnb，作为双边市场服务，作用是连接房东和住客，核心指标是“有多高比例的整晚房间被租赁出去”。<br>• Uber，同样是一家双边市场服务，赋予司机和乘客随时匹配的权利，Uber 的核心指标并非“有多少辆车成功搭载乘客”，而是“乘客从叫车到上车之间的平均候车时长”——这更能体现某一地区驾乘双方的用户密度、匹配算法的智能性。</p><p>核心指标通常是复合因素作用下的衡量标准。为了提升核心指标，你必须将它分解成若干个彼此关联且共同产生影响的关键指标（可能包含二级指标、三级指标甚至更多），然后分别去优化各自的影响因素，从而自下而上地影响核心指标。如：<br><img src="https://img-blog.csdnimg.cn/20200714135545864.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>例： 早在2007年4月前，Google的广告展示中使用了大面积的矩形区域作为背景，只要用户点击整个矩形区域，就视作产生广告点击，广告主需为此付费。看起来，更大的点击面积的确让人点击时移动鼠标更省眼力，促进点击率剧增，Google能因此获得更多收入。 但出乎意料的是，Google创始人自断一指，突然宣布将广告可点击区域限制在标题和链接区域，这对营收产生了负面影响。广告点击模式改变后数月间，Google的股票价格从2007年11月的740多美元，一路倾泻到了2008年年中的350多美元，引发了资本市场和科技评论圈的轩然大波。自此，很多媒体和出版商的点击转化率和收入都大幅下降。</p><p>果不其然，坚持带来了最终的胜利。Google的收入随后开始快速增长，估价也水涨船高，之前的变动被证明是有远见的，Google广告系统的收入日渐提升，成为Google公司的支柱性收入之一。</p><p>这里的奥妙可以用下面的增长模型解释：<br><img src="https://img-blog.csdnimg.cn/20200714135707102.PNG#pic_center" alt="在这里插入图片描述"><br>其中，每个指标对应的含义分别是：<br>• CPM：每千次展示给Google带来的收入。CPM越高代表Google赚钱越多。<br>• Coverage：广告覆盖率。广告覆盖率=出现广告的页面/所有页面。使用Google搜索时，浏览了10个页面，其中5个页面出现广告，则Coverage为50%。Google的Coverage大约是1/3。<br>• Depth：平均每页广告数。页面上广告数越多，整体展示量越高，但同时每个广告的点击率也可能更低。Google的Depth是每个页面1-3条广告。<br>• CTR：点击转化率。上面已经提到过。<br>• CPC：单次点击费用。上面也已提到过。 </p><p>绝大多数广告平台倾向于提升Coverage和Depth，因为CTR取决于用户，CPC则取决于广告主。为了确保用户体验，Google严格遵守广告少而精的策略，决定放弃Coverage和Depth，着力于CTR和CPC。 塞翁失马，焉知非福。虽然刚开始限制点击区域的改动，短期内降低了CTR，但正是由于成功减少了大量的意外点击，随着用户真实点击百分比的提高，广告主看到了每个点击更真实的价值，满意度也随之提高。广告主更愿意去买点击广告，触发了更高的单次点击费用。加之 Google 采用机器学习等技术帮助广告主增强展示的精准性，因此整体收入不降反升。</p><h3 id="3-3-建立团队内部协作流程"><a href="#3-3-建立团队内部协作流程" class="headerlink" title="3.3 建立团队内部协作流程"></a>3.3 建立团队内部协作流程</h3><p>打造自增长产品的创意始于增长模型， 这套流程主要由以下五个核心环节组成：<label style="color:red">头脑风暴&gt;确定优先级&gt;小规模测试&gt;动手研发&gt;持续优化</label></p><p><strong>第一步：头脑风暴，提出假设</strong><br>增长团队协作流程的原点，就是提出假设。假设是有根据的猜测，这些猜测在日后 能被证实或证伪，最终服务于产品迭代。<br>可证伪的假设=[具体并且可重复的动作]可以导致[预期中可评估的目标或结果]</p><p>头脑风暴是激发团队提出假设的常规方式。请试着怀揣开放心态，让所有人都参与进来，鼓励每个人都提出自己的意见。如 • 改变按钮文字 • 尝试不同平台 • 修改定价策略 • 将某个流程前置或后置 • 针对不同人群投放广告 • 发起一场营销活动 • 推翻重构产品界面头脑风暴的前提是：确立了明确的指标，并对产品增长模型有清晰认识。否则，很容易陷入一群人在会议室天马行空、乱枪打鸟的窘境，那绝对是你不愿看到的。</p><p>头脑风暴的基本原则是： • 推迟判断 • 鼓励大胆的创意 • 基于他人的创意延伸 • 不要偏题 • 一次只有一个人说话 • 借助视觉语言 • 追求数量</p><p>提出头脑风暴创意的方式： • 观察法：用户是如何使用的？竞争对手都做了些什么（从竞争对手那里偷师，先模仿再超越，切忌为了不同而不同）？行业内有什么新知创想？你的数据给了你哪些启发？ • 关联法：将产品流程与生活中的事物建立连接。例如，现实中的实体店铺经营有哪些值得借鉴的经验，可以用到我们的电商服务中？ • 社群法：创建或加入增长黑客们的圈子，在交流碰撞中迸发更多创意火花。 • 提问法：不妨自己设问，为什么会这样？如果我们XX，会怎样？还有哪些因素与XX有关？</p><p>一张好的备选创意列表（Backlog），应当包含如下项目： • 名称：为头脑风暴提出的创意取个名字。 •状态：创意尚处在想法阶段，还是正在设计试验中，或者试验已经设计完成。 • 分类：帮助团队成员明确这一试验服务的产品阶段。 • 指标：用哪项（些）指标判断试验是否成功。 • 预期结果：无论是拍脑袋还是基于以往数据经验，都要对试验结果有一定的预 期，通过将实际结果与预期结果的比较，增强对产品和市场的理解。 • 评估工时：涉及试验的各部门需要耗费的人员和天数。<br><img src="https://img-blog.csdnimg.cn/20200714140014179.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>第二步：确定优先级</strong><br>当资源有限时，面对长长的备选创意列表，分析每个创意值不值得优先做、花多少精力去做时，可以从以下三个维度评估：<br>• 收益值，即在当下或长期将为增长带来多大贡献。<br>• 消耗量，即需要花费的资源数量，包括资金、人力、时间、心智。<br>• 半衰期，即这项收益随时间衰减的速度，半衰期越长，影响维持越久。</p><p>如果我们从这三个维度划分不同的增长策略，由此便可得到由其组合成的八类策略：<br>• 高收益值、低消耗量、长半衰期策略：Hotmail 的签名档病毒推广、Dropbox邀请好友送空间。<br>• 高收益值、低消耗量、短半衰期策略：Airbnb借Craiglist邮件系统群发广告（很快被封）。<br>• 高收益值、高消耗量、长半衰期策略：Facebook 每天同时进行的数百项 A/B测试。<br>• 高收益值、高消耗量、短半衰期策略：绞尽脑汁做出红极一时的爆款病毒推广方案。<br>• 低收益值、高消耗量、长半衰期策略：彻底重构产品，优化整体架构。<br>• 低收益值、低消耗量、长半衰期策略：发布软文，使用有趣的产品文案。<br>• 低收益值、高消耗量、短半衰期策略：挨个手动发广告私信骚扰陌生网民。<br>• 低收益值、低消耗量、短半衰期策略：发布一条微博（假定你不是百万粉丝大V）。</p><p>据此对你收集到的方案做出筛选，更加着眼于高收益、低消耗、长半衰期的策略，而不是纠结于无关痛痒的细节，比如争论页面使用圆角还是直角、更换测试不同深度的40种蓝色，这对于初创公司来说完全没有任何意义。</p><p>另一种便于量化的优先级评估方式，是我们在咨询工作中总结出的 <label style="color:red">T.W.I.C.E 原则</label>。具体说来，它包括以下五项评定指标：</p><p>1.流量Traffic（1分最低，5分最优）<br>多少人能看到这项变化？你的改动是深埋在设置选项中，还是挂在网站首页？一项改动所触及的用户量是它能否产生作用的前提条件。<br>2.口碑Word of Mouth（1分最低，5分最优）<br>你的创意是否能促成显著的口碑传播效应？正面口碑，还是负面口碑？大多数改动在用户眼中无关痛痒，他们只是默默地接受；有些改动则让人眼前一亮，具备利于营销的话题点；还有些则可能引发特定人群的抵触情绪，你必须准备好危机公关预案。<br>3.影响力Impact（1分最低，5分最优）<br>你对于方案能产生多少影响力的预期如何？如果你的注册转化率只有10%，那么将它改善到20%就已经是100%的提升。如果80%的用户顺利走完注册转化漏斗，那么将这一数字改善为90%也不过是12.5%的提升。<br>4.自信心Confidence（1分最低，5分最优）<br>你的想法是通过借鉴别人既有的成功案例而升华归纳产生或者从信源靠谱的实践者那里汲取灵感，还是仅限于上班路上的灵光一现，缺乏数据支持和参考坐标？<br>5.实现难易度Ease（1分最低，5分最优）<br>新方案是否能在几个小时内就完成MVP并被测试？抑或需要数天乃至数周的努力？尽可能优先考虑最简单易行的解决方案，而不是邀功式地追求工作量和加班时长。</p><p>优先考虑最简单易行的解决方案。 需要为上述五项评估指标分别打分，最终筛选出得分最高的备选创意，列为最优之选。</p><p><strong>第三步：不断测试</strong><br>真正可持续的增长是通过小规模测试的不断迭代，验证试验假设，并将成功结果不断累加的过程。</p><p>• 首先，你要确认某个标准，用这个标准来判定每次改动或迭代是否成功。标准本身既可以是量化指标（比如有多少人点击注册按钮、有多少乘客叫车），也可以是定性指标（比如易用性），又或者是两者兼有。<br>• 一旦大家对成功的定义有了共识，那么接下来就是不断尝试各种方法，提出不同的假设，围绕假设去做试验。<br>• 当试验完成后，展开一次数据调研。如果达到了理想的预期目标，则之前的假设成立，可以全方位启用这项设计，然后马不停蹄地继续寻找下一个增长点；如果没有达到理想状态，则必须从难以立足的伪命题上吸取经验，反思总结，然后在解决 方案上迭代更新。</p><p><strong>第四步：动手研发</strong><br>在小规模测试有所成效的前提下，动手将你的增长创意开发成实际功能。</p><p>需遵循以下三个原则：</p><ul><li>不要重复发明轮子<br>——  在如今这个 SaaS 横行、随手可用的时代，大多数初创公司不会有技术风险。过度关注技术是一种浪费。你应该将注意力更多放在研发过程的科学性、结论导出的准确性和对指标的影响上。如果市场上有现成的工具，那么就尽量挪为己用。</li><li>内容动态化<br>——  增长黑客们总在思考如何用最少的代价来实现一件事情。如果研发阶段采取的方案缺乏灵活性，将可能造成后续维护时成本过高——最直接的体现，就是必须等待下一个版本的发布上线，才能修复问题或测试一个全新的创意，这有可能延误宝贵时机。为此，必须考虑在实现阶段尽可能将业务模块动态化。</li><li>让机器替你自动化执行<br>——  交给机器自动执行，从而将宝贵的智力资源节省出来，投入到创造新的增长策略中。如将手动发送邮件变成自动回复、让人工处理数据变为脚本抓取。</li></ul><p><strong>第五步：持续优化</strong><br>善于学习的团队能够从过往成功经验中总结出经验，提高下一次临门一脚的胜算。为此你应当将每次试验过程和数据记录下来，并且公开与全体成员分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020071414384626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品/运营" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81-%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="用户增长" scheme="http://yoursite.com/tags/%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】7 神经网络的学习(Neural Networks_Learning)</title>
    <link href="http://yoursite.com/2020/07/12/[Machine%20Learning]%207%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AD%A6%E4%B9%A0(Neural%20Networks_%20Learning)/"/>
    <id>http://yoursite.com/2020/07/12/[Machine%20Learning]%207%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AD%A6%E4%B9%A0(Neural%20Networks_%20Learning)/</id>
    <published>2020-07-12T06:38:26.000Z</published>
    <updated>2020-07-19T07:01:32.769Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200712143509812.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="7-Neural-Networks-Learning-神经网络的学习"><a href="#7-Neural-Networks-Learning-神经网络的学习" class="headerlink" title="7 Neural Networks-Learning(神经网络的学习)"></a>7 Neural Networks-Learning(神经网络的学习)</h2><h3 id="7-1-Cost-Function"><a href="#7-1-Cost-Function" class="headerlink" title="7.1 Cost Function"></a>7.1 Cost Function</h3><p>假设神经网络的训练样本有𝑚个，每个包含一组输入𝑥和一组输出信号𝑦，𝐿表示神经网络层数，𝑆<sub>𝐼</sub>表示每层的 neuron 个数(𝑆<sub>l</sub>表示输出层神经元个数)，𝑆<sub>L</sub>代表最后一层中处理单元的个数。</p><p>将神经网络的分类定义为两种情况：二类分类和多类分类，</p><ul><li>二类分类：𝑆<sub>L</sub> = 0, 𝑦 = 0 𝑜𝑟 1表示哪一类；</li><li>𝐾类分类：𝑆<sub>L</sub> = 𝑘, 𝑦<sub>i</sub> = 1表示分到第 i 类(𝑘 &gt; 2)；</li></ul><p><img src="https://img-blog.csdnimg.cn/20200711140907505.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>逻辑回归问题中的代价函数为：<br><img src="https://img-blog.csdnimg.cn/20200711141004490.PNG#pic_center" alt="在这里插入图片描述"><br>在逻辑回归中，只有一个输出变量，又称标量（scalar），也只有一个因变量𝑦，但是在神经网络中，可以有很多输出变量，ℎ𝜃(𝑥)是一个维度为𝐾的向量，并且训练集中的因变量也是同样维度的一个向量，因此代价函数会比逻辑回归更加复杂一些，为：<br><img src="https://img-blog.csdnimg.cn/2020071114131862.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个看起来复杂很多的代价函数背后的思想还是一样的，希望通过代价函数来观察算法预测的结果与真实情况的误差有多大，唯一不同的是，对于每一行特征，都会给出𝐾个预测，基本上可以利用循环，对每一行特征都预测𝐾个不同结果，然后在利用循环在𝐾个预测中选择可能性最高的一个，将其与𝑦中的实际数据进行比较。</p><p>正则化的那一项只是排除了每一层𝜃0后，每一层的𝜃 矩阵的和。最里层的循环𝑗循环所有的行（由𝑠𝑙 +1 层的激活单元数决定），循环𝑖则循环所有的列，由该层（𝑠𝑙层）的激活单元数所决定。即：ℎ𝜃(𝑥)与真实值之间的距离为每个样本-每个类输出的加和，对参数进行regularization 的 bias 项处理所有参数的平方和。</p><h3 id="7-2-Backpropagation-Algorithm-反向传播算法"><a href="#7-2-Backpropagation-Algorithm-反向传播算法" class="headerlink" title="7.2 Backpropagation Algorithm(反向传播算法)"></a>7.2 Backpropagation Algorithm(反向传播算法)</h3><p>在计算神经网络预测结果的时候采用了一种正向传播方法，从第一层开始正向一层一层进行计算，直到最后一层的ℎ𝜃(𝑥)。</p><p>现在，为了计算代价函数的偏导数 <img src="https://img-blog.csdnimg.cn/20200711145159753.png" alt="在这里插入图片描述">，需要采用一种反向传播算法，也就是首先计算最后一层的误差，然后再一层一层反向求出各层的误差，直到倒数第二层。 以一个例子来说明反向传播算法。</p><p>假设训练集只有一个实例(𝑥(1), 𝑦(1))，神经网络是一个四层的神经网络，其中𝐾 = 4，𝑆𝐿 = 4，𝐿 = 4：</p><p><strong>前向传播算法：</strong><br><img src="https://img-blog.csdnimg.cn/20200711145443278.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>反向传播算法</strong><br><img src="https://img-blog.csdnimg.cn/20200712131502934.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>从最后一层的误差开始计算，误差是激活单元的预测（a<sub>k</sub><sup>(4)</sup>）与实际值（𝑦<sup>𝑘</sup>）之间的误差，（𝑘 = 1: 𝑘），用𝛿来表示误差，则：𝛿<sup>(4)</sup> = 𝑎<sup>(4)</sup> − y 。</p><p>利用这个误差值来计算前一层的误差：𝛿<sup>(3)</sup> = (𝛩<sup>(3)</sup>)<sup>𝑇</sup>𝛿<sup>(4)</sup>∗ 𝑔′(𝑧<sup>(3)</sup>) 其中 𝑔′(𝑧<sup>(3)</sup>) 是 𝑆 形函数的导数，𝑔′(𝑧<sup>(3)</sup>)  = 𝑎<sup>(3)</sup>∗ (1 − 𝑎<sup>(3)</sup>)。而(𝛩<sup>(3)</sup>)<sup>𝑇</sup>𝛿<sup>(4)</sup>则是权重导致的误差的和。</p><p>下一步是继续计算第二层的误差：𝛿<sup>(2)</sup> = (𝛩<sup>(2)</sup>)<sup>𝑇</sup>𝛿<sup>(3)</sup>∗ 𝑔′(𝑧<sup>(2)</sup>) 。</p><p>因为第一层是输入变量，不存在误差。有了所有的误差的表达式后，便可以计算代价函数的偏导数了，假设𝜆 = 0，即不做任何正则化处理时有： 𝜕/𝜕𝛩<sub>𝑖𝑗</sub><sup>(𝑙)</sup>𝐽(𝛩) = 𝑎<sub>𝑗</sub><sup>(𝑙)</sup>𝛿<sub>𝑖</sub><sup>(𝑙+1)</sup> 。</p><p>上面式子中上下标的含义：</p><ul><li>𝑙 代表目前所计算的是第几层。</li><li>𝑗 代表目前计算层中的激活单元的下标，也将是下一层的第𝑗个输入变量的下标。</li><li>𝑖 代表下一层中误差单元的下标，是受到权重矩阵中第𝑖行影响的下一层中的误差单元的下标。</li></ul><p>如果考虑正则化处理，并且训练集是一个特征矩阵而非向量。在上面的特殊情况中，需要计算每一层的误差单元来计算代价函数的偏导数。在更为一般的情况中，同样需要计算每一层的误差单元，但是需要为整个训练集计算误差单元，此时的误差单元也是一个矩阵，我们用𝛥<sub>𝑖𝑗</sub><sup>(𝑙)</sup>来表示这个误差矩阵。第 𝑙 层的第 𝑖 个激活单元受到第 𝑗个参数影响而导致的误差。</p><p>反向传播算法为：<br><img src="https://img-blog.csdnimg.cn/20200712132926516.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>即首先用正向传播方法计算出每一层的激活单元，利用训练集的结果与神经网络预测的结果求出最后一层的误差，然后利用该误差运用反向传播法计算出直至第二层的所有误差。</p><p>在求出了𝛥<sub>𝑖𝑗</sub><sup>(𝑙)</sup>之后，便可以计算代价函数的偏导数了，计算方法如下：<br><img src="https://img-blog.csdnimg.cn/20200712133115751.PNG#pic_center" alt="在这里插入图片描述"><br>进一步理解：<br><img src="https://img-blog.csdnimg.cn/20200712135205765.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200712135416318.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020071213542917.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="7-3-Gradient-Checking-梯度检测"><a href="#7-3-Gradient-Checking-梯度检测" class="headerlink" title="7.3 Gradient Checking(梯度检测)"></a>7.3 Gradient Checking(梯度检测)</h3><p>当对一个较为复杂的模型（例如神经网络）使用梯度下降算法时，可能会存在一些不容易察觉的错误，意味着，虽然代价看上去在不断减小，但最终的结果可能并不是最优解。为了避免这样的问题，我们采取一种叫做==梯度的数值检验（Numerical Gradient Checking）==方法。这种方法的思想是通过估计梯度值来检验计算的导数值是否真的是所要求的。</p><p>对梯度的估计采用的方法是在代价函数上沿着切线的方向选择两个非常近的点然后计算两个点的平均值用以估计梯度。即对于某个特定的 𝜃，计算出在 𝜃-𝜀 处和 𝜃+𝜀 的代价值（𝜀是一个非常小的值，通常选取 0.001），然后求两个代价的平均，用以估计在 𝜃处的代价值。<br><img src="https://img-blog.csdnimg.cn/20200712140624589.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>当𝜃是一个向量时，则需要对偏导数进行检验。因为代价函数的偏导数检验只针对一个参数的改变进行检验。<br><img src="https://img-blog.csdnimg.cn/20200712140921217.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后还需要对通过反向传播方法计算出的偏导数进行检验。</p><p>根据上面的算法，计算出的偏导数存储在矩阵 𝐷<sub>𝑖𝑗</sub><sup>(𝑙)</sup> 中。检验时，要将该矩阵展开成为向量，同时也将 𝜃 矩阵展开为向量，针对每一个 𝜃 都计算一个近似的梯度值，将这些值存储于一个近似梯度矩阵中，最终将得出的这个矩阵同𝐷<sub>𝑖𝑗</sub><sup>(𝑙)</sup> 进行比较。</p><p><img src="https://img-blog.csdnimg.cn/20200712141514334.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="7-4-Random-Initialization-随机初始化"><a href="#7-4-Random-Initialization-随机初始化" class="headerlink" title="7.4 Random Initialization(随机初始化)"></a>7.4 Random Initialization(随机初始化)</h3><p>任何优化算法都需要一些初始的参数。到目前为止都是初始所有参数为 0，这样的初始方法对于逻辑回归来说是可行的，但是对于神经网络来说是不可行的。如果令所有的初始参数都为 0，这将意味着第二层的所有激活单元都会有相同的值。同理，如果初始所有的参数都为一个非 0 的数，结果也是一样的。</p><p>通常初始参数为正负𝜀之间的随机值，假设要随机初始一个尺寸为 10×11 的参数矩阵，代码如下：<br>Theta1 = np.random.randn(10, 11) * (2*eps) – eps</p><h3 id="7-5-Putting-it-together"><a href="#7-5-Putting-it-together" class="headerlink" title="7.5 Putting it together"></a>7.5 Putting it together</h3><p><strong>神经网络结构：</strong></p><ul><li>第一层——特征数量</li><li>最后一层——类的数量（K分类就是K个）</li><li>隐藏层——每个隐藏层的单元个数相同，且单元的个数越多越好</li><li>需要设计的结构——隐藏层的层数and单元个数</li></ul><p><strong>训练神经网络步骤：</strong></p><ul><li>(a)参数的随机初始化</li><li>(b)利用正向传播方法计算所有的h_θ (x)</li><li>(c)编写计算代价函数 J 的代码</li><li>(d)利用反向传播方法计算所有偏导数</li><li>(e)利用数值检验方法检验这些偏导数</li><li>(f)使用优化算法来最小化代价函数</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200712143509812.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Neural Networks" scheme="http://yoursite.com/tags/Neural-Networks/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】6 神经网络-表述(Neural Networks-Representation)</title>
    <link href="http://yoursite.com/2020/07/11/[Machine%20Learning]%206%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%A1%A8%E8%BF%B0(Neural%20Networks_%20Representation)/"/>
    <id>http://yoursite.com/2020/07/11/[Machine%20Learning]%206%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%A1%A8%E8%BF%B0(Neural%20Networks_%20Representation)/</id>
    <published>2020-07-11T05:05:59.000Z</published>
    <updated>2020-07-19T07:01:01.939Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200711130358651.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="6-Neural-Networks-Representation-神经网络：表述"><a href="#6-Neural-Networks-Representation-神经网络：表述" class="headerlink" title="6 Neural Networks: Representation(神经网络：表述)"></a>6 Neural Networks: Representation(神经网络：表述)</h2><h3 id="6-1-Non-linear-hypotheses-非线性假设"><a href="#6-1-Non-linear-hypotheses-非线性假设" class="headerlink" title="6.1 Non-linear hypotheses(非线性假设)"></a>6.1 Non-linear hypotheses(非线性假设)</h3><p>无论是线性回归还是逻辑回归都有这样一个缺点，即：当特征太多时，计算的负荷会非常大。</p><p>假设希望训练一个模型来识别视觉对象（例如识别一张图片上是否是一辆汽车），应该怎么做呢？一种方法是利用很多汽车的图片和很多非汽车的图片，然后利用这些图片上一个个像素的值（饱和度或亮度）来作为特征。<br><img src="https://img-blog.csdnimg.cn/20200710163445193.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>假如只选用灰度图片，每个像素则只有一个值（而非 RGB 值），可以选取图片上的两个不同位置上的两个像素，然后训练一个逻辑回归算法利用这两个像素的值来判断图片上是否是汽车：<br><img src="https://img-blog.csdnimg.cn/20200710163602179.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>假使采用的都是 50x50 像素的小图片，并且将所有的像素视为特征，则会有2500 个特征，如果要进一步将两两特征组合构成一个多项式模型，则会有约2500<sup>2</sup>/2个（接近 3 百万个）特征。普通的逻辑回归模型，不能有效地处理这么多的特征，这时候需要神经网络。</p><h3 id="6-2-Model-Representation-模型表示"><a href="#6-2-Model-Representation-模型表示" class="headerlink" title="6.2 Model Representation(模型表示)"></a>6.2 Model Representation(模型表示)</h3><p>神经网络是一种很古老的算法，它最初产生的目的是制造能模拟大脑的机器。</p><p>为了构建神经网络模型，首先需要思考大脑中的神经网络是怎样的？每一个神经元都可以被认为是一个处理单元/神经核（processing unit/Nucleus），它含有许多输入/树突（input/Dendrite），并且有一个输出/轴突（output/Axon）。神经网络是大量神经元相互链接并通过电脉冲来交流的一个网络。<br><img src="https://img-blog.csdnimg.cn/20200710180319605.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>神经元利用微弱的电流进行沟通。这些弱电流也称作动作电位，其实就是一些微弱的电流。所以如果神经元想要传递一个消息，它就会就通过它的轴突，发送一段微弱电流给其他神经元。</p><p>下图是一条连接到输入神经，或者连接另一个神经元树突的神经，接下来这个神经元接收这条消息，做一些计算，它有可能会反过来将在轴突上的自己的消息传给其他神经元。这就是所有人类思考的模型：我们的神经元把自己的收到的消息进行计算，并向其他神经元传递消息。这也是感觉和肌肉运转的原理。如果想活动一块肌肉，就会触发一个神经元给肌肉发送脉冲，并引起你的肌肉收缩。如果一些感官：比如说眼睛想要给大脑传递一个消息，那么它就像这样发送电脉冲给大脑的。<br><img src="https://img-blog.csdnimg.cn/20200710183458169.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>神经网络模型建立在很多神经元之上，每一个神经元又是一个个学习模型。这些神经元（也叫激活单元，activation unit）采纳一些特征作为输出，并且根据本身的模型提供一个输出。下图是一个以逻辑回归模型作为自身学习模型的神经元示例，在神经网络中，参数又可被成为权重（weight）。<br><img src="https://img-blog.csdnimg.cn/20200710183840825.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设计出了类似于神经元的神经网络，效果如下：<br><img src="https://img-blog.csdnimg.cn/20200710184011764.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其中𝑥1, 𝑥2, 𝑥3是输入单元（input units），我们将原始数据输入给它们。𝑎1, 𝑎2, 𝑎3是中间单元，它们负责将数据进行处理，然后呈递到下一层。最后是输出单元，它负责计算ℎ𝜃<br>(𝑥)。</p><p>神经网络模型是许多逻辑单元按照不同层级组织起来的网络，每一层的输出变量都是下一层的输入变量。下图为一个 3 层的神经网络，第一层成为输入层（Input Layer），最后一层称为输出层（Output Layer），中间一层成为隐藏层（Hidden Layers）。为每一层都增加一个偏差单位（bias unit）：<br><img src="https://img-blog.csdnimg.cn/2020071018415966.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：𝑎<sub>𝑖</sub><sup>(𝑗)</sup> 代表第𝑗 层的第 𝑖 个激活单元。𝜃<sup>(𝑗)</sup>代表从第 𝑗 层映射到第𝑗 + 1 层时的权重的矩阵，例如𝜃<sup>(1)</sup>代表从第一层映射到第二层的权重的矩阵。其尺寸为：以第 𝑗 + 1层的激活单元数量为行数，以第 𝑗 层的激活单元数加一为列数的矩阵。例如：上图所示的神经网络中𝜃<sup>(1)</sup>的尺寸为 3*4。</p><p>对于上图所示的模型，激活单元和输出分别表达为：<br><img src="https://img-blog.csdnimg.cn/20200710185328930.PNG#pic_center" alt="在这里插入图片描述"><br>上面进行的讨论中只是将特征矩阵中的一行（一个训练实例）喂给了神经网络，我们需要将整个训练集都喂给我们的神经网络算法来学习模型。</p><p>我们可以知道：每一个𝑎都是由上一层所有的𝑥和每一个𝑥所对应的决定的。<br>（我们把这样从左到右的算法称为前向传播算法( FORWARD PROPAGATION )）</p><p>把𝑥, 𝜃, 𝑎 分别用矩阵表示，我们可以得到𝜃 ⋅ 𝑋 = a :<br><img src="https://img-blog.csdnimg.cn/20200710190032240.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>相对于使用循环来编码，利用向量化的方法会使得计算更为简便。以上面的神经网络为例，试着计算第二层的值：<br><img src="https://img-blog.csdnimg.cn/20200710194213751.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200710194334438.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>为了更好了了解 Neuron Networks 的工作原理，先把左半部分遮住：<br><img src="https://img-blog.csdnimg.cn/20200710195253281.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>右半部分其实就是以𝑎0, 𝑎1, 𝑎2, 𝑎3, 按照 Logistic Regression 的方式输出ℎ𝜃(𝑥)：</p><p><img src="https://img-blog.csdnimg.cn/20200710195332905.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其实神经网络就像是 logistic regression，只不过把 logistic regression 中的输入向量[𝑥<sub>1</sub> ∼ 𝑥<sub>3</sub>] 变成了中间层的[𝑎<sub>1</sub><sup>(2)</sup>∼ 𝑎<sub>3</sub><sup>(2)</sup>], 即:<br><img src="https://img-blog.csdnimg.cn/20200710195730589.PNG#pic_center" alt="在这里插入图片描述"><br>可以把𝑎0, 𝑎1, 𝑎2, 𝑎3看成更为高级的特征值，也就是𝑥0, 𝑥1, 𝑥2, 𝑥3的进化体，并且它们是由 𝑥与决定的，因为是梯度下降的，所以𝑎是变化的，并且变得越来越厉害，所以这些更高级的特征值远比仅仅将 𝑥次方厉害，也能更好的预测新数据。这就是神经网络相比于逻辑回归和线性回归的优势。</p><p>从本质上讲，神经网络能够通过学习得出其自身的一系列特征。在普通的逻辑回归中，被限制为使用数据中的原始特征𝑥1, 𝑥2, . . . , 𝑥𝑛，虽然可以使用一些二项式项来组合这些特征，但是仍然受到这些原始特征的限制。在神经网络中，原始特征只是输入层，在上面三层的神经网络例子中，第三层也就是输出层做出的预测利用的是第二层的特征，而非输入层中的原始特征，可以认为第二层中的特征是神经网络通过学习后自己得出的一系列用于预测输出变量的新特征。</p><p>神经网络中，单层神经元（无中间层）的计算可用来表示逻辑运算，比如逻辑与(AND)、逻辑或(OR)。</p><p>举例说明：逻辑与(AND)；下图中左半部分是神经网络的设计与 output 层表达式，右边上部分是 sigmod 函数，下半部分是真值表。</p><p>可以用这样的一个神经网络表示 <strong>AND 函数：</strong><br><img src="https://img-blog.csdnimg.cn/20200711123825308.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>OR 函数：</strong><br><img src="https://img-blog.csdnimg.cn/20200711123956883.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>OR 与 AND 整体一样，区别只在于的取值不同。</p><p>利用神经元来组合成更为复杂的神经网络可以实现更复杂的运算。例如要实现 XNOR 功能（输入的两个值必须一样，均为 1 或均为 0），即：<br>XNOR = (x1 ANDx2) OR((NOT x1)AND(NOT x2))</p><p>首先构造能表达(x1 ANDx2)和(NOT x1)AND(NOT x2)部分的神经元：<br><img src="https://img-blog.csdnimg.cn/20200711125641473.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200711125006673.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后将表示 AND 的神经元和表示(NOT x1)AND(NOT x2)的神经元以及表示 OR 的神经元进行组合：<br><img src="https://img-blog.csdnimg.cn/20200711125423807.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样就得到了一个能实现 XNOR 运算符功能的神经网络。</p><p>按这种方法可以逐渐构造出越来越复杂的函数，也能得到更加厉害的特征值。这就是神经网络的厉害之处。</p><h3 id="6-3-Multi-class-Classification-多元分类"><a href="#6-3-Multi-class-Classification-多元分类" class="headerlink" title="6.3 Multi-class Classification(多元分类)"></a>6.3 Multi-class Classification(多元分类)</h3><p>当有不止两种分类时（也就是𝑦 = 1,2,3 ….）<br><img src="https://img-blog.csdnimg.cn/2020071112595442.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200711130358651.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Neural Networks" scheme="http://yoursite.com/tags/Neural-Networks/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】5 正则化(Regularization)</title>
    <link href="http://yoursite.com/2020/07/08/[Machine%20Learning]%205%20%E6%AD%A3%E5%88%99%E5%8C%96(Regularization)/"/>
    <id>http://yoursite.com/2020/07/08/[Machine%20Learning]%205%20%E6%AD%A3%E5%88%99%E5%8C%96(Regularization)/</id>
    <published>2020-07-08T08:13:02.000Z</published>
    <updated>2020-07-19T07:01:55.639Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200708161032267.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="5-Regularization-正则化"><a href="#5-Regularization-正则化" class="headerlink" title="5 Regularization(正则化)"></a>5 Regularization(正则化)</h2><h3 id="5-1-The-problem-of-overfitting"><a href="#5-1-The-problem-of-overfitting" class="headerlink" title="5.1 The problem of overfitting"></a>5.1 The problem of overfitting</h3><p><strong>case1：</strong><br><img src="https://img-blog.csdnimg.cn/20200708133431983.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>第一个模型是一个线性模型，欠拟合，不能很好地适应训练集；</li><li>第三个模型是一个四次方的模型，过于强调拟合原始数据，而丢失了算法的本质：预测新数据。即，若给出一个新的值使之预测，它将表现的很差；</li><li>而中间的模型似乎最合适。</li></ul><p><strong>case2：</strong><br><img src="https://img-blog.csdnimg.cn/20200708134042138.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同上。</p><p><strong>过拟合的解决方法</strong><br><img src="https://img-blog.csdnimg.cn/20200708134338840.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="5-2-Cost-Function"><a href="#5-2-Cost-Function" class="headerlink" title="5.2 Cost Function"></a>5.2 Cost Function</h3><p>上面的回归问题中模型是：<br><img src="https://img-blog.csdnimg.cn/20200708135115992.PNG#pic_center" alt="在这里插入图片描述"><br>一般而言，正是那些高次项导致了过拟合的产生，所以如果能让这些高次项的系数接近于 0 的话，就能很好的拟合了，所以可以在一定程度上减小这些参数𝜃 的值，这正是正则化的基本方法。当要减少𝜃3和𝜃4的大小，需要做的便是修改代价函数，在其中𝜃3和𝜃4 设置一点惩罚。在尝试最小化代价时也需要将这个惩罚纳入考虑中，并最终导致选择较小一些的𝜃3和𝜃4。</p><p>修改后的代价函数：<br><img src="https://img-blog.csdnimg.cn/2020070813555675.PNG#pic_center" alt="在这里插入图片描述"><br>通过这样的代价函数选择出的𝜃3和𝜃4 对预测结果的影响就比之前要小许多。假如有非常多的特征，并不知道其中哪些特征需要惩罚，可以将对所有的特征进行惩罚，并且让代价函数最优化的软件来选择这些惩罚的程度。这样的结果是得到了一个较为简单的能防止过拟合问题的假设：<br><img src="https://img-blog.csdnimg.cn/20200708135853580.PNG#pic_center" alt="在这里插入图片描述"><br>其中𝜆又称为==正则化参数（Regularization Parameter）==。 注：根据惯例，我们不对𝜃0 进行惩罚。经过正则化处理的模型（粉色）与原模型（蓝色）的可能对比如下图所示：<br><img src="https://img-blog.csdnimg.cn/2020070814004971.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果选择的正则化参数 λ 过大，则会把所有的参数都最小化了，那么𝜃（不包括𝜃0）都会趋近于 0，这样我们所得到的只能是一条平行于𝑥轴的直线，模型变成 ℎ<sub>𝜃</sub>(𝑥) =𝜃<sub>0</sub>，造成欠拟合。</p><h3 id="5-3-Regularizede-linear-regression-正则化线性回归"><a href="#5-3-Regularizede-linear-regression-正则化线性回归" class="headerlink" title="5.3 Regularizede linear regression(正则化线性回归)"></a>5.3 Regularizede linear regression(正则化线性回归)</h3><p>对于线性回归的求解，之前推导了两种学习算法：一种基于梯度下降，一种基于正规方程。</p><p>正则化线性回归的代价函数为：<br><img src="https://img-blog.csdnimg.cn/20200708142309532.PNG#pic_center" alt="在这里插入图片描述"><br>如果要使用梯度下降法令这个代价函数最小化，因为未进行正则化，所以梯度下降算法将分两种情形：<br><img src="https://img-blog.csdnimg.cn/20200708142428802.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对上面的算法中𝑗 = 1,2, . . . , 𝑛 时的更新式子进行调整可得：<br><img src="https://img-blog.csdnimg.cn/2020070814252032.PNG#pic_center" alt="在这里插入图片描述"><br>可以看出，正则化线性回归的梯度下降算法的变化在于，每次都在原有算法更新规则的基础上令𝜃值减少了一个额外的值。</p><p>注：在梯度下降时，对任意的θ<sub>j</sub>的处理可以分为两部分，J(θ)的偏导数 + 单独针对该θ<sub>j</sub>的正则化项。</p><p>同样也可以利用正规方程来求解正则化线性回归模型，方法如下所示：<br><img src="https://img-blog.csdnimg.cn/20200708155229540.PNG#pic_center" alt="在这里插入图片描述"><br>图中的矩阵尺寸为 (𝑛 + 1) ∗ (𝑛 + 1)。</p><h3 id="5-4-Regularized-Logistic-Regression-正则化的逻辑回归模型"><a href="#5-4-Regularized-Logistic-Regression-正则化的逻辑回归模型" class="headerlink" title="5.4 Regularized Logistic Regression(正则化的逻辑回归模型)"></a>5.4 Regularized Logistic Regression(正则化的逻辑回归模型)</h3><p>针对逻辑回归问题，之前已学习过两种优化算法：首先学习了使用梯度下降法来优化代价函数𝐽(𝜃)，接下来学习了更高级的优化算法，这些高级优化算法需要自己设计代价函数𝐽(𝜃)。<br><img src="https://img-blog.csdnimg.cn/20200708160007681.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对于逻辑回归，代价函数正则化的表达式：<br><img src="https://img-blog.csdnimg.cn/20200708160155875.PNG#pic_center" alt="在这里插入图片描述"><br>要最小化该代价函数，通过求导，得出梯度下降算法为：<br><img src="https://img-blog.csdnimg.cn/20200708160313567.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：看上去同线性回归一样，但是知道 ℎ<sub>𝜃</sub>(𝑥) = 𝑔(𝜃<sup>𝑇</sup>𝑋)，所以与线性回归不同。𝜃<sub>0</sub>不参与其中的任何一个正则化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200708161032267.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM5OTA3NA==,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
</feed>
